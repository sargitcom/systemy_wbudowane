

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Jun  6 03:14:11 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39  0000                     
    40                           ; Version 2.10
    41                           ; Generated 31/07/2019 GMT
    42                           ; 
    43                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F4620 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     _TRISE	set	3990
    75  0000                     _TRISD	set	3989
    76  0000                     _TRISC	set	3988
    77  0000                     _TRISB	set	3987
    78  0000                     _TRISA	set	3986
    79  0000                     _ADCON2	set	4032
    80  0000                     _ADCON1	set	4033
    81  0000                     _PORTBbits	set	3969
    82  0000                     _PORTEbits	set	3972
    83  0000                     _ADRESL	set	4035
    84  0000                     _ADRESH	set	4036
    85  0000                     _ADCON0bits	set	4034
    86  0000                     _ADCON0	set	4034
    87  0000                     _PORTD	set	3971
    88                           
    89                           	psect	mediumconst
    90  00FEFA                     __pmediumconst:
    91                           	opt callstack 0
    92  00FEFA  00                 	db	0
    93  00FEFB  30                 	db	48	;'0'
    94  00FEFC  31                 	db	49	;'1'
    95  00FEFD  32                 	db	50	;'2'
    96  00FEFE  33                 	db	51	;'3'
    97  00FEFF  34                 	db	52	;'4'
    98  00FF00  35                 	db	53	;'5'
    99  00FF01  36                 	db	54	;'6'
   100  00FF02  37                 	db	55	;'7'
   101  00FF03  38                 	db	56	;'8'
   102  00FF04  39                 	db	57	;'9'
   103  00FF05  41                 	db	65	;'A'
   104  00FF06  42                 	db	66	;'B'
   105  00FF07  43                 	db	67	;'C'
   106  00FF08  44                 	db	68	;'D'
   107  00FF09  45                 	db	69	;'E'
   108  00FF0A  46                 	db	70	;'F'
   109  00FF0B  00                 	db	0
   110  00FF0C                     STR_2:
   111  00FF0C  50                 	db	80	;'P'
   112  00FF0D  72                 	db	114	;'r'
   113  00FF0E  6F                 	db	111	;'o'
   114  00FF0F  67                 	db	103	;'g'
   115  00FF10  72                 	db	114	;'r'
   116  00FF11  61                 	db	97	;'a'
   117  00FF12  6D                 	db	109	;'m'
   118  00FF13  20                 	db	32
   119  00FF14  31                 	db	49	;'1'
   120  00FF15  20                 	db	32
   121  00FF16  73                 	db	115	;'s'
   122  00FF17  74                 	db	116	;'t'
   123  00FF18  61                 	db	97	;'a'
   124  00FF19  72                 	db	114	;'r'
   125  00FF1A  74                 	db	116	;'t'
   126  00FF1B  00                 	db	0
   127  00FF1C                     STR_4:
   128  00FF1C  50                 	db	80	;'P'
   129  00FF1D  72                 	db	114	;'r'
   130  00FF1E  6F                 	db	111	;'o'
   131  00FF1F  67                 	db	103	;'g'
   132  00FF20  72                 	db	114	;'r'
   133  00FF21  61                 	db	97	;'a'
   134  00FF22  6D                 	db	109	;'m'
   135  00FF23  20                 	db	32
   136  00FF24  32                 	db	50	;'2'
   137  00FF25  20                 	db	32
   138  00FF26  73                 	db	115	;'s'
   139  00FF27  74                 	db	116	;'t'
   140  00FF28  61                 	db	97	;'a'
   141  00FF29  72                 	db	114	;'r'
   142  00FF2A  74                 	db	116	;'t'
   143  00FF2B  00                 	db	0
   144  00FF2C                     STR_6:
   145  00FF2C  50                 	db	80	;'P'
   146  00FF2D  72                 	db	114	;'r'
   147  00FF2E  6F                 	db	111	;'o'
   148  00FF2F  67                 	db	103	;'g'
   149  00FF30  72                 	db	114	;'r'
   150  00FF31  61                 	db	97	;'a'
   151  00FF32  6D                 	db	109	;'m'
   152  00FF33  20                 	db	32
   153  00FF34  33                 	db	51	;'3'
   154  00FF35  20                 	db	32
   155  00FF36  73                 	db	115	;'s'
   156  00FF37  74                 	db	116	;'t'
   157  00FF38  61                 	db	97	;'a'
   158  00FF39  72                 	db	114	;'r'
   159  00FF3A  74                 	db	116	;'t'
   160  00FF3B  00                 	db	0
   161  00FF3C                     STR_8:
   162  00FF3C  50                 	db	80	;'P'
   163  00FF3D  72                 	db	114	;'r'
   164  00FF3E  6F                 	db	111	;'o'
   165  00FF3F  67                 	db	103	;'g'
   166  00FF40  72                 	db	114	;'r'
   167  00FF41  61                 	db	97	;'a'
   168  00FF42  6D                 	db	109	;'m'
   169  00FF43  20                 	db	32
   170  00FF44  34                 	db	52	;'4'
   171  00FF45  20                 	db	32
   172  00FF46  73                 	db	115	;'s'
   173  00FF47  74                 	db	116	;'t'
   174  00FF48  61                 	db	97	;'a'
   175  00FF49  72                 	db	114	;'r'
   176  00FF4A  74                 	db	116	;'t'
   177  00FF4B  00                 	db	0
   178  00FF4C                     STR_10:
   179  00FF4C  50                 	db	80	;'P'
   180  00FF4D  72                 	db	114	;'r'
   181  00FF4E  6F                 	db	111	;'o'
   182  00FF4F  67                 	db	103	;'g'
   183  00FF50  72                 	db	114	;'r'
   184  00FF51  61                 	db	97	;'a'
   185  00FF52  6D                 	db	109	;'m'
   186  00FF53  20                 	db	32
   187  00FF54  35                 	db	53	;'5'
   188  00FF55  20                 	db	32
   189  00FF56  73                 	db	115	;'s'
   190  00FF57  74                 	db	116	;'t'
   191  00FF58  61                 	db	97	;'a'
   192  00FF59  72                 	db	114	;'r'
   193  00FF5A  74                 	db	116	;'t'
   194  00FF5B  00                 	db	0
   195  00FF5C                     STR_12:
   196  00FF5C  50                 	db	80	;'P'
   197  00FF5D  72                 	db	114	;'r'
   198  00FF5E  6F                 	db	111	;'o'
   199  00FF5F  67                 	db	103	;'g'
   200  00FF60  72                 	db	114	;'r'
   201  00FF61  61                 	db	97	;'a'
   202  00FF62  6D                 	db	109	;'m'
   203  00FF63  20                 	db	32
   204  00FF64  36                 	db	54	;'6'
   205  00FF65  20                 	db	32
   206  00FF66  73                 	db	115	;'s'
   207  00FF67  74                 	db	116	;'t'
   208  00FF68  61                 	db	97	;'a'
   209  00FF69  72                 	db	114	;'r'
   210  00FF6A  74                 	db	116	;'t'
   211  00FF6B  00                 	db	0
   212  00FF6C                     STR_14:
   213  00FF6C  50                 	db	80	;'P'
   214  00FF6D  72                 	db	114	;'r'
   215  00FF6E  6F                 	db	111	;'o'
   216  00FF6F  67                 	db	103	;'g'
   217  00FF70  72                 	db	114	;'r'
   218  00FF71  61                 	db	97	;'a'
   219  00FF72  6D                 	db	109	;'m'
   220  00FF73  20                 	db	32
   221  00FF74  37                 	db	55	;'7'
   222  00FF75  20                 	db	32
   223  00FF76  73                 	db	115	;'s'
   224  00FF77  74                 	db	116	;'t'
   225  00FF78  61                 	db	97	;'a'
   226  00FF79  72                 	db	114	;'r'
   227  00FF7A  74                 	db	116	;'t'
   228  00FF7B  00                 	db	0
   229  00FF7C                     STR_15:
   230  00FF7C  50                 	db	80	;'P'
   231  00FF7D  72                 	db	114	;'r'
   232  00FF7E  6F                 	db	111	;'o'
   233  00FF7F  67                 	db	103	;'g'
   234  00FF80  72                 	db	114	;'r'
   235  00FF81  61                 	db	97	;'a'
   236  00FF82  6D                 	db	109	;'m'
   237  00FF83  20                 	db	32
   238  00FF84  38                 	db	56	;'8'
   239  00FF85  20                 	db	32
   240  00FF86  73                 	db	115	;'s'
   241  00FF87  74                 	db	116	;'t'
   242  00FF88  61                 	db	97	;'a'
   243  00FF89  72                 	db	114	;'r'
   244  00FF8A  74                 	db	116	;'t'
   245  00FF8B  00                 	db	0
   246  00FF8C                     STR_17:
   247  00FF8C  50                 	db	80	;'P'
   248  00FF8D  72                 	db	114	;'r'
   249  00FF8E  6F                 	db	111	;'o'
   250  00FF8F  67                 	db	103	;'g'
   251  00FF90  72                 	db	114	;'r'
   252  00FF91  61                 	db	97	;'a'
   253  00FF92  6D                 	db	109	;'m'
   254  00FF93  20                 	db	32
   255  00FF94  39                 	db	57	;'9'
   256  00FF95  20                 	db	32
   257  00FF96  73                 	db	115	;'s'
   258  00FF97  74                 	db	116	;'t'
   259  00FF98  61                 	db	97	;'a'
   260  00FF99  72                 	db	114	;'r'
   261  00FF9A  74                 	db	116	;'t'
   262  00FF9B  00                 	db	0
   263  00FF9C                     STR_3:
   264  00FF9C  50                 	db	80	;'P'
   265  00FF9D  72                 	db	114	;'r'
   266  00FF9E  6F                 	db	111	;'o'
   267  00FF9F  67                 	db	103	;'g'
   268  00FFA0  72                 	db	114	;'r'
   269  00FFA1  61                 	db	97	;'a'
   270  00FFA2  6D                 	db	109	;'m'
   271  00FFA3  20                 	db	32
   272  00FFA4  31                 	db	49	;'1'
   273  00FFA5  20                 	db	32
   274  00FFA6  65                 	db	101	;'e'
   275  00FFA7  6E                 	db	110	;'n'
   276  00FFA8  64                 	db	100	;'d'
   277  00FFA9  00                 	db	0
   278  00FFAA                     STR_5:
   279  00FFAA  50                 	db	80	;'P'
   280  00FFAB  72                 	db	114	;'r'
   281  00FFAC  6F                 	db	111	;'o'
   282  00FFAD  67                 	db	103	;'g'
   283  00FFAE  72                 	db	114	;'r'
   284  00FFAF  61                 	db	97	;'a'
   285  00FFB0  6D                 	db	109	;'m'
   286  00FFB1  20                 	db	32
   287  00FFB2  32                 	db	50	;'2'
   288  00FFB3  20                 	db	32
   289  00FFB4  65                 	db	101	;'e'
   290  00FFB5  6E                 	db	110	;'n'
   291  00FFB6  64                 	db	100	;'d'
   292  00FFB7  00                 	db	0
   293  00FFB8                     STR_7:
   294  00FFB8  50                 	db	80	;'P'
   295  00FFB9  72                 	db	114	;'r'
   296  00FFBA  6F                 	db	111	;'o'
   297  00FFBB  67                 	db	103	;'g'
   298  00FFBC  72                 	db	114	;'r'
   299  00FFBD  61                 	db	97	;'a'
   300  00FFBE  6D                 	db	109	;'m'
   301  00FFBF  20                 	db	32
   302  00FFC0  33                 	db	51	;'3'
   303  00FFC1  20                 	db	32
   304  00FFC2  65                 	db	101	;'e'
   305  00FFC3  6E                 	db	110	;'n'
   306  00FFC4  64                 	db	100	;'d'
   307  00FFC5  00                 	db	0
   308  00FFC6                     STR_9:
   309  00FFC6  50                 	db	80	;'P'
   310  00FFC7  72                 	db	114	;'r'
   311  00FFC8  6F                 	db	111	;'o'
   312  00FFC9  67                 	db	103	;'g'
   313  00FFCA  72                 	db	114	;'r'
   314  00FFCB  61                 	db	97	;'a'
   315  00FFCC  6D                 	db	109	;'m'
   316  00FFCD  20                 	db	32
   317  00FFCE  34                 	db	52	;'4'
   318  00FFCF  20                 	db	32
   319  00FFD0  65                 	db	101	;'e'
   320  00FFD1  6E                 	db	110	;'n'
   321  00FFD2  64                 	db	100	;'d'
   322  00FFD3  00                 	db	0
   323  00FFD4                     STR_11:
   324  00FFD4  50                 	db	80	;'P'
   325  00FFD5  72                 	db	114	;'r'
   326  00FFD6  6F                 	db	111	;'o'
   327  00FFD7  67                 	db	103	;'g'
   328  00FFD8  72                 	db	114	;'r'
   329  00FFD9  61                 	db	97	;'a'
   330  00FFDA  6D                 	db	109	;'m'
   331  00FFDB  20                 	db	32
   332  00FFDC  35                 	db	53	;'5'
   333  00FFDD  20                 	db	32
   334  00FFDE  65                 	db	101	;'e'
   335  00FFDF  6E                 	db	110	;'n'
   336  00FFE0  64                 	db	100	;'d'
   337  00FFE1  00                 	db	0
   338  00FFE2                     STR_13:
   339  00FFE2  50                 	db	80	;'P'
   340  00FFE3  72                 	db	114	;'r'
   341  00FFE4  6F                 	db	111	;'o'
   342  00FFE5  67                 	db	103	;'g'
   343  00FFE6  72                 	db	114	;'r'
   344  00FFE7  61                 	db	97	;'a'
   345  00FFE8  6D                 	db	109	;'m'
   346  00FFE9  20                 	db	32
   347  00FFEA  36                 	db	54	;'6'
   348  00FFEB  20                 	db	32
   349  00FFEC  65                 	db	101	;'e'
   350  00FFED  6E                 	db	110	;'n'
   351  00FFEE  64                 	db	100	;'d'
   352  00FFEF  00                 	db	0
   353  00FFF0                     STR_16:
   354  00FFF0  50                 	db	80	;'P'
   355  00FFF1  72                 	db	114	;'r'
   356  00FFF2  6F                 	db	111	;'o'
   357  00FFF3  67                 	db	103	;'g'
   358  00FFF4  72                 	db	114	;'r'
   359  00FFF5  61                 	db	97	;'a'
   360  00FFF6  6D                 	db	109	;'m'
   361  00FFF7  20                 	db	32
   362  00FFF8  38                 	db	56	;'8'
   363  00FFF9  20                 	db	32
   364  00FFFA  65                 	db	101	;'e'
   365  00FFFB  6E                 	db	110	;'n'
   366  00FFFC  64                 	db	100	;'d'
   367  00FFFD  00                 	db	0
   368                           
   369                           ; #config settings
   370  00FFFE  00                 	db	0	; dummy byte at the end
   371  0000                     
   372                           	psect	cinit
   373  00F1D8                     __pcinit:
   374                           	opt callstack 0
   375  00F1D8                     start_initialization:
   376                           	opt callstack 0
   377  00F1D8                     __initialization:
   378                           	opt callstack 0
   379                           
   380                           ; Clear objects allocated to COMRAM (15 bytes)
   381  00F1D8  EE00  F01C         	lfsr	0,__pbssCOMRAM
   382  00F1DC  0E0F               	movlw	15
   383  00F1DE                     clear_0:
   384  00F1DE  6AEE               	clrf	postinc0,c
   385  00F1E0  06E8               	decf	wreg,f,c
   386  00F1E2  E1FD               	bnz	clear_0
   387  00F1E4                     end_of_initialization:
   388                           	opt callstack 0
   389  00F1E4                     __end_of__initialization:
   390                           	opt callstack 0
   391  00F1E4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   392  00F1E6  6EF8               	movwf	tblptru,c
   393  00F1E8  0100               	movlb	0
   394  00F1EA  EFF1  F079         	goto	_main	;jump to C main() function
   395                           
   396                           	psect	bssCOMRAM
   397  00001C                     __pbssCOMRAM:
   398                           	opt callstack 0
   399  00001C                     _potentiomer2value:
   400                           	opt callstack 0
   401  00001C                     	ds	6
   402  000022                     _potentiomer1value:
   403                           	opt callstack 0
   404  000022                     	ds	6
   405  000028                     _potentiometr:
   406                           	opt callstack 0
   407  000028                     	ds	2
   408  00002A                     _direction:
   409                           	opt callstack 0
   410  00002A                     	ds	1
   411                           
   412                           	psect	cstackCOMRAM
   413  000001                     __pcstackCOMRAM:
   414                           	opt callstack 0
   415  000001                     ?_isProgramInterupted:
   416                           	opt callstack 0
   417  000001                     ?___awdiv:
   418                           	opt callstack 0
   419  000001                     ?___awmod:
   420                           	opt callstack 0
   421  000001                     lcd_wr@val:
   422                           	opt callstack 0
   423  000001                     convertValueToGrayCode@value:
   424                           	opt callstack 0
   425  000001                     nextSnake@snake:
   426                           	opt callstack 0
   427  000001                     getGeneratedValue@rolledSeed:
   428                           	opt callstack 0
   429  000001                     intToBinary@buffor:
   430                           	opt callstack 0
   431  000001                     printMask@mask:
   432                           	opt callstack 0
   433  000001                     delay@ms:
   434                           	opt callstack 0
   435  000001                     clearMaskFromNthPosition@mask:
   436                           	opt callstack 0
   437  000001                     changeProgram@program:
   438                           	opt callstack 0
   439  000001                     ___awdiv@dividend:
   440                           	opt callstack 0
   441  000001                     ___awmod@dividend:
   442                           	opt callstack 0
   443                           
   444                           ; 2 bytes @ 0x0
   445  000001                     	ds	1
   446  000002                     lcd_cmd@val:
   447                           	opt callstack 0
   448  000002                     lcd_dat@val:
   449                           	opt callstack 0
   450  000002                     nextSnake@result:
   451                           	opt callstack 0
   452  000002                     getGeneratedValue@firstBit:
   453                           	opt callstack 0
   454                           
   455                           ; 1 bytes @ 0x1
   456  000002                     	ds	1
   457  000003                     intToBinary@value:
   458                           	opt callstack 0
   459  000003                     printMask@value:
   460                           	opt callstack 0
   461  000003                     getGeneratedValue@secondBit:
   462                           	opt callstack 0
   463  000003                     delay@i:
   464                           	opt callstack 0
   465  000003                     lcd_str@str:
   466                           	opt callstack 0
   467  000003                     clearMaskFromNthPosition@position:
   468                           	opt callstack 0
   469  000003                     isProgramInterupted@i:
   470                           	opt callstack 0
   471  000003                     ___awdiv@divisor:
   472                           	opt callstack 0
   473  000003                     ___awmod@divisor:
   474                           	opt callstack 0
   475                           
   476                           ; 2 bytes @ 0x2
   477  000003                     	ds	1
   478  000004                     ??_intToBinary:
   479  000004                     getGeneratedValue@fifthBit:
   480                           	opt callstack 0
   481                           
   482                           ; 1 bytes @ 0x3
   483  000004                     	ds	1
   484  000005                     ??_lcd_str:
   485  000005                     delay@j:
   486                           	opt callstack 0
   487  000005                     getGeneratedValue@sixthBit:
   488                           	opt callstack 0
   489  000005                     ___awdiv@counter:
   490                           	opt callstack 0
   491  000005                     ___awmod@counter:
   492                           	opt callstack 0
   493  000005                     clearMaskFromNthPosition@i:
   494                           	opt callstack 0
   495  000005                     changeProgram@i:
   496                           	opt callstack 0
   497                           
   498                           ; 2 bytes @ 0x4
   499  000005                     	ds	1
   500  000006                     getGeneratedValue@xoredBits:
   501                           	opt callstack 0
   502  000006                     ___awdiv@sign:
   503                           	opt callstack 0
   504  000006                     ___awmod@sign:
   505                           	opt callstack 0
   506  000006                     intToBinary@i:
   507                           	opt callstack 0
   508                           
   509                           ; 2 bytes @ 0x5
   510  000006                     	ds	1
   511  000007                     lcd_str@i:
   512                           	opt callstack 0
   513  000007                     getGeneratedValue@seed:
   514                           	opt callstack 0
   515  000007                     ___awdiv@quotient:
   516                           	opt callstack 0
   517                           
   518                           ; 2 bytes @ 0x6
   519  000007                     	ds	1
   520  000008                     ??_subProgram8:
   521  000008                     subProgram1@binBuffer:
   522                           	opt callstack 0
   523  000008                     subProgram2@binBuffer:
   524                           	opt callstack 0
   525  000008                     subProgram3@binBuffer:
   526                           	opt callstack 0
   527  000008                     subProgram4@binBuffer:
   528                           	opt callstack 0
   529  000008                     subProgram7@binBuffer:
   530                           	opt callstack 0
   531  000008                     subProgram9@binBuffer:
   532                           	opt callstack 0
   533                           
   534                           ; 8 bytes @ 0x7
   535  000008                     	ds	1
   536  000009                     ??_convertIntoToBCD:
   537  000009                     subProgram8@mask:
   538                           	opt callstack 0
   539                           
   540                           ; 8 bytes @ 0x8
   541  000009                     	ds	2
   542  00000B                     convertIntoToBCD@counter:
   543                           	opt callstack 0
   544                           
   545                           ; 1 bytes @ 0xA
   546  00000B                     	ds	1
   547  00000C                     subProgram5@binBuffer:
   548                           	opt callstack 0
   549  00000C                     subProgram6@binBuffer:
   550                           	opt callstack 0
   551                           
   552                           ; 8 bytes @ 0xB
   553  00000C                     	ds	4
   554  000010                     subProgram1@counter:
   555                           	opt callstack 0
   556  000010                     subProgram2@counter:
   557                           	opt callstack 0
   558  000010                     subProgram3@counterDisplay:
   559                           	opt callstack 0
   560  000010                     subProgram4@counterDisplay:
   561                           	opt callstack 0
   562  000010                     subProgram7@counterDisplay:
   563                           	opt callstack 0
   564  000010                     subProgram9@seed:
   565                           	opt callstack 0
   566                           
   567                           ; 1 bytes @ 0xF
   568  000010                     	ds	1
   569  000011                     subProgram3@counter:
   570                           	opt callstack 0
   571  000011                     subProgram4@counter:
   572                           	opt callstack 0
   573  000011                     subProgram7@snake:
   574                           	opt callstack 0
   575  000011                     subProgram8@j:
   576                           	opt callstack 0
   577                           
   578                           ; 2 bytes @ 0x10
   579  000011                     	ds	2
   580  000013                     subProgram8@i:
   581                           	opt callstack 0
   582                           
   583                           ; 2 bytes @ 0x12
   584  000013                     	ds	1
   585  000014                     subProgram5@counterDisplay:
   586                           	opt callstack 0
   587  000014                     subProgram6@counterDisplay:
   588                           	opt callstack 0
   589                           
   590                           ; 1 bytes @ 0x13
   591  000014                     	ds	1
   592  000015                     subProgram5@counter:
   593                           	opt callstack 0
   594  000015                     subProgram6@counter:
   595                           	opt callstack 0
   596                           
   597                           ; 1 bytes @ 0x14
   598  000015                     	ds	1
   599  000016                     runSubProgram@program:
   600                           	opt callstack 0
   601                           
   602                           ; 2 bytes @ 0x15
   603  000016                     	ds	2
   604  000018                     ??_runSubProgram:
   605                           
   606                           ; 1 bytes @ 0x17
   607  000018                     	ds	2
   608  00001A                     main@program:
   609                           	opt callstack 0
   610                           
   611                           ; 2 bytes @ 0x19
   612  00001A                     	ds	2
   613                           
   614 ;;
   615 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   616 ;;
   617 ;; *************** function _main *****************
   618 ;; Defined at:
   619 ;;		line 649 in file "main.c"
   620 ;; Parameters:    Size  Location     Type
   621 ;;		None
   622 ;; Auto vars:     Size  Location     Type
   623 ;;  program         2   25[COMRAM] unsigned int 
   624 ;; Return value:  Size  Location     Type
   625 ;;                  1    wreg      void 
   626 ;; Registers used:
   627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   628 ;; Tracked objects:
   629 ;;		On entry : 0/0
   630 ;;		On exit  : 0/0
   631 ;;		Unchanged: 0/0
   632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   634 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   636 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   637 ;;Total ram usage:        2 bytes
   638 ;; Hardware stack levels required when called:    5
   639 ;; This function calls:
   640 ;;		_changeProgram
   641 ;;		_lcd_cmd
   642 ;;		_lcd_init
   643 ;;		_runSubProgram
   644 ;; This function is called by:
   645 ;;		Startup code after reset
   646 ;; This function uses a non-reentrant model
   647 ;;
   648                           
   649                           	psect	text0
   650  00F3E2                     __ptext0:
   651                           	opt callstack 0
   652  00F3E2                     _main:
   653                           	opt callstack 26
   654  00F3E2                     
   655                           ;main.c: 651:     ADCON0=0x01;
   656  00F3E2  0E01               	movlw	1
   657  00F3E4  6EC2               	movwf	194,c	;volatile
   658                           
   659                           ;main.c: 652:     ADCON1=0x0B;
   660  00F3E6  0E0B               	movlw	11
   661  00F3E8  6EC1               	movwf	193,c	;volatile
   662                           
   663                           ;main.c: 653:     ADCON2=0x01;
   664  00F3EA  0E01               	movlw	1
   665  00F3EC  6EC0               	movwf	192,c	;volatile
   666                           
   667                           ;main.c: 655:     TRISA=0xC3;
   668  00F3EE  0EC3               	movlw	195
   669  00F3F0  6E92               	movwf	146,c	;volatile
   670                           
   671                           ;main.c: 656:     TRISB=0x3F;
   672  00F3F2  0E3F               	movlw	63
   673  00F3F4  6E93               	movwf	147,c	;volatile
   674                           
   675                           ;main.c: 657:     TRISC=0x01;
   676  00F3F6  0E01               	movlw	1
   677  00F3F8  6E94               	movwf	148,c	;volatile
   678                           
   679                           ;main.c: 658:     TRISD=0x00;
   680  00F3FA  0E00               	movlw	0
   681  00F3FC  6E95               	movwf	149,c	;volatile
   682                           
   683                           ;main.c: 659:     TRISE=0x00;
   684  00F3FE  0E00               	movlw	0
   685  00F400  6E96               	movwf	150,c	;volatile
   686  00F402                     
   687                           ;main.c: 661:     lcd_init();
   688  00F402  EC45  F07A         	call	_lcd_init	;wreg free
   689  00F406                     
   690                           ;main.c: 662:     lcd_cmd(0x01);
   691  00F406  0E01               	movlw	1
   692  00F408  ECDA  F078         	call	_lcd_cmd
   693  00F40C                     
   694                           ;main.c: 664:     unsigned int program = 1;
   695  00F40C  0E00               	movlw	0
   696  00F40E  6E1B               	movwf	(main@program+1)^0,c
   697  00F410  0E01               	movlw	1
   698  00F412  6E1A               	movwf	main@program^0,c
   699  00F414                     l2116:
   700                           
   701                           ;main.c: 667:         changeProgram(&program);
   702  00F414  0E1A               	movlw	low main@program
   703  00F416  6E01               	movwf	changeProgram@program^0,c
   704  00F418  0E00               	movlw	high main@program
   705  00F41A  6E02               	movwf	(changeProgram@program+1)^0,c
   706  00F41C  EC64  F07E         	call	_changeProgram	;wreg free
   707  00F420                     
   708                           ;main.c: 669:         runSubProgram(program);
   709  00F420  C01A  F016         	movff	main@program,runSubProgram@program
   710  00F424  C01B  F017         	movff	main@program+1,runSubProgram@program+1
   711  00F428  EC4F  F07D         	call	_runSubProgram	;wreg free
   712  00F42C  EF0A  F07A         	goto	l2116
   713  00F430  EF00  F000         	goto	start
   714  00F434                     __end_of_main:
   715                           	opt callstack 0
   716                           
   717 ;; *************** function _runSubProgram *****************
   718 ;; Defined at:
   719 ;;		line 559 in file "main.c"
   720 ;; Parameters:    Size  Location     Type
   721 ;;  program         2   21[COMRAM] unsigned int 
   722 ;; Auto vars:     Size  Location     Type
   723 ;;		None
   724 ;; Return value:  Size  Location     Type
   725 ;;                  1    wreg      void 
   726 ;; Registers used:
   727 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   728 ;; Tracked objects:
   729 ;;		On entry : 0/0
   730 ;;		On exit  : 0/0
   731 ;;		Unchanged: 0/0
   732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   733 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   735 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   736 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   737 ;;Total ram usage:        4 bytes
   738 ;; Hardware stack levels used:    1
   739 ;; Hardware stack levels required when called:    4
   740 ;; This function calls:
   741 ;;		_subProgram1
   742 ;;		_subProgram2
   743 ;;		_subProgram3
   744 ;;		_subProgram4
   745 ;;		_subProgram5
   746 ;;		_subProgram6
   747 ;;		_subProgram7
   748 ;;		_subProgram8
   749 ;;		_subProgram9
   750 ;; This function is called by:
   751 ;;		_main
   752 ;; This function uses a non-reentrant model
   753 ;;
   754                           
   755                           	psect	text1
   756  00FA9E                     __ptext1:
   757                           	opt callstack 0
   758  00FA9E                     _runSubProgram:
   759                           	opt callstack 26
   760  00FA9E                     
   761                           ;main.c: 559: void runSubProgram(unsigned int program);main.c: 560: {;main.c: 561:     s
      +                          witch (program) {
   762  00FA9E  EF75  F07D         	goto	l2058
   763  00FAA2                     l2038:
   764                           
   765                           ;main.c: 563:             subProgram1();
   766  00FAA2  EC9F  F07C         	call	_subProgram1	;wreg free
   767                           
   768                           ;main.c: 564:             break;
   769  00FAA6  EFA7  F07D         	goto	l201
   770  00FAAA                     l2040:
   771                           
   772                           ;main.c: 567:             subProgram2();
   773  00FAAA  EC48  F07C         	call	_subProgram2	;wreg free
   774                           
   775                           ;main.c: 568:             break;
   776  00FAAE  EFA7  F07D         	goto	l201
   777  00FAB2                     l2042:
   778                           
   779                           ;main.c: 571:             subProgram3();
   780  00FAB2  EC46  F07B         	call	_subProgram3	;wreg free
   781                           
   782                           ;main.c: 572:             break;
   783  00FAB6  EFA7  F07D         	goto	l201
   784  00FABA                     l2044:
   785                           
   786                           ;main.c: 575:             subProgram4();
   787  00FABA  ECF1  F07A         	call	_subProgram4	;wreg free
   788                           
   789                           ;main.c: 576:             break;
   790  00FABE  EFA7  F07D         	goto	l201
   791  00FAC2                     l2046:
   792                           
   793                           ;main.c: 579:             subProgram5();
   794  00FAC2  EC9C  F07B         	call	_subProgram5	;wreg free
   795                           
   796                           ;main.c: 580:             break;
   797  00FAC6  EFA7  F07D         	goto	l201
   798  00FACA                     l2048:
   799                           
   800                           ;main.c: 583:             subProgram6();
   801  00FACA  ECF2  F07B         	call	_subProgram6	;wreg free
   802                           
   803                           ;main.c: 584:             break;
   804  00FACE  EFA7  F07D         	goto	l201
   805  00FAD2                     l2050:
   806                           
   807                           ;main.c: 587:             subProgram7();
   808  00FAD2  ECAC  F07A         	call	_subProgram7	;wreg free
   809                           
   810                           ;main.c: 588:             break;
   811  00FAD6  EFA7  F07D         	goto	l201
   812  00FADA                     l2052:
   813                           
   814                           ;main.c: 591:             subProgram8();
   815  00FADA  ECD7  F07E         	call	_subProgram8	;wreg free
   816                           
   817                           ;main.c: 592:             break;
   818  00FADE  EFA7  F07D         	goto	l201
   819  00FAE2                     l2054:
   820                           
   821                           ;main.c: 595:             subProgram9();
   822  00FAE2  ECC8  F079         	call	_subProgram9	;wreg free
   823                           
   824                           ;main.c: 596:             break;
   825  00FAE6  EFA7  F07D         	goto	l201
   826  00FAEA                     l2058:
   827  00FAEA  C016  F018         	movff	runSubProgram@program,??_runSubProgram
   828  00FAEE  C017  F019         	movff	runSubProgram@program+1,??_runSubProgram+1
   829                           
   830                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   831                           ; Switch size 1, requested type "simple"
   832                           ; Number of cases is 1, Range of values is 0 to 0
   833                           ; switch strategies available:
   834                           ; Name         Instructions Cycles
   835                           ; simple_byte            4     3 (average)
   836                           ;	Chosen strategy is simple_byte
   837  00FAF2  5019               	movf	(??_runSubProgram+1)^0,w,c
   838  00FAF4  0A00               	xorlw	0	; case 0
   839  00FAF6  B4D8               	btfsc	status,2,c
   840  00FAF8  EF80  F07D         	goto	l2124
   841  00FAFC  EFA7  F07D         	goto	l201
   842  00FB00                     l2124:
   843                           
   844                           ; Switch size 1, requested type "simple"
   845                           ; Number of cases is 9, Range of values is 1 to 9
   846                           ; switch strategies available:
   847                           ; Name         Instructions Cycles
   848                           ; simple_byte           28    15 (average)
   849                           ;	Chosen strategy is simple_byte
   850  00FB00  5018               	movf	??_runSubProgram^0,w,c
   851  00FB02  0A01               	xorlw	1	; case 1
   852  00FB04  B4D8               	btfsc	status,2,c
   853  00FB06  EF51  F07D         	goto	l2038
   854  00FB0A  0A03               	xorlw	3	; case 2
   855  00FB0C  B4D8               	btfsc	status,2,c
   856  00FB0E  EF55  F07D         	goto	l2040
   857  00FB12  0A01               	xorlw	1	; case 3
   858  00FB14  B4D8               	btfsc	status,2,c
   859  00FB16  EF59  F07D         	goto	l2042
   860  00FB1A  0A07               	xorlw	7	; case 4
   861  00FB1C  B4D8               	btfsc	status,2,c
   862  00FB1E  EF5D  F07D         	goto	l2044
   863  00FB22  0A01               	xorlw	1	; case 5
   864  00FB24  B4D8               	btfsc	status,2,c
   865  00FB26  EF61  F07D         	goto	l2046
   866  00FB2A  0A03               	xorlw	3	; case 6
   867  00FB2C  B4D8               	btfsc	status,2,c
   868  00FB2E  EF65  F07D         	goto	l2048
   869  00FB32  0A01               	xorlw	1	; case 7
   870  00FB34  B4D8               	btfsc	status,2,c
   871  00FB36  EF69  F07D         	goto	l2050
   872  00FB3A  0A0F               	xorlw	15	; case 8
   873  00FB3C  B4D8               	btfsc	status,2,c
   874  00FB3E  EF6D  F07D         	goto	l2052
   875  00FB42  0A01               	xorlw	1	; case 9
   876  00FB44  B4D8               	btfsc	status,2,c
   877  00FB46  EF71  F07D         	goto	l2054
   878  00FB4A  EFA7  F07D         	goto	l201
   879  00FB4E                     l201:
   880  00FB4E  0012               	return		;funcret
   881  00FB50                     __end_of_runSubProgram:
   882                           	opt callstack 0
   883                           
   884 ;; *************** function _subProgram9 *****************
   885 ;; Defined at:
   886 ;;		line 539 in file "main.c"
   887 ;; Parameters:    Size  Location     Type
   888 ;;		None
   889 ;; Auto vars:     Size  Location     Type
   890 ;;  binBuffer       8    7[COMRAM] unsigned char [8]
   891 ;;  seed            1   15[COMRAM] unsigned char 
   892 ;; Return value:  Size  Location     Type
   893 ;;                  1    wreg      void 
   894 ;; Registers used:
   895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   896 ;; Tracked objects:
   897 ;;		On entry : 0/0
   898 ;;		On exit  : 0/0
   899 ;;		Unchanged: 0/0
   900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   902 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   904 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   905 ;;Total ram usage:        9 bytes
   906 ;; Hardware stack levels used:    1
   907 ;; Hardware stack levels required when called:    3
   908 ;; This function calls:
   909 ;;		_delay
   910 ;;		_getGeneratedValue
   911 ;;		_intToBinary
   912 ;;		_lcd_cmd
   913 ;;		_lcd_str
   914 ;;		_printMask
   915 ;; This function is called by:
   916 ;;		_runSubProgram
   917 ;; This function uses a non-reentrant model
   918 ;;
   919                           
   920                           	psect	text2
   921  00F390                     __ptext2:
   922                           	opt callstack 0
   923  00F390                     _subProgram9:
   924                           	opt callstack 26
   925  00F390                     
   926                           ;main.c: 541:     lcd_cmd(0x01);
   927  00F390  0E01               	movlw	1
   928  00F392  ECDA  F078         	call	_lcd_cmd
   929                           
   930                           ;main.c: 542:     lcd_cmd(0x80);
   931  00F396  0E80               	movlw	128
   932  00F398  ECDA  F078         	call	_lcd_cmd
   933  00F39C                     
   934                           ;main.c: 543:     lcd_str("Program 9 start");
   935  00F39C  0E8C               	movlw	low STR_17
   936  00F39E  6E03               	movwf	lcd_str@str^0,c
   937  00F3A0  0EFF               	movlw	high STR_17
   938  00F3A2  6E04               	movwf	(lcd_str@str+1)^0,c
   939  00F3A4  ECA0  F079         	call	_lcd_str	;wreg free
   940  00F3A8                     
   941                           ;main.c: 545:     unsigned char seed = 1;
   942  00F3A8  0E01               	movlw	1
   943  00F3AA  6E10               	movwf	subProgram9@seed^0,c
   944  00F3AC                     l2004:
   945                           
   946                           ;main.c: 549:         intToBinary(binBuffer, seed);
   947  00F3AC  0E08               	movlw	low subProgram9@binBuffer
   948  00F3AE  6E01               	movwf	intToBinary@buffor^0,c
   949  00F3B0  0E00               	movlw	high subProgram9@binBuffer
   950  00F3B2  6E02               	movwf	(intToBinary@buffor+1)^0,c
   951  00F3B4  C010  F003         	movff	subProgram9@seed,intToBinary@value
   952  00F3B8  EC7A  F079         	call	_intToBinary	;wreg free
   953  00F3BC                     
   954                           ;main.c: 551:         printMask(binBuffer);
   955  00F3BC  0E08               	movlw	low subProgram9@binBuffer
   956  00F3BE  6E01               	movwf	printMask@mask^0,c
   957  00F3C0  0E00               	movlw	high subProgram9@binBuffer
   958  00F3C2  6E02               	movwf	(printMask@mask+1)^0,c
   959  00F3C4  ECA8  F07D         	call	_printMask	;wreg free
   960  00F3C8                     
   961                           ;main.c: 553:         seed = getGeneratedValue(seed);
   962  00F3C8  5010               	movf	subProgram9@seed^0,w,c
   963  00F3CA  EC34  F079         	call	_getGeneratedValue
   964  00F3CE  6E10               	movwf	subProgram9@seed^0,c
   965  00F3D0                     
   966                           ;main.c: 555:         delay(200);
   967  00F3D0  0E00               	movlw	0
   968  00F3D2  6E02               	movwf	(delay@ms+1)^0,c
   969  00F3D4  0EC8               	movlw	200
   970  00F3D6  6E01               	movwf	delay@ms^0,c
   971  00F3D8  EC56  F079         	call	_delay	;wreg free
   972  00F3DC  EFD6  F079         	goto	l2004
   973  00F3E0  0012               	return		;funcret
   974  00F3E2                     __end_of_subProgram9:
   975                           	opt callstack 0
   976                           
   977 ;; *************** function _getGeneratedValue *****************
   978 ;; Defined at:
   979 ;;		line 522 in file "main.c"
   980 ;; Parameters:    Size  Location     Type
   981 ;;  seed            1    wreg     unsigned char 
   982 ;; Auto vars:     Size  Location     Type
   983 ;;  seed            1    6[COMRAM] unsigned char 
   984 ;;  xoredBits       1    5[COMRAM] unsigned char 
   985 ;;  sixthBit        1    4[COMRAM] unsigned char 
   986 ;;  fifthBit        1    3[COMRAM] unsigned char 
   987 ;;  secondBit       1    2[COMRAM] unsigned char 
   988 ;;  firstBit        1    1[COMRAM] unsigned char 
   989 ;;  rolledSeed      1    0[COMRAM] unsigned char 
   990 ;; Return value:  Size  Location     Type
   991 ;;                  1    wreg      unsigned char 
   992 ;; Registers used:
   993 ;;		wreg, status,2, status,0
   994 ;; Tracked objects:
   995 ;;		On entry : 0/0
   996 ;;		On exit  : 0/0
   997 ;;		Unchanged: 0/0
   998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1000 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1002 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1003 ;;Total ram usage:        7 bytes
  1004 ;; Hardware stack levels used:    1
  1005 ;; This function calls:
  1006 ;;		Nothing
  1007 ;; This function is called by:
  1008 ;;		_subProgram9
  1009 ;; This function uses a non-reentrant model
  1010 ;;
  1011                           
  1012                           	psect	text3
  1013  00F268                     __ptext3:
  1014                           	opt callstack 0
  1015  00F268                     _getGeneratedValue:
  1016                           	opt callstack 28
  1017                           
  1018                           ;incstack = 0
  1019                           ;getGeneratedValue@seed stored from wreg
  1020  00F268  6E07               	movwf	getGeneratedValue@seed^0,c
  1021  00F26A                     
  1022                           ;main.c: 522: unsigned char getGeneratedValue(unsigned char seed);main.c: 523: {;main.c:
      +                           524:     unsigned char rolledSeed = seed >> 1;
  1023  00F26A  90D8               	bcf	status,0,c
  1024  00F26C  3007               	rrcf	getGeneratedValue@seed^0,w,c
  1025  00F26E  6E01               	movwf	getGeneratedValue@rolledSeed^0,c
  1026                           
  1027                           ;main.c: 526:     unsigned char firstBit = seed & 1;
  1028  00F270  5007               	movf	getGeneratedValue@seed^0,w,c
  1029  00F272  0B01               	andlw	1
  1030  00F274  6E02               	movwf	getGeneratedValue@firstBit^0,c
  1031                           
  1032                           ;main.c: 527:     unsigned char secondBit = (seed >> 2) & 1;
  1033  00F276  4007               	rrncf	getGeneratedValue@seed^0,w,c
  1034  00F278  42E8               	rrncf	wreg,f,c
  1035  00F27A  0B3F               	andlw	63
  1036  00F27C  0B01               	andlw	1
  1037  00F27E  6E03               	movwf	getGeneratedValue@secondBit^0,c
  1038                           
  1039                           ;main.c: 528:     unsigned char fifthBit = (seed >> 5) & 1;
  1040  00F280  3807               	swapf	getGeneratedValue@seed^0,w,c
  1041  00F282  42E8               	rrncf	wreg,f,c
  1042  00F284  0B07               	andlw	7
  1043  00F286  0B01               	andlw	1
  1044  00F288  6E04               	movwf	getGeneratedValue@fifthBit^0,c
  1045                           
  1046                           ;main.c: 529:     unsigned char sixthBit = (seed >> 6) & 1;
  1047  00F28A  4407               	rlncf	getGeneratedValue@seed^0,w,c
  1048  00F28C  46E8               	rlncf	wreg,f,c
  1049  00F28E  0B03               	andlw	3
  1050  00F290  0B01               	andlw	1
  1051  00F292  6E05               	movwf	getGeneratedValue@sixthBit^0,c
  1052                           
  1053                           ;main.c: 531:     unsigned char xoredBits = firstBit ^ secondBit;
  1054  00F294  5002               	movf	getGeneratedValue@firstBit^0,w,c
  1055  00F296  1803               	xorwf	getGeneratedValue@secondBit^0,w,c
  1056  00F298  6E06               	movwf	getGeneratedValue@xoredBits^0,c
  1057                           
  1058                           ;main.c: 533:     xoredBits ^= fifthBit;
  1059  00F29A  5004               	movf	getGeneratedValue@fifthBit^0,w,c
  1060  00F29C  1A06               	xorwf	getGeneratedValue@xoredBits^0,f,c
  1061                           
  1062                           ;main.c: 534:     xoredBits ^= sixthBit;
  1063  00F29E  5005               	movf	getGeneratedValue@sixthBit^0,w,c
  1064  00F2A0  1A06               	xorwf	getGeneratedValue@xoredBits^0,f,c
  1065                           
  1066                           ;main.c: 536:     return rolledSeed | (xoredBits << 5);
  1067  00F2A2  3806               	swapf	getGeneratedValue@xoredBits^0,w,c
  1068  00F2A4  46E8               	rlncf	wreg,f,c
  1069  00F2A6  0BE0               	andlw	224
  1070  00F2A8  1001               	iorwf	getGeneratedValue@rolledSeed^0,w,c
  1071  00F2AA  0012               	return		;funcret
  1072  00F2AC                     __end_of_getGeneratedValue:
  1073                           	opt callstack 0
  1074                           
  1075 ;; *************** function _subProgram8 *****************
  1076 ;; Defined at:
  1077 ;;		line 485 in file "main.c"
  1078 ;; Parameters:    Size  Location     Type
  1079 ;;		None
  1080 ;; Auto vars:     Size  Location     Type
  1081 ;;  i               2   18[COMRAM] int 
  1082 ;;  j               2   16[COMRAM] int 
  1083 ;;  mask            8    8[COMRAM] unsigned char [8]
  1084 ;; Return value:  Size  Location     Type
  1085 ;;                  1    wreg      void 
  1086 ;; Registers used:
  1087 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1088 ;; Tracked objects:
  1089 ;;		On entry : 0/0
  1090 ;;		On exit  : 0/0
  1091 ;;		Unchanged: 0/0
  1092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1094 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1095 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1096 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1097 ;;Total ram usage:       13 bytes
  1098 ;; Hardware stack levels used:    1
  1099 ;; Hardware stack levels required when called:    3
  1100 ;; This function calls:
  1101 ;;		_clearMaskFromNthPosition
  1102 ;;		_delay
  1103 ;;		_isProgramInterupted
  1104 ;;		_lcd_cmd
  1105 ;;		_lcd_str
  1106 ;;		_printMask
  1107 ;; This function is called by:
  1108 ;;		_runSubProgram
  1109 ;; This function uses a non-reentrant model
  1110 ;;
  1111                           
  1112                           	psect	text4
  1113  00FDAE                     __ptext4:
  1114                           	opt callstack 0
  1115  00FDAE                     _subProgram8:
  1116                           	opt callstack 26
  1117  00FDAE                     
  1118                           ;main.c: 487:     lcd_cmd(0x01);
  1119  00FDAE  0E01               	movlw	1
  1120  00FDB0  ECDA  F078         	call	_lcd_cmd
  1121                           
  1122                           ;main.c: 488:     lcd_cmd(0x80);
  1123  00FDB4  0E80               	movlw	128
  1124  00FDB6  ECDA  F078         	call	_lcd_cmd
  1125  00FDBA                     
  1126                           ;main.c: 489:     lcd_str("Program 8 start");
  1127  00FDBA  0E7C               	movlw	low STR_15
  1128  00FDBC  6E03               	movwf	lcd_str@str^0,c
  1129  00FDBE  0EFF               	movlw	high STR_15
  1130  00FDC0  6E04               	movwf	(lcd_str@str+1)^0,c
  1131  00FDC2  ECA0  F079         	call	_lcd_str	;wreg free
  1132  00FDC6                     
  1133                           ;main.c: 492:     unsigned char mask[8];;main.c: 493:     mask[7] = 0;
  1134  00FDC6  0E00               	movlw	0
  1135  00FDC8  6E10               	movwf	(subProgram8@mask+7)^0,c
  1136  00FDCA                     
  1137                           ;main.c: 494:     mask[6] = 0;
  1138  00FDCA  0E00               	movlw	0
  1139  00FDCC  6E0F               	movwf	(subProgram8@mask+6)^0,c
  1140  00FDCE                     
  1141                           ;main.c: 495:     mask[5] = 0;
  1142  00FDCE  0E00               	movlw	0
  1143  00FDD0  6E0E               	movwf	(subProgram8@mask+5)^0,c
  1144  00FDD2                     
  1145                           ;main.c: 496:     mask[4] = 0;
  1146  00FDD2  0E00               	movlw	0
  1147  00FDD4  6E0D               	movwf	(subProgram8@mask+4)^0,c
  1148  00FDD6                     
  1149                           ;main.c: 497:     mask[3] = 0;
  1150  00FDD6  0E00               	movlw	0
  1151  00FDD8  6E0C               	movwf	(subProgram8@mask+3)^0,c
  1152  00FDDA                     
  1153                           ;main.c: 498:     mask[2] = 0;
  1154  00FDDA  0E00               	movlw	0
  1155  00FDDC  6E0B               	movwf	(subProgram8@mask+2)^0,c
  1156  00FDDE                     
  1157                           ;main.c: 499:     mask[1] = 0;
  1158  00FDDE  0E00               	movlw	0
  1159  00FDE0  6E0A               	movwf	(subProgram8@mask+1)^0,c
  1160  00FDE2                     
  1161                           ;main.c: 500:     mask[0] = 1;
  1162  00FDE2  0E01               	movlw	1
  1163  00FDE4  6E09               	movwf	subProgram8@mask^0,c
  1164  00FDE6                     
  1165                           ;main.c: 503:     for (int j = 7; j >= 0; j--) {
  1166  00FDE6  0E00               	movlw	0
  1167  00FDE8  6E12               	movwf	(subProgram8@j+1)^0,c
  1168  00FDEA  0E07               	movlw	7
  1169  00FDEC  6E11               	movwf	subProgram8@j^0,c
  1170  00FDEE                     l1960:
  1171                           
  1172                           ;main.c: 504:         for (int i = 0; i <= j; i++) {
  1173  00FDEE  0E00               	movlw	0
  1174  00FDF0  6E14               	movwf	(subProgram8@i+1)^0,c
  1175  00FDF2  0E00               	movlw	0
  1176  00FDF4  6E13               	movwf	subProgram8@i^0,c
  1177  00FDF6  EF51  F07F         	goto	l1986
  1178  00FDFA                     l1962:
  1179                           
  1180                           ;main.c: 505:             mask[i] = 1;
  1181  00FDFA  0E09               	movlw	low subProgram8@mask
  1182  00FDFC  2413               	addwf	subProgram8@i^0,w,c
  1183  00FDFE  6ED9               	movwf	fsr2l,c
  1184  00FE00  0E00               	movlw	high subProgram8@mask
  1185  00FE02  2014               	addwfc	(subProgram8@i+1)^0,w,c
  1186  00FE04  6EDA               	movwf	fsr2h,c
  1187  00FE06  0E01               	movlw	1
  1188  00FE08  6EDF               	movwf	indf2,c
  1189  00FE0A                     
  1190                           ;main.c: 506:             if (isProgramInterupted() == 1) return;
  1191  00FE0A  EC73  F07A         	call	_isProgramInterupted	;wreg free
  1192  00FE0E  0401               	decf	?_isProgramInterupted^0,w,c
  1193  00FE10  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
  1194  00FE12  A4D8               	btfss	status,2,c
  1195  00FE14  EF0E  F07F         	goto	u1111
  1196  00FE18  EF10  F07F         	goto	u1110
  1197  00FE1C                     u1111:
  1198  00FE1C  EF12  F07F         	goto	l1968
  1199  00FE20                     u1110:
  1200  00FE20  EF7C  F07F         	goto	l174
  1201  00FE24                     l1968:
  1202                           
  1203                           ;main.c: 507:             clearMaskFromNthPosition(mask, i);
  1204  00FE24  0E09               	movlw	low subProgram8@mask
  1205  00FE26  6E01               	movwf	clearMaskFromNthPosition@mask^0,c
  1206  00FE28  0E00               	movlw	high subProgram8@mask
  1207  00FE2A  6E02               	movwf	(clearMaskFromNthPosition@mask+1)^0,c
  1208  00FE2C  C013  F003         	movff	subProgram8@i,clearMaskFromNthPosition@position
  1209  00FE30  C014  F004         	movff	subProgram8@i+1,clearMaskFromNthPosition@position+1
  1210  00FE34  EC12  F079         	call	_clearMaskFromNthPosition	;wreg free
  1211  00FE38                     
  1212                           ;main.c: 508:             if (isProgramInterupted() == 1) return;
  1213  00FE38  EC73  F07A         	call	_isProgramInterupted	;wreg free
  1214  00FE3C  0401               	decf	?_isProgramInterupted^0,w,c
  1215  00FE3E  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
  1216  00FE40  A4D8               	btfss	status,2,c
  1217  00FE42  EF25  F07F         	goto	u1121
  1218  00FE46  EF27  F07F         	goto	u1120
  1219  00FE4A                     u1121:
  1220  00FE4A  EF29  F07F         	goto	l1974
  1221  00FE4E                     u1120:
  1222  00FE4E  EF7C  F07F         	goto	l174
  1223  00FE52                     l1974:
  1224                           
  1225                           ;main.c: 509:             printMask(mask);
  1226  00FE52  0E09               	movlw	low subProgram8@mask
  1227  00FE54  6E01               	movwf	printMask@mask^0,c
  1228  00FE56  0E00               	movlw	high subProgram8@mask
  1229  00FE58  6E02               	movwf	(printMask@mask+1)^0,c
  1230  00FE5A  ECA8  F07D         	call	_printMask	;wreg free
  1231  00FE5E                     
  1232                           ;main.c: 510:             if (isProgramInterupted() == 1) return;
  1233  00FE5E  EC73  F07A         	call	_isProgramInterupted	;wreg free
  1234  00FE62  0401               	decf	?_isProgramInterupted^0,w,c
  1235  00FE64  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
  1236  00FE66  A4D8               	btfss	status,2,c
  1237  00FE68  EF38  F07F         	goto	u1131
  1238  00FE6C  EF3A  F07F         	goto	u1130
  1239  00FE70                     u1131:
  1240  00FE70  EF3C  F07F         	goto	l1980
  1241  00FE74                     u1130:
  1242  00FE74  EF7C  F07F         	goto	l174
  1243  00FE78                     l1980:
  1244                           
  1245                           ;main.c: 511:             delay(100);
  1246  00FE78  0E00               	movlw	0
  1247  00FE7A  6E02               	movwf	(delay@ms+1)^0,c
  1248  00FE7C  0E64               	movlw	100
  1249  00FE7E  6E01               	movwf	delay@ms^0,c
  1250  00FE80  EC56  F079         	call	_delay	;wreg free
  1251                           
  1252                           ;main.c: 512:             if (isProgramInterupted() == 1) return;
  1253  00FE84  EC73  F07A         	call	_isProgramInterupted	;wreg free
  1254  00FE88  0401               	decf	?_isProgramInterupted^0,w,c
  1255  00FE8A  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
  1256  00FE8C  A4D8               	btfss	status,2,c
  1257  00FE8E  EF4B  F07F         	goto	u1141
  1258  00FE92  EF4D  F07F         	goto	u1140
  1259  00FE96                     u1141:
  1260  00FE96  EF4F  F07F         	goto	l1984
  1261  00FE9A                     u1140:
  1262  00FE9A  EF7C  F07F         	goto	l174
  1263  00FE9E                     l1984:
  1264                           
  1265                           ;main.c: 513:         }
  1266  00FE9E  4A13               	infsnz	subProgram8@i^0,f,c
  1267  00FEA0  2A14               	incf	(subProgram8@i+1)^0,f,c
  1268  00FEA2                     l1986:
  1269  00FEA2  5013               	movf	subProgram8@i^0,w,c
  1270  00FEA4  5C11               	subwf	subProgram8@j^0,w,c
  1271  00FEA6  5012               	movf	(subProgram8@j+1)^0,w,c
  1272  00FEA8  0A80               	xorlw	128
  1273  00FEAA  6E08               	movwf	??_subProgram8^0,c
  1274  00FEAC  5014               	movf	(subProgram8@i+1)^0,w,c
  1275  00FEAE  0A80               	xorlw	128
  1276  00FEB0  5808               	subwfb	??_subProgram8^0,w,c
  1277  00FEB2  B0D8               	btfsc	status,0,c
  1278  00FEB4  EF5E  F07F         	goto	u1151
  1279  00FEB8  EF60  F07F         	goto	u1150
  1280  00FEBC                     u1151:
  1281  00FEBC  EFFD  F07E         	goto	l1962
  1282  00FEC0                     u1150:
  1283  00FEC0                     
  1284                           ;main.c: 514:     }
  1285  00FEC0  0611               	decf	subProgram8@j^0,f,c
  1286  00FEC2  A0D8               	btfss	status,0,c
  1287  00FEC4  0612               	decf	(subProgram8@j+1)^0,f,c
  1288  00FEC6  BE12               	btfsc	(subProgram8@j+1)^0,7,c
  1289  00FEC8  EF6A  F07F         	goto	u1160
  1290  00FECC  EF68  F07F         	goto	u1161
  1291  00FED0                     u1161:
  1292  00FED0  EFF7  F07E         	goto	l1960
  1293  00FED4                     u1160:
  1294  00FED4                     
  1295                           ;main.c: 516:     lcd_cmd(0x01);
  1296  00FED4  0E01               	movlw	1
  1297  00FED6  ECDA  F078         	call	_lcd_cmd
  1298                           
  1299                           ;main.c: 517:     lcd_cmd(0x80);
  1300  00FEDA  0E80               	movlw	128
  1301  00FEDC  ECDA  F078         	call	_lcd_cmd
  1302  00FEE0                     
  1303                           ;main.c: 518:     lcd_str("Program 8 end");
  1304  00FEE0  0EF0               	movlw	low STR_16
  1305  00FEE2  6E03               	movwf	lcd_str@str^0,c
  1306  00FEE4  0EFF               	movlw	high STR_16
  1307  00FEE6  6E04               	movwf	(lcd_str@str+1)^0,c
  1308  00FEE8  ECA0  F079         	call	_lcd_str	;wreg free
  1309  00FEEC                     
  1310                           ;main.c: 519:     delay(500);
  1311  00FEEC  0E01               	movlw	1
  1312  00FEEE  6E02               	movwf	(delay@ms+1)^0,c
  1313  00FEF0  0EF4               	movlw	244
  1314  00FEF2  6E01               	movwf	delay@ms^0,c
  1315  00FEF4  EC56  F079         	call	_delay	;wreg free
  1316  00FEF8                     l174:
  1317  00FEF8  0012               	return		;funcret
  1318  00FEFA                     __end_of_subProgram8:
  1319                           	opt callstack 0
  1320                           
  1321 ;; *************** function _clearMaskFromNthPosition *****************
  1322 ;; Defined at:
  1323 ;;		line 478 in file "main.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  mask            2    0[COMRAM] PTR unsigned char 
  1326 ;;		 -> subProgram8@mask(8), 
  1327 ;;  position        2    2[COMRAM] int 
  1328 ;; Auto vars:     Size  Location     Type
  1329 ;;  i               2    4[COMRAM] int 
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  1    wreg      void 
  1332 ;; Registers used:
  1333 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1339 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1340 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1342 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1343 ;;Total ram usage:        6 bytes
  1344 ;; Hardware stack levels used:    1
  1345 ;; This function calls:
  1346 ;;		Nothing
  1347 ;; This function is called by:
  1348 ;;		_subProgram8
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           	psect	text5
  1353  00F224                     __ptext5:
  1354                           	opt callstack 0
  1355  00F224                     _clearMaskFromNthPosition:
  1356                           	opt callstack 28
  1357  00F224                     
  1358                           ;main.c: 478: void clearMaskFromNthPosition(unsigned char * mask, int position);main.c: 
      +                          479: {;main.c: 480:     for (int i = position - 1; i >= 0; i--) {
  1359  00F224  0EFF               	movlw	255
  1360  00F226  2403               	addwf	clearMaskFromNthPosition@position^0,w,c
  1361  00F228  6E05               	movwf	clearMaskFromNthPosition@i^0,c
  1362  00F22A  0EFF               	movlw	255
  1363  00F22C  2004               	addwfc	(clearMaskFromNthPosition@position+1)^0,w,c
  1364  00F22E  6E06               	movwf	(clearMaskFromNthPosition@i+1)^0,c
  1365  00F230  BE06               	btfsc	(clearMaskFromNthPosition@i+1)^0,7,c
  1366  00F232  EF1F  F079         	goto	u890
  1367  00F236  EF1D  F079         	goto	u891
  1368  00F23A                     u891:
  1369  00F23A  EF21  F079         	goto	l1726
  1370  00F23E                     u890:
  1371  00F23E  EF33  F079         	goto	l166
  1372  00F242                     l1726:
  1373                           
  1374                           ;main.c: 481:         mask[i] = 0;
  1375  00F242  5005               	movf	clearMaskFromNthPosition@i^0,w,c
  1376  00F244  2401               	addwf	clearMaskFromNthPosition@mask^0,w,c
  1377  00F246  6ED9               	movwf	fsr2l,c
  1378  00F248  5006               	movf	(clearMaskFromNthPosition@i+1)^0,w,c
  1379  00F24A  2002               	addwfc	(clearMaskFromNthPosition@mask+1)^0,w,c
  1380  00F24C  6EDA               	movwf	fsr2h,c
  1381  00F24E  0E00               	movlw	0
  1382  00F250  6EDF               	movwf	indf2,c
  1383  00F252                     
  1384                           ;main.c: 482:     }
  1385  00F252  0605               	decf	clearMaskFromNthPosition@i^0,f,c
  1386  00F254  A0D8               	btfss	status,0,c
  1387  00F256  0606               	decf	(clearMaskFromNthPosition@i+1)^0,f,c
  1388  00F258  BE06               	btfsc	(clearMaskFromNthPosition@i+1)^0,7,c
  1389  00F25A  EF33  F079         	goto	u900
  1390  00F25E  EF31  F079         	goto	u901
  1391  00F262                     u901:
  1392  00F262  EF21  F079         	goto	l1726
  1393  00F266                     u900:
  1394  00F266                     l166:
  1395  00F266  0012               	return		;funcret
  1396  00F268                     __end_of_clearMaskFromNthPosition:
  1397                           	opt callstack 0
  1398                           
  1399 ;; *************** function _subProgram7 *****************
  1400 ;; Defined at:
  1401 ;;		line 451 in file "main.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;		None
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;  binBuffer       8    7[COMRAM] unsigned char [8]
  1406 ;;  snake           1   16[COMRAM] unsigned char 
  1407 ;;  counterDispl    1   15[COMRAM] unsigned char 
  1408 ;; Return value:  Size  Location     Type
  1409 ;;                  1    wreg      void 
  1410 ;; Registers used:
  1411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1412 ;; Tracked objects:
  1413 ;;		On entry : 0/0
  1414 ;;		On exit  : 0/0
  1415 ;;		Unchanged: 0/0
  1416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1418 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1420 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1421 ;;Total ram usage:       10 bytes
  1422 ;; Hardware stack levels used:    1
  1423 ;; Hardware stack levels required when called:    3
  1424 ;; This function calls:
  1425 ;;		_delay
  1426 ;;		_intToBinary
  1427 ;;		_isProgramInterupted
  1428 ;;		_lcd_cmd
  1429 ;;		_lcd_str
  1430 ;;		_nextSnake
  1431 ;;		_printMask
  1432 ;; This function is called by:
  1433 ;;		_runSubProgram
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           	psect	text6
  1438  00F558                     __ptext6:
  1439                           	opt callstack 0
  1440  00F558                     _subProgram7:
  1441                           	opt callstack 26
  1442  00F558                     
  1443                           ;main.c: 453:     lcd_cmd(0x01);
  1444  00F558  0E01               	movlw	1
  1445  00F55A  ECDA  F078         	call	_lcd_cmd
  1446                           
  1447                           ;main.c: 454:     lcd_cmd(0x80);
  1448  00F55E  0E80               	movlw	128
  1449  00F560  ECDA  F078         	call	_lcd_cmd
  1450  00F564                     
  1451                           ;main.c: 455:     lcd_str("Program 7 start");
  1452  00F564  0E6C               	movlw	low STR_14
  1453  00F566  6E03               	movwf	lcd_str@str^0,c
  1454  00F568  0EFF               	movlw	high STR_14
  1455  00F56A  6E04               	movwf	(lcd_str@str+1)^0,c
  1456  00F56C  ECA0  F079         	call	_lcd_str	;wreg free
  1457  00F570                     
  1458                           ;main.c: 458:     unsigned char snake = 7;
  1459  00F570  0E07               	movlw	7
  1460  00F572  6E11               	movwf	subProgram7@snake^0,c
  1461  00F574                     l1918:
  1462                           
  1463                           ;main.c: 462:         counterDisplay = snake;
  1464  00F574  C011  F010         	movff	subProgram7@snake,subProgram7@counterDisplay
  1465  00F578                     
  1466                           ;main.c: 464:         intToBinary(binBuffer, counterDisplay);
  1467  00F578  0E08               	movlw	low subProgram7@binBuffer
  1468  00F57A  6E01               	movwf	intToBinary@buffor^0,c
  1469  00F57C  0E00               	movlw	high subProgram7@binBuffer
  1470  00F57E  6E02               	movwf	(intToBinary@buffor+1)^0,c
  1471  00F580  C010  F003         	movff	subProgram7@counterDisplay,intToBinary@value
  1472  00F584  EC7A  F079         	call	_intToBinary	;wreg free
  1473  00F588                     
  1474                           ;main.c: 466:         printMask(binBuffer);
  1475  00F588  0E08               	movlw	low subProgram7@binBuffer
  1476  00F58A  6E01               	movwf	printMask@mask^0,c
  1477  00F58C  0E00               	movlw	high subProgram7@binBuffer
  1478  00F58E  6E02               	movwf	(printMask@mask+1)^0,c
  1479  00F590  ECA8  F07D         	call	_printMask	;wreg free
  1480  00F594                     
  1481                           ;main.c: 468:         if (isProgramInterupted() == 1) return;
  1482  00F594  EC73  F07A         	call	_isProgramInterupted	;wreg free
  1483  00F598  0401               	decf	?_isProgramInterupted^0,w,c
  1484  00F59A  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
  1485  00F59C  A4D8               	btfss	status,2,c
  1486  00F59E  EFD3  F07A         	goto	u1091
  1487  00F5A2  EFD5  F07A         	goto	u1090
  1488  00F5A6                     u1091:
  1489  00F5A6  EFD7  F07A         	goto	l1928
  1490  00F5AA                     u1090:
  1491  00F5AA  EFF0  F07A         	goto	l158
  1492  00F5AE                     l1928:
  1493                           
  1494                           ;main.c: 470:         delay(200);
  1495  00F5AE  0E00               	movlw	0
  1496  00F5B0  6E02               	movwf	(delay@ms+1)^0,c
  1497  00F5B2  0EC8               	movlw	200
  1498  00F5B4  6E01               	movwf	delay@ms^0,c
  1499  00F5B6  EC56  F079         	call	_delay	;wreg free
  1500                           
  1501                           ;main.c: 472:         if (isProgramInterupted() == 1) return;
  1502  00F5BA  EC73  F07A         	call	_isProgramInterupted	;wreg free
  1503  00F5BE  0401               	decf	?_isProgramInterupted^0,w,c
  1504  00F5C0  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
  1505  00F5C2  A4D8               	btfss	status,2,c
  1506  00F5C4  EFE6  F07A         	goto	u1101
  1507  00F5C8  EFE8  F07A         	goto	u1100
  1508  00F5CC                     u1101:
  1509  00F5CC  EFEA  F07A         	goto	l1932
  1510  00F5D0                     u1100:
  1511  00F5D0  EFF0  F07A         	goto	l158
  1512  00F5D4                     l1932:
  1513                           
  1514                           ;main.c: 474:         snake = nextSnake(snake);
  1515  00F5D4  5011               	movf	subProgram7@snake^0,w,c
  1516  00F5D6  EC1A  F07A         	call	_nextSnake
  1517  00F5DA  6E11               	movwf	subProgram7@snake^0,c
  1518  00F5DC  EFBA  F07A         	goto	l1918
  1519  00F5E0                     l158:
  1520  00F5E0  0012               	return		;funcret
  1521  00F5E2                     __end_of_subProgram7:
  1522                           	opt callstack 0
  1523                           
  1524 ;; *************** function _nextSnake *****************
  1525 ;; Defined at:
  1526 ;;		line 432 in file "main.c"
  1527 ;; Parameters:    Size  Location     Type
  1528 ;;  snake           1    wreg     unsigned char 
  1529 ;; Auto vars:     Size  Location     Type
  1530 ;;  snake           1    0[COMRAM] unsigned char 
  1531 ;;  result          1    1[COMRAM] unsigned char 
  1532 ;; Return value:  Size  Location     Type
  1533 ;;                  1    wreg      unsigned char 
  1534 ;; Registers used:
  1535 ;;		wreg, status,2, status,0
  1536 ;; Tracked objects:
  1537 ;;		On entry : 0/0
  1538 ;;		On exit  : 0/0
  1539 ;;		Unchanged: 0/0
  1540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1542 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1544 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1545 ;;Total ram usage:        2 bytes
  1546 ;; Hardware stack levels used:    1
  1547 ;; This function calls:
  1548 ;;		Nothing
  1549 ;; This function is called by:
  1550 ;;		_subProgram7
  1551 ;; This function uses a non-reentrant model
  1552 ;;
  1553                           
  1554                           	psect	text7
  1555  00F434                     __ptext7:
  1556                           	opt callstack 0
  1557  00F434                     _nextSnake:
  1558                           	opt callstack 28
  1559                           
  1560                           ;incstack = 0
  1561                           ;nextSnake@snake stored from wreg
  1562  00F434  6E01               	movwf	nextSnake@snake^0,c
  1563  00F436                     
  1564                           ;main.c: 432: unsigned char nextSnake(unsigned char snake);main.c: 433: {;main.c: 434:  
      +                             unsigned char result = snake;
  1565  00F436  C001  F002         	movff	nextSnake@snake,nextSnake@result
  1566  00F43A                     
  1567                           ;main.c: 436:     if (result == 7) {
  1568  00F43A  0E07               	movlw	7
  1569  00F43C  1802               	xorwf	nextSnake@result^0,w,c
  1570  00F43E  A4D8               	btfss	status,2,c
  1571  00F440  EF24  F07A         	goto	u231
  1572  00F444  EF26  F07A         	goto	u230
  1573  00F448                     u231:
  1574  00F448  EF2A  F07A         	goto	l1112
  1575  00F44C                     u230:
  1576  00F44C                     
  1577                           ;main.c: 437:         direction = 0;
  1578  00F44C  0E00               	movlw	0
  1579  00F44E  6E2A               	movwf	_direction^0,c
  1580                           
  1581                           ;main.c: 438:     } else if (result == 224) {
  1582  00F450  EF35  F07A         	goto	l149
  1583  00F454                     l1112:
  1584  00F454  0EE0               	movlw	224
  1585  00F456  1802               	xorwf	nextSnake@result^0,w,c
  1586  00F458  A4D8               	btfss	status,2,c
  1587  00F45A  EF31  F07A         	goto	u241
  1588  00F45E  EF33  F07A         	goto	u240
  1589  00F462                     u241:
  1590  00F462  EF35  F07A         	goto	l149
  1591  00F466                     u240:
  1592  00F466                     
  1593                           ;main.c: 439:         direction = 1;
  1594  00F466  0E01               	movlw	1
  1595  00F468  6E2A               	movwf	_direction^0,c
  1596  00F46A                     l149:
  1597                           
  1598                           ;main.c: 442:     if (direction == 0) {
  1599  00F46A  502A               	movf	_direction^0,w,c
  1600  00F46C  A4D8               	btfss	status,2,c
  1601  00F46E  EF3B  F07A         	goto	u251
  1602  00F472  EF3D  F07A         	goto	u250
  1603  00F476                     u251:
  1604  00F476  EF41  F07A         	goto	l1118
  1605  00F47A                     u250:
  1606  00F47A                     
  1607                           ;main.c: 443:         result <<= 1;
  1608  00F47A  90D8               	bcf	status,0,c
  1609  00F47C  3602               	rlcf	nextSnake@result^0,f,c
  1610                           
  1611                           ;main.c: 444:     } else {
  1612  00F47E  EF43  F07A         	goto	l1120
  1613  00F482                     l1118:
  1614                           
  1615                           ;main.c: 445:         result >>= 1;
  1616  00F482  90D8               	bcf	status,0,c
  1617  00F484  3202               	rrcf	nextSnake@result^0,f,c
  1618  00F486                     l1120:
  1619                           
  1620                           ;main.c: 448:     return result;
  1621  00F486  5002               	movf	nextSnake@result^0,w,c
  1622  00F488  0012               	return		;funcret
  1623  00F48A                     __end_of_nextSnake:
  1624                           	opt callstack 0
  1625                           
  1626 ;; *************** function _subProgram6 *****************
  1627 ;; Defined at:
  1628 ;;		line 400 in file "main.c"
  1629 ;; Parameters:    Size  Location     Type
  1630 ;;		None
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;  binBuffer       8   11[COMRAM] unsigned char [8]
  1633 ;;  counter         1   20[COMRAM] unsigned char 
  1634 ;;  counterDispl    1   19[COMRAM] unsigned char 
  1635 ;; Return value:  Size  Location     Type
  1636 ;;                  1    wreg      void 
  1637 ;; Registers used:
  1638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1639 ;; Tracked objects:
  1640 ;;		On entry : 0/0
  1641 ;;		On exit  : 0/0
  1642 ;;		Unchanged: 0/0
  1643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1645 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1647 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1648 ;;Total ram usage:       10 bytes
  1649 ;; Hardware stack levels used:    1
  1650 ;; Hardware stack levels required when called:    3
  1651 ;; This function calls:
  1652 ;;		_convertIntoToBCD
  1653 ;;		_delay
  1654 ;;		_intToBinary
  1655 ;;		_isProgramInterupted
  1656 ;;		_lcd_cmd
  1657 ;;		_lcd_str
  1658 ;;		_printMask
  1659 ;; This function is called by:
  1660 ;;		_runSubProgram
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664                           	psect	text8
  1665  00F7E4                     __ptext8:
  1666                           	opt callstack 0
  1667  00F7E4                     _subProgram6:
  1668                           	opt callstack 26
  1669  00F7E4                     
  1670                           ;main.c: 402:     unsigned char counter = 99;
  1671  00F7E4  0E63               	movlw	99
  1672  00F7E6  6E15               	movwf	subProgram6@counter^0,c
  1673  00F7E8                     
  1674                           ;main.c: 405:     unsigned char binBuffer[8];;main.c: 407:     lcd_cmd(0x01);
  1675  00F7E8  0E01               	movlw	1
  1676  00F7EA  ECDA  F078         	call	_lcd_cmd
  1677  00F7EE                     
  1678                           ;main.c: 408:     lcd_cmd(0x80);
  1679  00F7EE  0E80               	movlw	128
  1680  00F7F0  ECDA  F078         	call	_lcd_cmd
  1681  00F7F4                     
  1682                           ;main.c: 409:     lcd_str("Program 6 start");
  1683  00F7F4  0E5C               	movlw	low STR_12
  1684  00F7F6  6E03               	movwf	lcd_str@str^0,c
  1685  00F7F8  0EFF               	movlw	high STR_12
  1686  00F7FA  6E04               	movwf	(lcd_str@str+1)^0,c
  1687  00F7FC  ECA0  F079         	call	_lcd_str	;wreg free
  1688  00F800                     l1888:
  1689                           
  1690                           ;main.c: 412:         counterDisplay = convertIntoToBCD(counter);
  1691  00F800  5015               	movf	subProgram6@counter^0,w,c
  1692  00F802  ECF7  F078         	call	_convertIntoToBCD
  1693  00F806  6E14               	movwf	subProgram6@counterDisplay^0,c
  1694  00F808                     
  1695                           ;main.c: 414:         intToBinary(binBuffer, counterDisplay);
  1696  00F808  0E0C               	movlw	low subProgram6@binBuffer
  1697  00F80A  6E01               	movwf	intToBinary@buffor^0,c
  1698  00F80C  0E00               	movlw	high subProgram6@binBuffer
  1699  00F80E  6E02               	movwf	(intToBinary@buffor+1)^0,c
  1700  00F810  C014  F003         	movff	subProgram6@counterDisplay,intToBinary@value
  1701  00F814  EC7A  F079         	call	_intToBinary	;wreg free
  1702  00F818                     
  1703                           ;main.c: 416:         printMask(binBuffer);
  1704  00F818  0E0C               	movlw	low subProgram6@binBuffer
  1705  00F81A  6E01               	movwf	printMask@mask^0,c
  1706  00F81C  0E00               	movlw	high subProgram6@binBuffer
  1707  00F81E  6E02               	movwf	(printMask@mask+1)^0,c
  1708  00F820  ECA8  F07D         	call	_printMask	;wreg free
  1709  00F824                     
  1710                           ;main.c: 418:         if (isProgramInterupted() == 1) return;
  1711  00F824  EC73  F07A         	call	_isProgramInterupted	;wreg free
  1712  00F828  0401               	decf	?_isProgramInterupted^0,w,c
  1713  00F82A  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
  1714  00F82C  A4D8               	btfss	status,2,c
  1715  00F82E  EF1B  F07C         	goto	u1061
  1716  00F832  EF1D  F07C         	goto	u1060
  1717  00F836                     u1061:
  1718  00F836  EF1F  F07C         	goto	l1898
  1719  00F83A                     u1060:
  1720  00F83A  EF47  F07C         	goto	l143
  1721  00F83E                     l1898:
  1722                           
  1723                           ;main.c: 420:         delay(200);
  1724  00F83E  0E00               	movlw	0
  1725  00F840  6E02               	movwf	(delay@ms+1)^0,c
  1726  00F842  0EC8               	movlw	200
  1727  00F844  6E01               	movwf	delay@ms^0,c
  1728  00F846  EC56  F079         	call	_delay	;wreg free
  1729                           
  1730                           ;main.c: 422:         if (isProgramInterupted() == 1) return;
  1731  00F84A  EC73  F07A         	call	_isProgramInterupted	;wreg free
  1732  00F84E  0401               	decf	?_isProgramInterupted^0,w,c
  1733  00F850  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
  1734  00F852  A4D8               	btfss	status,2,c
  1735  00F854  EF2E  F07C         	goto	u1071
  1736  00F858  EF30  F07C         	goto	u1070
  1737  00F85C                     u1071:
  1738  00F85C  EF32  F07C         	goto	l1902
  1739  00F860                     u1070:
  1740  00F860  EF47  F07C         	goto	l143
  1741  00F864                     l1902:
  1742                           
  1743                           ;main.c: 424:         counter--;
  1744  00F864  0615               	decf	subProgram6@counter^0,f,c
  1745  00F866                     
  1746                           ;main.c: 425:     } while (counter > 0);
  1747  00F866  5015               	movf	subProgram6@counter^0,w,c
  1748  00F868  A4D8               	btfss	status,2,c
  1749  00F86A  EF39  F07C         	goto	u1081
  1750  00F86E  EF3B  F07C         	goto	u1080
  1751  00F872                     u1081:
  1752  00F872  EF00  F07C         	goto	l1888
  1753  00F876                     u1080:
  1754  00F876                     
  1755                           ;main.c: 427:     lcd_cmd(0x01);
  1756  00F876  0E01               	movlw	1
  1757  00F878  ECDA  F078         	call	_lcd_cmd
  1758                           
  1759                           ;main.c: 428:     lcd_cmd(0x80);
  1760  00F87C  0E80               	movlw	128
  1761  00F87E  ECDA  F078         	call	_lcd_cmd
  1762  00F882                     
  1763                           ;main.c: 429:     lcd_str("Program 6 end");
  1764  00F882  0EE2               	movlw	low STR_13
  1765  00F884  6E03               	movwf	lcd_str@str^0,c
  1766  00F886  0EFF               	movlw	high STR_13
  1767  00F888  6E04               	movwf	(lcd_str@str+1)^0,c
  1768  00F88A  ECA0  F079         	call	_lcd_str	;wreg free
  1769  00F88E                     l143:
  1770  00F88E  0012               	return		;funcret
  1771  00F890                     __end_of_subProgram6:
  1772                           	opt callstack 0
  1773                           
  1774 ;; *************** function _subProgram5 *****************
  1775 ;; Defined at:
  1776 ;;		line 368 in file "main.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;		None
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;  binBuffer       8   11[COMRAM] unsigned char [8]
  1781 ;;  counter         1   20[COMRAM] unsigned char 
  1782 ;;  counterDispl    1   19[COMRAM] unsigned char 
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  1    wreg      void 
  1785 ;; Registers used:
  1786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;Total ram usage:       10 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    3
  1799 ;; This function calls:
  1800 ;;		_convertIntoToBCD
  1801 ;;		_delay
  1802 ;;		_intToBinary
  1803 ;;		_isProgramInterupted
  1804 ;;		_lcd_cmd
  1805 ;;		_lcd_str
  1806 ;;		_printMask
  1807 ;; This function is called by:
  1808 ;;		_runSubProgram
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812                           	psect	text9
  1813  00F738                     __ptext9:
  1814                           	opt callstack 0
  1815  00F738                     _subProgram5:
  1816                           	opt callstack 26
  1817  00F738                     
  1818                           ;main.c: 370:     unsigned char counter = 0;
  1819  00F738  0E00               	movlw	0
  1820  00F73A  6E15               	movwf	subProgram5@counter^0,c
  1821  00F73C                     
  1822                           ;main.c: 373:     unsigned char binBuffer[8];;main.c: 375:     lcd_cmd(0x01);
  1823  00F73C  0E01               	movlw	1
  1824  00F73E  ECDA  F078         	call	_lcd_cmd
  1825  00F742                     
  1826                           ;main.c: 376:     lcd_cmd(0x80);
  1827  00F742  0E80               	movlw	128
  1828  00F744  ECDA  F078         	call	_lcd_cmd
  1829  00F748                     
  1830                           ;main.c: 377:     lcd_str("Program 5 start");
  1831  00F748  0E4C               	movlw	low STR_10
  1832  00F74A  6E03               	movwf	lcd_str@str^0,c
  1833  00F74C  0EFF               	movlw	high STR_10
  1834  00F74E  6E04               	movwf	(lcd_str@str+1)^0,c
  1835  00F750  ECA0  F079         	call	_lcd_str	;wreg free
  1836  00F754                     l1858:
  1837                           
  1838                           ;main.c: 380:         counterDisplay = convertIntoToBCD(counter);
  1839  00F754  5015               	movf	subProgram5@counter^0,w,c
  1840  00F756  ECF7  F078         	call	_convertIntoToBCD
  1841  00F75A  6E14               	movwf	subProgram5@counterDisplay^0,c
  1842  00F75C                     
  1843                           ;main.c: 382:         intToBinary(binBuffer, counterDisplay);
  1844  00F75C  0E0C               	movlw	low subProgram5@binBuffer
  1845  00F75E  6E01               	movwf	intToBinary@buffor^0,c
  1846  00F760  0E00               	movlw	high subProgram5@binBuffer
  1847  00F762  6E02               	movwf	(intToBinary@buffor+1)^0,c
  1848  00F764  C014  F003         	movff	subProgram5@counterDisplay,intToBinary@value
  1849  00F768  EC7A  F079         	call	_intToBinary	;wreg free
  1850  00F76C                     
  1851                           ;main.c: 384:         printMask(binBuffer);
  1852  00F76C  0E0C               	movlw	low subProgram5@binBuffer
  1853  00F76E  6E01               	movwf	printMask@mask^0,c
  1854  00F770  0E00               	movlw	high subProgram5@binBuffer
  1855  00F772  6E02               	movwf	(printMask@mask+1)^0,c
  1856  00F774  ECA8  F07D         	call	_printMask	;wreg free
  1857  00F778                     
  1858                           ;main.c: 386:         if (isProgramInterupted() == 1) return;
  1859  00F778  EC73  F07A         	call	_isProgramInterupted	;wreg free
  1860  00F77C  0401               	decf	?_isProgramInterupted^0,w,c
  1861  00F77E  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
  1862  00F780  A4D8               	btfss	status,2,c
  1863  00F782  EFC5  F07B         	goto	u1031
  1864  00F786  EFC7  F07B         	goto	u1030
  1865  00F78A                     u1031:
  1866  00F78A  EFC9  F07B         	goto	l1868
  1867  00F78E                     u1030:
  1868  00F78E  EFF1  F07B         	goto	l136
  1869  00F792                     l1868:
  1870                           
  1871                           ;main.c: 388:         delay(200);
  1872  00F792  0E00               	movlw	0
  1873  00F794  6E02               	movwf	(delay@ms+1)^0,c
  1874  00F796  0EC8               	movlw	200
  1875  00F798  6E01               	movwf	delay@ms^0,c
  1876  00F79A  EC56  F079         	call	_delay	;wreg free
  1877                           
  1878                           ;main.c: 390:         if (isProgramInterupted() == 1) return;
  1879  00F79E  EC73  F07A         	call	_isProgramInterupted	;wreg free
  1880  00F7A2  0401               	decf	?_isProgramInterupted^0,w,c
  1881  00F7A4  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
  1882  00F7A6  A4D8               	btfss	status,2,c
  1883  00F7A8  EFD8  F07B         	goto	u1041
  1884  00F7AC  EFDA  F07B         	goto	u1040
  1885  00F7B0                     u1041:
  1886  00F7B0  EFDC  F07B         	goto	l1872
  1887  00F7B4                     u1040:
  1888  00F7B4  EFF1  F07B         	goto	l136
  1889  00F7B8                     l1872:
  1890                           
  1891                           ;main.c: 392:         counter++;
  1892  00F7B8  2A15               	incf	subProgram5@counter^0,f,c
  1893  00F7BA                     
  1894                           ;main.c: 393:     } while (counter < 99);
  1895  00F7BA  0E62               	movlw	98
  1896  00F7BC  6415               	cpfsgt	subProgram5@counter^0,c
  1897  00F7BE  EFE3  F07B         	goto	u1051
  1898  00F7C2  EFE5  F07B         	goto	u1050
  1899  00F7C6                     u1051:
  1900  00F7C6  EFAA  F07B         	goto	l1858
  1901  00F7CA                     u1050:
  1902  00F7CA                     
  1903                           ;main.c: 395:     lcd_cmd(0x01);
  1904  00F7CA  0E01               	movlw	1
  1905  00F7CC  ECDA  F078         	call	_lcd_cmd
  1906                           
  1907                           ;main.c: 396:     lcd_cmd(0x80);
  1908  00F7D0  0E80               	movlw	128
  1909  00F7D2  ECDA  F078         	call	_lcd_cmd
  1910  00F7D6                     
  1911                           ;main.c: 397:     lcd_str("Program 5 end");
  1912  00F7D6  0ED4               	movlw	low STR_11
  1913  00F7D8  6E03               	movwf	lcd_str@str^0,c
  1914  00F7DA  0EFF               	movlw	high STR_11
  1915  00F7DC  6E04               	movwf	(lcd_str@str+1)^0,c
  1916  00F7DE  ECA0  F079         	call	_lcd_str	;wreg free
  1917  00F7E2                     l136:
  1918  00F7E2  0012               	return		;funcret
  1919  00F7E4                     __end_of_subProgram5:
  1920                           	opt callstack 0
  1921                           
  1922 ;; *************** function _convertIntoToBCD *****************
  1923 ;; Defined at:
  1924 ;;		line 363 in file "main.c"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;  counter         1    wreg     unsigned char 
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;  counter         1   10[COMRAM] unsigned char 
  1929 ;; Return value:  Size  Location     Type
  1930 ;;                  1    wreg      unsigned char 
  1931 ;; Registers used:
  1932 ;;		wreg, status,2, status,0, cstack
  1933 ;; Tracked objects:
  1934 ;;		On entry : 0/0
  1935 ;;		On exit  : 0/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1939 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1940 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1941 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1942 ;;Total ram usage:        3 bytes
  1943 ;; Hardware stack levels used:    1
  1944 ;; Hardware stack levels required when called:    1
  1945 ;; This function calls:
  1946 ;;		___awdiv
  1947 ;;		___awmod
  1948 ;; This function is called by:
  1949 ;;		_subProgram5
  1950 ;;		_subProgram6
  1951 ;; This function uses a non-reentrant model
  1952 ;;
  1953                           
  1954                           	psect	text10
  1955  00F1EE                     __ptext10:
  1956                           	opt callstack 0
  1957  00F1EE                     _convertIntoToBCD:
  1958                           	opt callstack 27
  1959                           
  1960                           ;incstack = 0
  1961                           ;convertIntoToBCD@counter stored from wreg
  1962  00F1EE  6E0B               	movwf	convertIntoToBCD@counter^0,c
  1963  00F1F0                     
  1964                           ;main.c: 363: unsigned char convertIntoToBCD(unsigned char counter);main.c: 364: {;main.
      +                          c: 365:     return ((counter / 10) << 4) | (counter % 10);
  1965  00F1F0  C00B  F001         	movff	convertIntoToBCD@counter,___awmod@dividend
  1966  00F1F4  6A02               	clrf	(___awmod@dividend+1)^0,c
  1967  00F1F6  0E00               	movlw	0
  1968  00F1F8  6E04               	movwf	(___awmod@divisor+1)^0,c
  1969  00F1FA  0E0A               	movlw	10
  1970  00F1FC  6E03               	movwf	___awmod@divisor^0,c
  1971  00F1FE  ECF7  F07C         	call	___awmod	;wreg free
  1972  00F202  C001  F009         	movff	?___awmod,??_convertIntoToBCD
  1973  00F206  C002  F00A         	movff	?___awmod+1,??_convertIntoToBCD+1
  1974  00F20A  C00B  F001         	movff	convertIntoToBCD@counter,___awdiv@dividend
  1975  00F20E  6A02               	clrf	(___awdiv@dividend+1)^0,c
  1976  00F210  0E00               	movlw	0
  1977  00F212  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1978  00F214  0E0A               	movlw	10
  1979  00F216  6E03               	movwf	___awdiv@divisor^0,c
  1980  00F218  EC02  F07E         	call	___awdiv	;wreg free
  1981  00F21C  3801               	swapf	?___awdiv^0,w,c
  1982  00F21E  0BF0               	andlw	240
  1983  00F220  1009               	iorwf	??_convertIntoToBCD^0,w,c
  1984  00F222  0012               	return		;funcret
  1985  00F224                     __end_of_convertIntoToBCD:
  1986                           	opt callstack 0
  1987                           
  1988 ;; *************** function ___awmod *****************
  1989 ;; Defined at:
  1990 ;;		line 7 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/awmod.c"
  1991 ;; Parameters:    Size  Location     Type
  1992 ;;  dividend        2    0[COMRAM] int 
  1993 ;;  divisor         2    2[COMRAM] int 
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;  sign            1    5[COMRAM] unsigned char 
  1996 ;;  counter         1    4[COMRAM] unsigned char 
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  2    0[COMRAM] int 
  1999 ;; Registers used:
  2000 ;;		wreg, status,2, status,0
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2006 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2007 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2009 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2010 ;;Total ram usage:        6 bytes
  2011 ;; Hardware stack levels used:    1
  2012 ;; This function calls:
  2013 ;;		Nothing
  2014 ;; This function is called by:
  2015 ;;		_convertIntoToBCD
  2016 ;;		_cprog_itos
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           	psect	text11
  2021  00F9EE                     __ptext11:
  2022                           	opt callstack 0
  2023  00F9EE                     ___awmod:
  2024                           	opt callstack 27
  2025  00F9EE  0E00               	movlw	0
  2026  00F9F0  6E06               	movwf	___awmod@sign^0,c
  2027  00F9F2  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  2028  00F9F4  EF00  F07D         	goto	u730
  2029  00F9F8  EFFE  F07C         	goto	u731
  2030  00F9FC                     u731:
  2031  00F9FC  EF06  F07D         	goto	l1618
  2032  00FA00                     u730:
  2033  00FA00  6C01               	negf	___awmod@dividend^0,c
  2034  00FA02  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2035  00FA04  B0D8               	btfsc	status,0,c
  2036  00FA06  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2037  00FA08  0E01               	movlw	1
  2038  00FA0A  6E06               	movwf	___awmod@sign^0,c
  2039  00FA0C                     l1618:
  2040  00FA0C  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  2041  00FA0E  EF0D  F07D         	goto	u740
  2042  00FA12  EF0B  F07D         	goto	u741
  2043  00FA16                     u741:
  2044  00FA16  EF11  F07D         	goto	l1622
  2045  00FA1A                     u740:
  2046  00FA1A  6C03               	negf	___awmod@divisor^0,c
  2047  00FA1C  1E04               	comf	(___awmod@divisor+1)^0,f,c
  2048  00FA1E  B0D8               	btfsc	status,0,c
  2049  00FA20  2A04               	incf	(___awmod@divisor+1)^0,f,c
  2050  00FA22                     l1622:
  2051  00FA22  5003               	movf	___awmod@divisor^0,w,c
  2052  00FA24  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  2053  00FA26  B4D8               	btfsc	status,2,c
  2054  00FA28  EF18  F07D         	goto	u751
  2055  00FA2C  EF1A  F07D         	goto	u750
  2056  00FA30                     u751:
  2057  00FA30  EF3E  F07D         	goto	l1638
  2058  00FA34                     u750:
  2059  00FA34  0E01               	movlw	1
  2060  00FA36  6E05               	movwf	___awmod@counter^0,c
  2061  00FA38  EF22  F07D         	goto	l1628
  2062  00FA3C                     l1626:
  2063  00FA3C  90D8               	bcf	status,0,c
  2064  00FA3E  3603               	rlcf	___awmod@divisor^0,f,c
  2065  00FA40  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  2066  00FA42  2A05               	incf	___awmod@counter^0,f,c
  2067  00FA44                     l1628:
  2068  00FA44  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  2069  00FA46  EF27  F07D         	goto	u761
  2070  00FA4A  EF29  F07D         	goto	u760
  2071  00FA4E                     u761:
  2072  00FA4E  EF1E  F07D         	goto	l1626
  2073  00FA52                     u760:
  2074  00FA52                     l1630:
  2075  00FA52  5003               	movf	___awmod@divisor^0,w,c
  2076  00FA54  5C01               	subwf	___awmod@dividend^0,w,c
  2077  00FA56  5004               	movf	(___awmod@divisor+1)^0,w,c
  2078  00FA58  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  2079  00FA5A  A0D8               	btfss	status,0,c
  2080  00FA5C  EF32  F07D         	goto	u771
  2081  00FA60  EF34  F07D         	goto	u770
  2082  00FA64                     u771:
  2083  00FA64  EF38  F07D         	goto	l1634
  2084  00FA68                     u770:
  2085  00FA68  5003               	movf	___awmod@divisor^0,w,c
  2086  00FA6A  5E01               	subwf	___awmod@dividend^0,f,c
  2087  00FA6C  5004               	movf	(___awmod@divisor+1)^0,w,c
  2088  00FA6E  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  2089  00FA70                     l1634:
  2090  00FA70  90D8               	bcf	status,0,c
  2091  00FA72  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  2092  00FA74  3203               	rrcf	___awmod@divisor^0,f,c
  2093  00FA76  2E05               	decfsz	___awmod@counter^0,f,c
  2094  00FA78  EF29  F07D         	goto	l1630
  2095  00FA7C                     l1638:
  2096  00FA7C  5006               	movf	___awmod@sign^0,w,c
  2097  00FA7E  B4D8               	btfsc	status,2,c
  2098  00FA80  EF44  F07D         	goto	u781
  2099  00FA84  EF46  F07D         	goto	u780
  2100  00FA88                     u781:
  2101  00FA88  EF4A  F07D         	goto	l1642
  2102  00FA8C                     u780:
  2103  00FA8C  6C01               	negf	___awmod@dividend^0,c
  2104  00FA8E  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2105  00FA90  B0D8               	btfsc	status,0,c
  2106  00FA92  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2107  00FA94                     l1642:
  2108  00FA94  C001  F001         	movff	___awmod@dividend,?___awmod
  2109  00FA98  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2110  00FA9C  0012               	return		;funcret
  2111  00FA9E                     __end_of___awmod:
  2112                           	opt callstack 0
  2113                           
  2114 ;; *************** function ___awdiv *****************
  2115 ;; Defined at:
  2116 ;;		line 7 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/awdiv.c"
  2117 ;; Parameters:    Size  Location     Type
  2118 ;;  dividend        2    0[COMRAM] int 
  2119 ;;  divisor         2    2[COMRAM] int 
  2120 ;; Auto vars:     Size  Location     Type
  2121 ;;  quotient        2    6[COMRAM] int 
  2122 ;;  sign            1    5[COMRAM] unsigned char 
  2123 ;;  counter         1    4[COMRAM] unsigned char 
  2124 ;; Return value:  Size  Location     Type
  2125 ;;                  2    0[COMRAM] int 
  2126 ;; Registers used:
  2127 ;;		wreg, status,2, status,0
  2128 ;; Tracked objects:
  2129 ;;		On entry : 0/0
  2130 ;;		On exit  : 0/0
  2131 ;;		Unchanged: 0/0
  2132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2133 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2134 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2136 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2137 ;;Total ram usage:        8 bytes
  2138 ;; Hardware stack levels used:    1
  2139 ;; This function calls:
  2140 ;;		Nothing
  2141 ;; This function is called by:
  2142 ;;		_convertIntoToBCD
  2143 ;;		_cprog_itos
  2144 ;; This function uses a non-reentrant model
  2145 ;;
  2146                           
  2147                           	psect	text12
  2148  00FC04                     __ptext12:
  2149                           	opt callstack 0
  2150  00FC04                     ___awdiv:
  2151                           	opt callstack 27
  2152  00FC04  0E00               	movlw	0
  2153  00FC06  6E06               	movwf	___awdiv@sign^0,c
  2154  00FC08  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2155  00FC0A  EF0B  F07E         	goto	u670
  2156  00FC0E  EF09  F07E         	goto	u671
  2157  00FC12                     u671:
  2158  00FC12  EF11  F07E         	goto	l1574
  2159  00FC16                     u670:
  2160  00FC16  6C03               	negf	___awdiv@divisor^0,c
  2161  00FC18  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2162  00FC1A  B0D8               	btfsc	status,0,c
  2163  00FC1C  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2164  00FC1E  0E01               	movlw	1
  2165  00FC20  6E06               	movwf	___awdiv@sign^0,c
  2166  00FC22                     l1574:
  2167  00FC22  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2168  00FC24  EF18  F07E         	goto	u680
  2169  00FC28  EF16  F07E         	goto	u681
  2170  00FC2C                     u681:
  2171  00FC2C  EF1E  F07E         	goto	l1580
  2172  00FC30                     u680:
  2173  00FC30  6C01               	negf	___awdiv@dividend^0,c
  2174  00FC32  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2175  00FC34  B0D8               	btfsc	status,0,c
  2176  00FC36  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2177  00FC38  0E01               	movlw	1
  2178  00FC3A  1A06               	xorwf	___awdiv@sign^0,f,c
  2179  00FC3C                     l1580:
  2180  00FC3C  0E00               	movlw	0
  2181  00FC3E  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2182  00FC40  0E00               	movlw	0
  2183  00FC42  6E07               	movwf	___awdiv@quotient^0,c
  2184  00FC44  5003               	movf	___awdiv@divisor^0,w,c
  2185  00FC46  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2186  00FC48  B4D8               	btfsc	status,2,c
  2187  00FC4A  EF29  F07E         	goto	u691
  2188  00FC4E  EF2B  F07E         	goto	u690
  2189  00FC52                     u691:
  2190  00FC52  EF53  F07E         	goto	l1602
  2191  00FC56                     u690:
  2192  00FC56  0E01               	movlw	1
  2193  00FC58  6E05               	movwf	___awdiv@counter^0,c
  2194  00FC5A  EF33  F07E         	goto	l1588
  2195  00FC5E                     l1586:
  2196  00FC5E  90D8               	bcf	status,0,c
  2197  00FC60  3603               	rlcf	___awdiv@divisor^0,f,c
  2198  00FC62  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2199  00FC64  2A05               	incf	___awdiv@counter^0,f,c
  2200  00FC66                     l1588:
  2201  00FC66  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2202  00FC68  EF38  F07E         	goto	u701
  2203  00FC6C  EF3A  F07E         	goto	u700
  2204  00FC70                     u701:
  2205  00FC70  EF2F  F07E         	goto	l1586
  2206  00FC74                     u700:
  2207  00FC74                     l1590:
  2208  00FC74  90D8               	bcf	status,0,c
  2209  00FC76  3607               	rlcf	___awdiv@quotient^0,f,c
  2210  00FC78  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2211  00FC7A  5003               	movf	___awdiv@divisor^0,w,c
  2212  00FC7C  5C01               	subwf	___awdiv@dividend^0,w,c
  2213  00FC7E  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2214  00FC80  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2215  00FC82  A0D8               	btfss	status,0,c
  2216  00FC84  EF46  F07E         	goto	u711
  2217  00FC88  EF48  F07E         	goto	u710
  2218  00FC8C                     u711:
  2219  00FC8C  EF4D  F07E         	goto	l1598
  2220  00FC90                     u710:
  2221  00FC90  5003               	movf	___awdiv@divisor^0,w,c
  2222  00FC92  5E01               	subwf	___awdiv@dividend^0,f,c
  2223  00FC94  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2224  00FC96  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2225  00FC98  8007               	bsf	___awdiv@quotient^0,0,c
  2226  00FC9A                     l1598:
  2227  00FC9A  90D8               	bcf	status,0,c
  2228  00FC9C  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2229  00FC9E  3203               	rrcf	___awdiv@divisor^0,f,c
  2230  00FCA0  2E05               	decfsz	___awdiv@counter^0,f,c
  2231  00FCA2  EF3A  F07E         	goto	l1590
  2232  00FCA6                     l1602:
  2233  00FCA6  5006               	movf	___awdiv@sign^0,w,c
  2234  00FCA8  B4D8               	btfsc	status,2,c
  2235  00FCAA  EF59  F07E         	goto	u721
  2236  00FCAE  EF5B  F07E         	goto	u720
  2237  00FCB2                     u721:
  2238  00FCB2  EF5F  F07E         	goto	l1606
  2239  00FCB6                     u720:
  2240  00FCB6  6C07               	negf	___awdiv@quotient^0,c
  2241  00FCB8  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2242  00FCBA  B0D8               	btfsc	status,0,c
  2243  00FCBC  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2244  00FCBE                     l1606:
  2245  00FCBE  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2246  00FCC2  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2247  00FCC6  0012               	return		;funcret
  2248  00FCC8                     __end_of___awdiv:
  2249                           	opt callstack 0
  2250                           
  2251 ;; *************** function _subProgram4 *****************
  2252 ;; Defined at:
  2253 ;;		line 331 in file "main.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;		None
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;  binBuffer       8    7[COMRAM] unsigned char [8]
  2258 ;;  counter         1   16[COMRAM] unsigned char 
  2259 ;;  counterDispl    1   15[COMRAM] unsigned char 
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  1    wreg      void 
  2262 ;; Registers used:
  2263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2270 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2272 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2273 ;;Total ram usage:       10 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; Hardware stack levels required when called:    3
  2276 ;; This function calls:
  2277 ;;		_convertValueToGrayCode
  2278 ;;		_delay
  2279 ;;		_intToBinary
  2280 ;;		_isProgramInterupted
  2281 ;;		_lcd_cmd
  2282 ;;		_lcd_str
  2283 ;;		_printMask
  2284 ;; This function is called by:
  2285 ;;		_runSubProgram
  2286 ;; This function uses a non-reentrant model
  2287 ;;
  2288                           
  2289                           	psect	text13
  2290  00F5E2                     __ptext13:
  2291                           	opt callstack 0
  2292  00F5E2                     _subProgram4:
  2293                           	opt callstack 26
  2294  00F5E2                     
  2295                           ;main.c: 333:     unsigned char counter = 255;
  2296  00F5E2  6811               	setf	subProgram4@counter^0,c
  2297  00F5E4                     
  2298                           ;main.c: 336:     unsigned char binBuffer[8];;main.c: 338:     lcd_cmd(0x01);
  2299  00F5E4  0E01               	movlw	1
  2300  00F5E6  ECDA  F078         	call	_lcd_cmd
  2301  00F5EA                     
  2302                           ;main.c: 339:     lcd_cmd(0x80);
  2303  00F5EA  0E80               	movlw	128
  2304  00F5EC  ECDA  F078         	call	_lcd_cmd
  2305  00F5F0                     
  2306                           ;main.c: 340:     lcd_str("Program 4 start");
  2307  00F5F0  0E3C               	movlw	low STR_8
  2308  00F5F2  6E03               	movwf	lcd_str@str^0,c
  2309  00F5F4  0EFF               	movlw	high STR_8
  2310  00F5F6  6E04               	movwf	(lcd_str@str+1)^0,c
  2311  00F5F8  ECA0  F079         	call	_lcd_str	;wreg free
  2312  00F5FC                     l1828:
  2313                           
  2314                           ;main.c: 343:         counterDisplay = convertValueToGrayCode(counter);
  2315  00F5FC  5011               	movf	subProgram4@counter^0,w,c
  2316  00F5FE  ECD5  F078         	call	_convertValueToGrayCode
  2317  00F602  6E10               	movwf	subProgram4@counterDisplay^0,c
  2318  00F604                     
  2319                           ;main.c: 345:         intToBinary(binBuffer, counterDisplay);
  2320  00F604  0E08               	movlw	low subProgram4@binBuffer
  2321  00F606  6E01               	movwf	intToBinary@buffor^0,c
  2322  00F608  0E00               	movlw	high subProgram4@binBuffer
  2323  00F60A  6E02               	movwf	(intToBinary@buffor+1)^0,c
  2324  00F60C  C010  F003         	movff	subProgram4@counterDisplay,intToBinary@value
  2325  00F610  EC7A  F079         	call	_intToBinary	;wreg free
  2326  00F614                     
  2327                           ;main.c: 347:         printMask(binBuffer);
  2328  00F614  0E08               	movlw	low subProgram4@binBuffer
  2329  00F616  6E01               	movwf	printMask@mask^0,c
  2330  00F618  0E00               	movlw	high subProgram4@binBuffer
  2331  00F61A  6E02               	movwf	(printMask@mask+1)^0,c
  2332  00F61C  ECA8  F07D         	call	_printMask	;wreg free
  2333  00F620                     
  2334                           ;main.c: 349:         if (isProgramInterupted() == 1) return;
  2335  00F620  EC73  F07A         	call	_isProgramInterupted	;wreg free
  2336  00F624  0401               	decf	?_isProgramInterupted^0,w,c
  2337  00F626  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
  2338  00F628  A4D8               	btfss	status,2,c
  2339  00F62A  EF19  F07B         	goto	u1001
  2340  00F62E  EF1B  F07B         	goto	u1000
  2341  00F632                     u1001:
  2342  00F632  EF1D  F07B         	goto	l1838
  2343  00F636                     u1000:
  2344  00F636  EF45  F07B         	goto	l126
  2345  00F63A                     l1838:
  2346                           
  2347                           ;main.c: 351:         delay(200);
  2348  00F63A  0E00               	movlw	0
  2349  00F63C  6E02               	movwf	(delay@ms+1)^0,c
  2350  00F63E  0EC8               	movlw	200
  2351  00F640  6E01               	movwf	delay@ms^0,c
  2352  00F642  EC56  F079         	call	_delay	;wreg free
  2353                           
  2354                           ;main.c: 353:         if (isProgramInterupted() == 1) return;
  2355  00F646  EC73  F07A         	call	_isProgramInterupted	;wreg free
  2356  00F64A  0401               	decf	?_isProgramInterupted^0,w,c
  2357  00F64C  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
  2358  00F64E  A4D8               	btfss	status,2,c
  2359  00F650  EF2C  F07B         	goto	u1011
  2360  00F654  EF2E  F07B         	goto	u1010
  2361  00F658                     u1011:
  2362  00F658  EF30  F07B         	goto	l1842
  2363  00F65C                     u1010:
  2364  00F65C  EF45  F07B         	goto	l126
  2365  00F660                     l1842:
  2366                           
  2367                           ;main.c: 355:         counter--;
  2368  00F660  0611               	decf	subProgram4@counter^0,f,c
  2369  00F662                     
  2370                           ;main.c: 356:     } while (counter > 0);
  2371  00F662  5011               	movf	subProgram4@counter^0,w,c
  2372  00F664  A4D8               	btfss	status,2,c
  2373  00F666  EF37  F07B         	goto	u1021
  2374  00F66A  EF39  F07B         	goto	u1020
  2375  00F66E                     u1021:
  2376  00F66E  EFFE  F07A         	goto	l1828
  2377  00F672                     u1020:
  2378  00F672                     
  2379                           ;main.c: 358:     lcd_cmd(0x01);
  2380  00F672  0E01               	movlw	1
  2381  00F674  ECDA  F078         	call	_lcd_cmd
  2382                           
  2383                           ;main.c: 359:     lcd_cmd(0x80);
  2384  00F678  0E80               	movlw	128
  2385  00F67A  ECDA  F078         	call	_lcd_cmd
  2386  00F67E                     
  2387                           ;main.c: 360:     lcd_str("Program 4 end");
  2388  00F67E  0EC6               	movlw	low STR_9
  2389  00F680  6E03               	movwf	lcd_str@str^0,c
  2390  00F682  0EFF               	movlw	high STR_9
  2391  00F684  6E04               	movwf	(lcd_str@str+1)^0,c
  2392  00F686  ECA0  F079         	call	_lcd_str	;wreg free
  2393  00F68A                     l126:
  2394  00F68A  0012               	return		;funcret
  2395  00F68C                     __end_of_subProgram4:
  2396                           	opt callstack 0
  2397                           
  2398 ;; *************** function _subProgram3 *****************
  2399 ;; Defined at:
  2400 ;;		line 299 in file "main.c"
  2401 ;; Parameters:    Size  Location     Type
  2402 ;;		None
  2403 ;; Auto vars:     Size  Location     Type
  2404 ;;  binBuffer       8    7[COMRAM] unsigned char [8]
  2405 ;;  counter         1   16[COMRAM] unsigned char 
  2406 ;;  counterDispl    1   15[COMRAM] unsigned char 
  2407 ;; Return value:  Size  Location     Type
  2408 ;;                  1    wreg      void 
  2409 ;; Registers used:
  2410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2411 ;; Tracked objects:
  2412 ;;		On entry : 0/0
  2413 ;;		On exit  : 0/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2417 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2419 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2420 ;;Total ram usage:       10 bytes
  2421 ;; Hardware stack levels used:    1
  2422 ;; Hardware stack levels required when called:    3
  2423 ;; This function calls:
  2424 ;;		_convertValueToGrayCode
  2425 ;;		_delay
  2426 ;;		_intToBinary
  2427 ;;		_isProgramInterupted
  2428 ;;		_lcd_cmd
  2429 ;;		_lcd_str
  2430 ;;		_printMask
  2431 ;; This function is called by:
  2432 ;;		_runSubProgram
  2433 ;; This function uses a non-reentrant model
  2434 ;;
  2435                           
  2436                           	psect	text14
  2437  00F68C                     __ptext14:
  2438                           	opt callstack 0
  2439  00F68C                     _subProgram3:
  2440                           	opt callstack 26
  2441  00F68C                     
  2442                           ;main.c: 301:     unsigned char counter = 0;
  2443  00F68C  0E00               	movlw	0
  2444  00F68E  6E11               	movwf	subProgram3@counter^0,c
  2445  00F690                     
  2446                           ;main.c: 304:     unsigned char binBuffer[8];;main.c: 306:     lcd_cmd(0x01);
  2447  00F690  0E01               	movlw	1
  2448  00F692  ECDA  F078         	call	_lcd_cmd
  2449  00F696                     
  2450                           ;main.c: 307:     lcd_cmd(0x80);
  2451  00F696  0E80               	movlw	128
  2452  00F698  ECDA  F078         	call	_lcd_cmd
  2453  00F69C                     
  2454                           ;main.c: 308:     lcd_str("Program 3 start");
  2455  00F69C  0E2C               	movlw	low STR_6
  2456  00F69E  6E03               	movwf	lcd_str@str^0,c
  2457  00F6A0  0EFF               	movlw	high STR_6
  2458  00F6A2  6E04               	movwf	(lcd_str@str+1)^0,c
  2459  00F6A4  ECA0  F079         	call	_lcd_str	;wreg free
  2460  00F6A8                     l1796:
  2461                           
  2462                           ;main.c: 311:         counterDisplay = convertValueToGrayCode(counter);
  2463  00F6A8  5011               	movf	subProgram3@counter^0,w,c
  2464  00F6AA  ECD5  F078         	call	_convertValueToGrayCode
  2465  00F6AE  6E10               	movwf	subProgram3@counterDisplay^0,c
  2466  00F6B0                     
  2467                           ;main.c: 313:         intToBinary(binBuffer, counterDisplay);
  2468  00F6B0  0E08               	movlw	low subProgram3@binBuffer
  2469  00F6B2  6E01               	movwf	intToBinary@buffor^0,c
  2470  00F6B4  0E00               	movlw	high subProgram3@binBuffer
  2471  00F6B6  6E02               	movwf	(intToBinary@buffor+1)^0,c
  2472  00F6B8  C010  F003         	movff	subProgram3@counterDisplay,intToBinary@value
  2473  00F6BC  EC7A  F079         	call	_intToBinary	;wreg free
  2474  00F6C0                     
  2475                           ;main.c: 315:         printMask(binBuffer);
  2476  00F6C0  0E08               	movlw	low subProgram3@binBuffer
  2477  00F6C2  6E01               	movwf	printMask@mask^0,c
  2478  00F6C4  0E00               	movlw	high subProgram3@binBuffer
  2479  00F6C6  6E02               	movwf	(printMask@mask+1)^0,c
  2480  00F6C8  ECA8  F07D         	call	_printMask	;wreg free
  2481  00F6CC                     
  2482                           ;main.c: 317:         if (isProgramInterupted() == 1) return;
  2483  00F6CC  EC73  F07A         	call	_isProgramInterupted	;wreg free
  2484  00F6D0  0401               	decf	?_isProgramInterupted^0,w,c
  2485  00F6D2  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
  2486  00F6D4  A4D8               	btfss	status,2,c
  2487  00F6D6  EF6F  F07B         	goto	u971
  2488  00F6DA  EF71  F07B         	goto	u970
  2489  00F6DE                     u971:
  2490  00F6DE  EF73  F07B         	goto	l1806
  2491  00F6E2                     u970:
  2492  00F6E2  EF9B  F07B         	goto	l119
  2493  00F6E6                     l1806:
  2494                           
  2495                           ;main.c: 319:         delay(200);
  2496  00F6E6  0E00               	movlw	0
  2497  00F6E8  6E02               	movwf	(delay@ms+1)^0,c
  2498  00F6EA  0EC8               	movlw	200
  2499  00F6EC  6E01               	movwf	delay@ms^0,c
  2500  00F6EE  EC56  F079         	call	_delay	;wreg free
  2501                           
  2502                           ;main.c: 321:         if (isProgramInterupted() == 1) return;
  2503  00F6F2  EC73  F07A         	call	_isProgramInterupted	;wreg free
  2504  00F6F6  0401               	decf	?_isProgramInterupted^0,w,c
  2505  00F6F8  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
  2506  00F6FA  A4D8               	btfss	status,2,c
  2507  00F6FC  EF82  F07B         	goto	u981
  2508  00F700  EF84  F07B         	goto	u980
  2509  00F704                     u981:
  2510  00F704  EF86  F07B         	goto	l1810
  2511  00F708                     u980:
  2512  00F708  EF9B  F07B         	goto	l119
  2513  00F70C                     l1810:
  2514                           
  2515                           ;main.c: 323:         counter++;
  2516  00F70C  2A11               	incf	subProgram3@counter^0,f,c
  2517  00F70E                     
  2518                           ;main.c: 324:     } while (counter < 255);
  2519  00F70E  2811               	incf	subProgram3@counter^0,w,c
  2520  00F710  A4D8               	btfss	status,2,c
  2521  00F712  EF8D  F07B         	goto	u991
  2522  00F716  EF8F  F07B         	goto	u990
  2523  00F71A                     u991:
  2524  00F71A  EF54  F07B         	goto	l1796
  2525  00F71E                     u990:
  2526  00F71E                     
  2527                           ;main.c: 326:     lcd_cmd(0x01);
  2528  00F71E  0E01               	movlw	1
  2529  00F720  ECDA  F078         	call	_lcd_cmd
  2530                           
  2531                           ;main.c: 327:     lcd_cmd(0x80);
  2532  00F724  0E80               	movlw	128
  2533  00F726  ECDA  F078         	call	_lcd_cmd
  2534  00F72A                     
  2535                           ;main.c: 328:     lcd_str("Program 3 end");
  2536  00F72A  0EB8               	movlw	low STR_7
  2537  00F72C  6E03               	movwf	lcd_str@str^0,c
  2538  00F72E  0EFF               	movlw	high STR_7
  2539  00F730  6E04               	movwf	(lcd_str@str+1)^0,c
  2540  00F732  ECA0  F079         	call	_lcd_str	;wreg free
  2541  00F736                     l119:
  2542  00F736  0012               	return		;funcret
  2543  00F738                     __end_of_subProgram3:
  2544                           	opt callstack 0
  2545                           
  2546 ;; *************** function _convertValueToGrayCode *****************
  2547 ;; Defined at:
  2548 ;;		line 294 in file "main.c"
  2549 ;; Parameters:    Size  Location     Type
  2550 ;;  value           1    wreg     unsigned char 
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;  value           1    0[COMRAM] unsigned char 
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  1    wreg      unsigned char 
  2555 ;; Registers used:
  2556 ;;		wreg, status,2, status,0
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2563 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2565 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2566 ;;Total ram usage:        1 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; This function calls:
  2569 ;;		Nothing
  2570 ;; This function is called by:
  2571 ;;		_subProgram3
  2572 ;;		_subProgram4
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           	psect	text15
  2577  00F1AA                     __ptext15:
  2578                           	opt callstack 0
  2579  00F1AA                     _convertValueToGrayCode:
  2580                           	opt callstack 28
  2581                           
  2582                           ;incstack = 0
  2583                           ;convertValueToGrayCode@value stored from wreg
  2584  00F1AA  6E01               	movwf	convertValueToGrayCode@value^0,c
  2585  00F1AC                     
  2586                           ;main.c: 294: unsigned char convertValueToGrayCode(unsigned char value);main.c: 295: {;m
      +                          ain.c: 296:     return value ^ (value >> 1);
  2587  00F1AC  90D8               	bcf	status,0,c
  2588  00F1AE  3001               	rrcf	convertValueToGrayCode@value^0,w,c
  2589  00F1B0  1801               	xorwf	convertValueToGrayCode@value^0,w,c
  2590  00F1B2  0012               	return		;funcret
  2591  00F1B4                     __end_of_convertValueToGrayCode:
  2592                           	opt callstack 0
  2593                           
  2594 ;; *************** function _subProgram2 *****************
  2595 ;; Defined at:
  2596 ;;		line 264 in file "main.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;		None
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;  binBuffer       8    7[COMRAM] unsigned char [8]
  2601 ;;  counter         1   15[COMRAM] unsigned char 
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  1    wreg      void 
  2604 ;; Registers used:
  2605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2612 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2614 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2615 ;;Total ram usage:        9 bytes
  2616 ;; Hardware stack levels used:    1
  2617 ;; Hardware stack levels required when called:    3
  2618 ;; This function calls:
  2619 ;;		_delay
  2620 ;;		_intToBinary
  2621 ;;		_isProgramInterupted
  2622 ;;		_lcd_cmd
  2623 ;;		_lcd_str
  2624 ;;		_printMask
  2625 ;; This function is called by:
  2626 ;;		_runSubProgram
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630                           	psect	text16
  2631  00F890                     __ptext16:
  2632                           	opt callstack 0
  2633  00F890                     _subProgram2:
  2634                           	opt callstack 26
  2635  00F890                     
  2636                           ;main.c: 266:     lcd_cmd(0x01);
  2637  00F890  0E01               	movlw	1
  2638  00F892  ECDA  F078         	call	_lcd_cmd
  2639                           
  2640                           ;main.c: 267:     lcd_cmd(0x80);
  2641  00F896  0E80               	movlw	128
  2642  00F898  ECDA  F078         	call	_lcd_cmd
  2643  00F89C                     
  2644                           ;main.c: 268:     lcd_str("Program 2 start");
  2645  00F89C  0E1C               	movlw	low STR_4
  2646  00F89E  6E03               	movwf	lcd_str@str^0,c
  2647  00F8A0  0EFF               	movlw	high STR_4
  2648  00F8A2  6E04               	movwf	(lcd_str@str+1)^0,c
  2649  00F8A4  ECA0  F079         	call	_lcd_str	;wreg free
  2650  00F8A8                     
  2651                           ;main.c: 270:     unsigned char counter = 255;
  2652  00F8A8  6810               	setf	subProgram2@counter^0,c
  2653  00F8AA                     l1766:
  2654                           
  2655                           ;main.c: 275:         intToBinary(binBuffer, counter);
  2656  00F8AA  0E08               	movlw	low subProgram2@binBuffer
  2657  00F8AC  6E01               	movwf	intToBinary@buffor^0,c
  2658  00F8AE  0E00               	movlw	high subProgram2@binBuffer
  2659  00F8B0  6E02               	movwf	(intToBinary@buffor+1)^0,c
  2660  00F8B2  C010  F003         	movff	subProgram2@counter,intToBinary@value
  2661  00F8B6  EC7A  F079         	call	_intToBinary	;wreg free
  2662  00F8BA                     
  2663                           ;main.c: 277:         printMask(binBuffer);
  2664  00F8BA  0E08               	movlw	low subProgram2@binBuffer
  2665  00F8BC  6E01               	movwf	printMask@mask^0,c
  2666  00F8BE  0E00               	movlw	high subProgram2@binBuffer
  2667  00F8C0  6E02               	movwf	(printMask@mask+1)^0,c
  2668  00F8C2  ECA8  F07D         	call	_printMask	;wreg free
  2669  00F8C6                     
  2670                           ;main.c: 279:         if (isProgramInterupted() == 1) return;
  2671  00F8C6  EC73  F07A         	call	_isProgramInterupted	;wreg free
  2672  00F8CA  0401               	decf	?_isProgramInterupted^0,w,c
  2673  00F8CC  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
  2674  00F8CE  A4D8               	btfss	status,2,c
  2675  00F8D0  EF6C  F07C         	goto	u941
  2676  00F8D4  EF6E  F07C         	goto	u940
  2677  00F8D8                     u941:
  2678  00F8D8  EF70  F07C         	goto	l1774
  2679  00F8DC                     u940:
  2680  00F8DC  EF9E  F07C         	goto	l109
  2681  00F8E0                     l1774:
  2682                           
  2683                           ;main.c: 281:         delay(200);
  2684  00F8E0  0E00               	movlw	0
  2685  00F8E2  6E02               	movwf	(delay@ms+1)^0,c
  2686  00F8E4  0EC8               	movlw	200
  2687  00F8E6  6E01               	movwf	delay@ms^0,c
  2688  00F8E8  EC56  F079         	call	_delay	;wreg free
  2689                           
  2690                           ;main.c: 283:         if (isProgramInterupted() == 1) return;
  2691  00F8EC  EC73  F07A         	call	_isProgramInterupted	;wreg free
  2692  00F8F0  0401               	decf	?_isProgramInterupted^0,w,c
  2693  00F8F2  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
  2694  00F8F4  A4D8               	btfss	status,2,c
  2695  00F8F6  EF7F  F07C         	goto	u951
  2696  00F8FA  EF81  F07C         	goto	u950
  2697  00F8FE                     u951:
  2698  00F8FE  EF83  F07C         	goto	l1778
  2699  00F902                     u950:
  2700  00F902  EF9E  F07C         	goto	l109
  2701  00F906                     l1778:
  2702                           
  2703                           ;main.c: 285:         counter--;
  2704  00F906  0610               	decf	subProgram2@counter^0,f,c
  2705  00F908                     
  2706                           ;main.c: 286:     } while (counter > 1);
  2707  00F908  0E02               	movlw	2
  2708  00F90A  6010               	cpfslt	subProgram2@counter^0,c
  2709  00F90C  EF8A  F07C         	goto	u961
  2710  00F910  EF8C  F07C         	goto	u960
  2711  00F914                     u961:
  2712  00F914  EF55  F07C         	goto	l1766
  2713  00F918                     u960:
  2714  00F918                     
  2715                           ;main.c: 288:     lcd_cmd(0x01);
  2716  00F918  0E01               	movlw	1
  2717  00F91A  ECDA  F078         	call	_lcd_cmd
  2718                           
  2719                           ;main.c: 289:     lcd_cmd(0x80);
  2720  00F91E  0E80               	movlw	128
  2721  00F920  ECDA  F078         	call	_lcd_cmd
  2722  00F924                     
  2723                           ;main.c: 290:     lcd_str("Program 2 end");
  2724  00F924  0EAA               	movlw	low STR_5
  2725  00F926  6E03               	movwf	lcd_str@str^0,c
  2726  00F928  0EFF               	movlw	high STR_5
  2727  00F92A  6E04               	movwf	(lcd_str@str+1)^0,c
  2728  00F92C  ECA0  F079         	call	_lcd_str	;wreg free
  2729  00F930                     
  2730                           ;main.c: 291:     delay(200);
  2731  00F930  0E00               	movlw	0
  2732  00F932  6E02               	movwf	(delay@ms+1)^0,c
  2733  00F934  0EC8               	movlw	200
  2734  00F936  6E01               	movwf	delay@ms^0,c
  2735  00F938  EC56  F079         	call	_delay	;wreg free
  2736  00F93C                     l109:
  2737  00F93C  0012               	return		;funcret
  2738  00F93E                     __end_of_subProgram2:
  2739                           	opt callstack 0
  2740                           
  2741 ;; *************** function _subProgram1 *****************
  2742 ;; Defined at:
  2743 ;;		line 234 in file "main.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;		None
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;  binBuffer       8    7[COMRAM] unsigned char [8]
  2748 ;;  counter         1   15[COMRAM] unsigned char 
  2749 ;; Return value:  Size  Location     Type
  2750 ;;                  1    wreg      void 
  2751 ;; Registers used:
  2752 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2753 ;; Tracked objects:
  2754 ;;		On entry : 0/0
  2755 ;;		On exit  : 0/0
  2756 ;;		Unchanged: 0/0
  2757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2762 ;;Total ram usage:        9 bytes
  2763 ;; Hardware stack levels used:    1
  2764 ;; Hardware stack levels required when called:    3
  2765 ;; This function calls:
  2766 ;;		_delay
  2767 ;;		_intToBinary
  2768 ;;		_isProgramInterupted
  2769 ;;		_lcd_cmd
  2770 ;;		_lcd_str
  2771 ;;		_printMask
  2772 ;; This function is called by:
  2773 ;;		_runSubProgram
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           	psect	text17
  2778  00F93E                     __ptext17:
  2779                           	opt callstack 0
  2780  00F93E                     _subProgram1:
  2781                           	opt callstack 26
  2782  00F93E                     
  2783                           ;main.c: 236:     lcd_cmd(0x01);
  2784  00F93E  0E01               	movlw	1
  2785  00F940  ECDA  F078         	call	_lcd_cmd
  2786                           
  2787                           ;main.c: 237:     lcd_cmd(0x80);
  2788  00F944  0E80               	movlw	128
  2789  00F946  ECDA  F078         	call	_lcd_cmd
  2790  00F94A                     
  2791                           ;main.c: 238:     lcd_str("Program 1 start");
  2792  00F94A  0E0C               	movlw	low STR_2
  2793  00F94C  6E03               	movwf	lcd_str@str^0,c
  2794  00F94E  0EFF               	movlw	high STR_2
  2795  00F950  6E04               	movwf	(lcd_str@str+1)^0,c
  2796  00F952  ECA0  F079         	call	_lcd_str	;wreg free
  2797  00F956                     
  2798                           ;main.c: 240:     unsigned char counter = 0;
  2799  00F956  0E00               	movlw	0
  2800  00F958  6E10               	movwf	subProgram1@counter^0,c
  2801  00F95A                     l1738:
  2802                           
  2803                           ;main.c: 245:         intToBinary(binBuffer, counter);
  2804  00F95A  0E08               	movlw	low subProgram1@binBuffer
  2805  00F95C  6E01               	movwf	intToBinary@buffor^0,c
  2806  00F95E  0E00               	movlw	high subProgram1@binBuffer
  2807  00F960  6E02               	movwf	(intToBinary@buffor+1)^0,c
  2808  00F962  C010  F003         	movff	subProgram1@counter,intToBinary@value
  2809  00F966  EC7A  F079         	call	_intToBinary	;wreg free
  2810  00F96A                     
  2811                           ;main.c: 247:         printMask(binBuffer);
  2812  00F96A  0E08               	movlw	low subProgram1@binBuffer
  2813  00F96C  6E01               	movwf	printMask@mask^0,c
  2814  00F96E  0E00               	movlw	high subProgram1@binBuffer
  2815  00F970  6E02               	movwf	(printMask@mask+1)^0,c
  2816  00F972  ECA8  F07D         	call	_printMask	;wreg free
  2817  00F976                     
  2818                           ;main.c: 249:         if (isProgramInterupted() == 1) return;
  2819  00F976  EC73  F07A         	call	_isProgramInterupted	;wreg free
  2820  00F97A  0401               	decf	?_isProgramInterupted^0,w,c
  2821  00F97C  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
  2822  00F97E  A4D8               	btfss	status,2,c
  2823  00F980  EFC4  F07C         	goto	u911
  2824  00F984  EFC6  F07C         	goto	u910
  2825  00F988                     u911:
  2826  00F988  EFC8  F07C         	goto	l1746
  2827  00F98C                     u910:
  2828  00F98C  EFF6  F07C         	goto	l102
  2829  00F990                     l1746:
  2830                           
  2831                           ;main.c: 251:         delay(200);
  2832  00F990  0E00               	movlw	0
  2833  00F992  6E02               	movwf	(delay@ms+1)^0,c
  2834  00F994  0EC8               	movlw	200
  2835  00F996  6E01               	movwf	delay@ms^0,c
  2836  00F998  EC56  F079         	call	_delay	;wreg free
  2837                           
  2838                           ;main.c: 253:         if (isProgramInterupted() == 1) return;
  2839  00F99C  EC73  F07A         	call	_isProgramInterupted	;wreg free
  2840  00F9A0  0401               	decf	?_isProgramInterupted^0,w,c
  2841  00F9A2  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
  2842  00F9A4  A4D8               	btfss	status,2,c
  2843  00F9A6  EFD7  F07C         	goto	u921
  2844  00F9AA  EFD9  F07C         	goto	u920
  2845  00F9AE                     u921:
  2846  00F9AE  EFDB  F07C         	goto	l1750
  2847  00F9B2                     u920:
  2848  00F9B2  EFF6  F07C         	goto	l102
  2849  00F9B6                     l1750:
  2850                           
  2851                           ;main.c: 255:         counter++;
  2852  00F9B6  2A10               	incf	subProgram1@counter^0,f,c
  2853  00F9B8                     
  2854                           ;main.c: 256:     } while (counter < 255);
  2855  00F9B8  2810               	incf	subProgram1@counter^0,w,c
  2856  00F9BA  A4D8               	btfss	status,2,c
  2857  00F9BC  EFE2  F07C         	goto	u931
  2858  00F9C0  EFE4  F07C         	goto	u930
  2859  00F9C4                     u931:
  2860  00F9C4  EFAD  F07C         	goto	l1738
  2861  00F9C8                     u930:
  2862  00F9C8                     
  2863                           ;main.c: 258:     lcd_cmd(0x01);
  2864  00F9C8  0E01               	movlw	1
  2865  00F9CA  ECDA  F078         	call	_lcd_cmd
  2866                           
  2867                           ;main.c: 259:     lcd_cmd(0x80);
  2868  00F9CE  0E80               	movlw	128
  2869  00F9D0  ECDA  F078         	call	_lcd_cmd
  2870  00F9D4                     
  2871                           ;main.c: 260:     lcd_str("Program 1 end");
  2872  00F9D4  0E9C               	movlw	low STR_3
  2873  00F9D6  6E03               	movwf	lcd_str@str^0,c
  2874  00F9D8  0EFF               	movlw	high STR_3
  2875  00F9DA  6E04               	movwf	(lcd_str@str+1)^0,c
  2876  00F9DC  ECA0  F079         	call	_lcd_str	;wreg free
  2877  00F9E0                     
  2878                           ;main.c: 261:     delay(200);
  2879  00F9E0  0E00               	movlw	0
  2880  00F9E2  6E02               	movwf	(delay@ms+1)^0,c
  2881  00F9E4  0EC8               	movlw	200
  2882  00F9E6  6E01               	movwf	delay@ms^0,c
  2883  00F9E8  EC56  F079         	call	_delay	;wreg free
  2884  00F9EC                     l102:
  2885  00F9EC  0012               	return		;funcret
  2886  00F9EE                     __end_of_subProgram1:
  2887                           	opt callstack 0
  2888                           
  2889 ;; *************** function _printMask *****************
  2890 ;; Defined at:
  2891 ;;		line 91 in file "main.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;  mask            2    0[COMRAM] PTR unsigned char 
  2894 ;;		 -> subProgram9@binBuffer(8), subProgram8@mask(8), subProgram7@binBuffer(8), subProgram6@binBuffer(8), 
  2895 ;;		 -> subProgram5@binBuffer(8), subProgram4@binBuffer(8), subProgram3@binBuffer(8), subProgram2@binBuffer(8), 
  2896 ;;		 -> subProgram1@binBuffer(8), 
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;  value           1    2[COMRAM] unsigned char 
  2899 ;; Return value:  Size  Location     Type
  2900 ;;                  1    wreg      void 
  2901 ;; Registers used:
  2902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2908 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;Total ram usage:        3 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; This function calls:
  2915 ;;		Nothing
  2916 ;; This function is called by:
  2917 ;;		_subProgram1
  2918 ;;		_subProgram2
  2919 ;;		_subProgram3
  2920 ;;		_subProgram4
  2921 ;;		_subProgram5
  2922 ;;		_subProgram6
  2923 ;;		_subProgram7
  2924 ;;		_subProgram8
  2925 ;;		_subProgram9
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           	psect	text18
  2930  00FB50                     __ptext18:
  2931                           	opt callstack 0
  2932  00FB50                     _printMask:
  2933                           	opt callstack 28
  2934  00FB50                     
  2935                           ;main.c: 91: void printMask(unsigned char * mask);main.c: 92: {;main.c: 93:     unsigned
      +                           char value = 0;
  2936  00FB50  0E00               	movlw	0
  2937  00FB52  6E03               	movwf	printMask@value^0,c
  2938  00FB54                     
  2939                           ;main.c: 95:     value += (mask[7] * 128);
  2940  00FB54  EE20 F007          	lfsr	2,7
  2941  00FB58  5001               	movf	printMask@mask^0,w,c
  2942  00FB5A  26D9               	addwf	fsr2l,f,c
  2943  00FB5C  5002               	movf	(printMask@mask+1)^0,w,c
  2944  00FB5E  22DA               	addwfc	fsr2h,f,c
  2945  00FB60  50DF               	movf	indf2,w,c
  2946  00FB62  0D80               	mullw	128
  2947  00FB64  50F3               	movf	243,w,c
  2948  00FB66  0800               	sublw	0
  2949  00FB68  0800               	sublw	0
  2950  00FB6A  0800               	sublw	0
  2951  00FB6C  0800               	sublw	0
  2952  00FB6E  0800               	sublw	0
  2953  00FB70  0800               	sublw	0
  2954  00FB72  0800               	sublw	0
  2955  00FB74  0800               	sublw	0
  2956  00FB76  0800               	sublw	0
  2957  00FB78  2603               	addwf	printMask@value^0,f,c
  2958  00FB7A                     
  2959                           ;main.c: 96:     value += (mask[6] * 64);
  2960  00FB7A  EE20 F006          	lfsr	2,6
  2961  00FB7E  5001               	movf	printMask@mask^0,w,c
  2962  00FB80  26D9               	addwf	fsr2l,f,c
  2963  00FB82  5002               	movf	(printMask@mask+1)^0,w,c
  2964  00FB84  22DA               	addwfc	fsr2h,f,c
  2965  00FB86  50DF               	movf	indf2,w,c
  2966  00FB88  0D40               	mullw	64
  2967  00FB8A  50F3               	movf	243,w,c
  2968  00FB8C  2603               	addwf	printMask@value^0,f,c
  2969  00FB8E                     
  2970                           ;main.c: 97:     value += (mask[5] * 32);
  2971  00FB8E  EE20 F005          	lfsr	2,5
  2972  00FB92  5001               	movf	printMask@mask^0,w,c
  2973  00FB94  26D9               	addwf	fsr2l,f,c
  2974  00FB96  5002               	movf	(printMask@mask+1)^0,w,c
  2975  00FB98  22DA               	addwfc	fsr2h,f,c
  2976  00FB9A  50DF               	movf	indf2,w,c
  2977  00FB9C  0D20               	mullw	32
  2978  00FB9E  50F3               	movf	243,w,c
  2979  00FBA0  2603               	addwf	printMask@value^0,f,c
  2980  00FBA2                     
  2981                           ;main.c: 98:     value += (mask[4] * 16);
  2982  00FBA2  EE20 F004          	lfsr	2,4
  2983  00FBA6  5001               	movf	printMask@mask^0,w,c
  2984  00FBA8  26D9               	addwf	fsr2l,f,c
  2985  00FBAA  5002               	movf	(printMask@mask+1)^0,w,c
  2986  00FBAC  22DA               	addwfc	fsr2h,f,c
  2987  00FBAE  50DF               	movf	indf2,w,c
  2988  00FBB0  0D10               	mullw	16
  2989  00FBB2  50F3               	movf	243,w,c
  2990  00FBB4  2603               	addwf	printMask@value^0,f,c
  2991  00FBB6                     
  2992                           ;main.c: 99:     value += (mask[3] * 8);
  2993  00FBB6  EE20 F003          	lfsr	2,3
  2994  00FBBA  5001               	movf	printMask@mask^0,w,c
  2995  00FBBC  26D9               	addwf	fsr2l,f,c
  2996  00FBBE  5002               	movf	(printMask@mask+1)^0,w,c
  2997  00FBC0  22DA               	addwfc	fsr2h,f,c
  2998  00FBC2  50DF               	movf	indf2,w,c
  2999  00FBC4  0D08               	mullw	8
  3000  00FBC6  50F3               	movf	243,w,c
  3001  00FBC8  2603               	addwf	printMask@value^0,f,c
  3002  00FBCA                     
  3003                           ;main.c: 100:     value += (mask[2] * 4);
  3004  00FBCA  EE20 F002          	lfsr	2,2
  3005  00FBCE  5001               	movf	printMask@mask^0,w,c
  3006  00FBD0  26D9               	addwf	fsr2l,f,c
  3007  00FBD2  5002               	movf	(printMask@mask+1)^0,w,c
  3008  00FBD4  22DA               	addwfc	fsr2h,f,c
  3009  00FBD6  50DF               	movf	indf2,w,c
  3010  00FBD8  0D04               	mullw	4
  3011  00FBDA  50F3               	movf	243,w,c
  3012  00FBDC  2603               	addwf	printMask@value^0,f,c
  3013  00FBDE                     
  3014                           ;main.c: 101:     value += (mask[1] * 2);
  3015  00FBDE  EE20 F001          	lfsr	2,1
  3016  00FBE2  5001               	movf	printMask@mask^0,w,c
  3017  00FBE4  26D9               	addwf	fsr2l,f,c
  3018  00FBE6  5002               	movf	(printMask@mask+1)^0,w,c
  3019  00FBE8  22DA               	addwfc	fsr2h,f,c
  3020  00FBEA  50DF               	movf	indf2,w,c
  3021  00FBEC  0D02               	mullw	2
  3022  00FBEE  50F3               	movf	243,w,c
  3023  00FBF0  2603               	addwf	printMask@value^0,f,c
  3024  00FBF2                     
  3025                           ;main.c: 102:     value += mask[0];
  3026  00FBF2  C001  FFD9         	movff	printMask@mask,fsr2l
  3027  00FBF6  C002  FFDA         	movff	printMask@mask+1,fsr2h
  3028  00FBFA  50DF               	movf	indf2,w,c
  3029  00FBFC  2603               	addwf	printMask@value^0,f,c
  3030  00FBFE                     
  3031                           ;main.c: 104:     PORTD = value;
  3032  00FBFE  C003  FF83         	movff	printMask@value,3971	;volatile
  3033  00FC02  0012               	return		;funcret
  3034  00FC04                     __end_of_printMask:
  3035                           	opt callstack 0
  3036                           
  3037 ;; *************** function _lcd_str *****************
  3038 ;; Defined at:
  3039 ;;		line 223 in file "main.c"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;  str             2    2[COMRAM] PTR const unsigned char 
  3042 ;;		 -> STR_17(16), STR_16(14), STR_15(16), STR_14(16), 
  3043 ;;		 -> STR_13(14), STR_12(16), STR_11(14), STR_10(16), 
  3044 ;;		 -> STR_9(14), STR_8(16), STR_7(14), STR_6(16), 
  3045 ;;		 -> STR_5(14), STR_4(16), STR_3(14), STR_2(16), 
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;  i               1    6[COMRAM] unsigned char 
  3048 ;; Return value:  Size  Location     Type
  3049 ;;                  1    wreg      void 
  3050 ;; Registers used:
  3051 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3052 ;; Tracked objects:
  3053 ;;		On entry : 0/0
  3054 ;;		On exit  : 0/0
  3055 ;;		Unchanged: 0/0
  3056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3057 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3061 ;;Total ram usage:        5 bytes
  3062 ;; Hardware stack levels used:    1
  3063 ;; Hardware stack levels required when called:    2
  3064 ;; This function calls:
  3065 ;;		_lcd_dat
  3066 ;; This function is called by:
  3067 ;;		_subProgram1
  3068 ;;		_subProgram2
  3069 ;;		_subProgram3
  3070 ;;		_subProgram4
  3071 ;;		_subProgram5
  3072 ;;		_subProgram6
  3073 ;;		_subProgram7
  3074 ;;		_subProgram8
  3075 ;;		_subProgram9
  3076 ;; This function uses a non-reentrant model
  3077 ;;
  3078                           
  3079                           	psect	text19
  3080  00F340                     __ptext19:
  3081                           	opt callstack 0
  3082  00F340                     _lcd_str:
  3083                           	opt callstack 26
  3084  00F340                     
  3085                           ;main.c: 223: void lcd_str(const char* str);main.c: 224: {;main.c: 225:  unsigned char i
      +                          =0;
  3086  00F340  0E00               	movlw	0
  3087  00F342  6E07               	movwf	lcd_str@i^0,c
  3088                           
  3089                           ;main.c: 227:  while(str[i] != 0 )
  3090  00F344  EFB3  F079         	goto	l1696
  3091  00F348                     l1692:
  3092                           
  3093                           ;main.c: 228:  {;main.c: 229:    lcd_dat(str[i]);
  3094  00F348  5007               	movf	lcd_str@i^0,w,c
  3095  00F34A  2403               	addwf	lcd_str@str^0,w,c
  3096  00F34C  6E05               	movwf	??_lcd_str^0,c
  3097  00F34E  0E00               	movlw	0
  3098  00F350  2004               	addwfc	(lcd_str@str+1)^0,w,c
  3099  00F352  6E06               	movwf	(??_lcd_str+1)^0,c
  3100  00F354  C005  FFF6         	movff	??_lcd_str,tblptrl
  3101  00F358  C006  FFF7         	movff	??_lcd_str+1,tblptrh
  3102  00F35C                     	if	0	;tblptru may be non-zero
  3103  00F35C                     	endif
  3104  00F35C                     	if	0	;tblptru may be non-zero
  3105  00F35C                     	endif
  3106  00F35C  0008               	tblrd		*
  3107  00F35E  50F5               	movf	tablat,w,c
  3108  00F360  ECE3  F078         	call	_lcd_dat
  3109  00F364                     
  3110                           ;main.c: 230:    i++;
  3111  00F364  2A07               	incf	lcd_str@i^0,f,c
  3112  00F366                     l1696:
  3113                           
  3114                           ;main.c: 227:  while(str[i] != 0 )
  3115  00F366  5007               	movf	lcd_str@i^0,w,c
  3116  00F368  2403               	addwf	lcd_str@str^0,w,c
  3117  00F36A  6E05               	movwf	??_lcd_str^0,c
  3118  00F36C  0E00               	movlw	0
  3119  00F36E  2004               	addwfc	(lcd_str@str+1)^0,w,c
  3120  00F370  6E06               	movwf	(??_lcd_str+1)^0,c
  3121  00F372  C005  FFF6         	movff	??_lcd_str,tblptrl
  3122  00F376  C006  FFF7         	movff	??_lcd_str+1,tblptrh
  3123  00F37A                     	if	0	;tblptru may be non-zero
  3124  00F37A                     	endif
  3125  00F37A                     	if	0	;tblptru may be non-zero
  3126  00F37A                     	endif
  3127  00F37A  0008               	tblrd		*
  3128  00F37C  50F5               	movf	tablat,w,c
  3129  00F37E  0900               	iorlw	0
  3130  00F380  A4D8               	btfss	status,2,c
  3131  00F382  EFC5  F079         	goto	u831
  3132  00F386  EFC7  F079         	goto	u830
  3133  00F38A                     u831:
  3134  00F38A  EFA4  F079         	goto	l1692
  3135  00F38E                     u830:
  3136  00F38E  0012               	return		;funcret
  3137  00F390                     __end_of_lcd_str:
  3138                           	opt callstack 0
  3139                           
  3140 ;; *************** function _lcd_dat *****************
  3141 ;; Defined at:
  3142 ;;		line 193 in file "main.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;  val             1    wreg     unsigned char 
  3145 ;; Auto vars:     Size  Location     Type
  3146 ;;  val             1    1[COMRAM] unsigned char 
  3147 ;; Return value:  Size  Location     Type
  3148 ;;                  1    wreg      void 
  3149 ;; Registers used:
  3150 ;;		wreg, status,2, cstack
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3157 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;Total ram usage:        1 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; Hardware stack levels required when called:    1
  3163 ;; This function calls:
  3164 ;;		_lcd_wr
  3165 ;; This function is called by:
  3166 ;;		_lcd_str
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           	psect	text20
  3171  00F1C6                     __ptext20:
  3172                           	opt callstack 0
  3173  00F1C6                     _lcd_dat:
  3174                           	opt callstack 26
  3175                           
  3176                           ;incstack = 0
  3177                           ;lcd_dat@val stored from wreg
  3178  00F1C6  6E02               	movwf	lcd_dat@val^0,c
  3179  00F1C8                     
  3180                           ;main.c: 193: void lcd_dat(unsigned char val);main.c: 194: {;main.c: 195:  PORTEbits.RE1
      +                          =1;
  3181  00F1C8  8284               	bsf	132,1,c	;volatile
  3182  00F1CA                     
  3183                           ;main.c: 196:         lcd_wr(val);
  3184  00F1CA  5002               	movf	lcd_dat@val^0,w,c
  3185  00F1CC  ECD1  F078         	call	_lcd_wr
  3186  00F1D0                     
  3187                           ;main.c: 197:         PORTEbits.RE2=1;
  3188  00F1D0  8484               	bsf	132,2,c	;volatile
  3189  00F1D2                     
  3190                           ;main.c: 199:         PORTEbits.RE1=0;
  3191  00F1D2  9284               	bcf	132,1,c	;volatile
  3192  00F1D4                     
  3193                           ;main.c: 201:  PORTEbits.RE1=1;
  3194  00F1D4  8284               	bsf	132,1,c	;volatile
  3195  00F1D6  0012               	return		;funcret
  3196  00F1D8                     __end_of_lcd_dat:
  3197                           	opt callstack 0
  3198                           
  3199 ;; *************** function _isProgramInterupted *****************
  3200 ;; Defined at:
  3201 ;;		line 600 in file "main.c"
  3202 ;; Parameters:    Size  Location     Type
  3203 ;;		None
  3204 ;; Auto vars:     Size  Location     Type
  3205 ;;  i               2    2[COMRAM] unsigned int 
  3206 ;; Return value:  Size  Location     Type
  3207 ;;                  2    0[COMRAM] int 
  3208 ;; Registers used:
  3209 ;;		wreg, status,2, status,0
  3210 ;; Tracked objects:
  3211 ;;		On entry : 0/0
  3212 ;;		On exit  : 0/0
  3213 ;;		Unchanged: 0/0
  3214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3215 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3216 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3218 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3219 ;;Total ram usage:        4 bytes
  3220 ;; Hardware stack levels used:    1
  3221 ;; This function calls:
  3222 ;;		Nothing
  3223 ;; This function is called by:
  3224 ;;		_subProgram1
  3225 ;;		_subProgram2
  3226 ;;		_subProgram3
  3227 ;;		_subProgram4
  3228 ;;		_subProgram5
  3229 ;;		_subProgram6
  3230 ;;		_subProgram7
  3231 ;;		_subProgram8
  3232 ;; This function uses a non-reentrant model
  3233 ;;
  3234                           
  3235                           	psect	text21
  3236  00F4E6                     __ptext21:
  3237                           	opt callstack 0
  3238  00F4E6                     _isProgramInterupted:
  3239                           	opt callstack 28
  3240  00F4E6                     
  3241                           ;main.c: 602:     unsigned int i = 6000;
  3242  00F4E6  0E17               	movlw	23
  3243  00F4E8  6E04               	movwf	(isProgramInterupted@i+1)^0,c
  3244  00F4EA  0E70               	movlw	112
  3245  00F4EC  6E03               	movwf	isProgramInterupted@i^0,c
  3246                           
  3247                           ;main.c: 604:     while(PORTBbits.RB4 && PORTBbits.RB3 && i > 0)
  3248  00F4EE  EF7C  F07A         	goto	l1702
  3249  00F4F2                     l1700:
  3250                           
  3251                           ;main.c: 605:     {;main.c: 606:         i--;
  3252  00F4F2  0603               	decf	isProgramInterupted@i^0,f,c
  3253  00F4F4  A0D8               	btfss	status,0,c
  3254  00F4F6  0604               	decf	(isProgramInterupted@i+1)^0,f,c
  3255  00F4F8                     l1702:
  3256                           
  3257                           ;main.c: 604:     while(PORTBbits.RB4 && PORTBbits.RB3 && i > 0)
  3258  00F4F8  A881               	btfss	129,4,c	;volatile
  3259  00F4FA  EF81  F07A         	goto	u841
  3260  00F4FE  EF83  F07A         	goto	u840
  3261  00F502                     u841:
  3262  00F502  EF93  F07A         	goto	l208
  3263  00F506                     u840:
  3264  00F506  A681               	btfss	129,3,c	;volatile
  3265  00F508  EF88  F07A         	goto	u851
  3266  00F50C  EF8A  F07A         	goto	u850
  3267  00F510                     u851:
  3268  00F510  EF93  F07A         	goto	l208
  3269  00F514                     u850:
  3270  00F514  5003               	movf	isProgramInterupted@i^0,w,c
  3271  00F516  1004               	iorwf	(isProgramInterupted@i+1)^0,w,c
  3272  00F518  A4D8               	btfss	status,2,c
  3273  00F51A  EF91  F07A         	goto	u861
  3274  00F51E  EF93  F07A         	goto	u860
  3275  00F522                     u861:
  3276  00F522  EF79  F07A         	goto	l1700
  3277  00F526                     u860:
  3278  00F526                     l208:
  3279                           
  3280                           ;main.c: 609:     if((PORTBbits.RB3 == 0) || (PORTBbits.RB4 == 0))
  3281  00F526  A681               	btfss	129,3,c	;volatile
  3282  00F528  EF98  F07A         	goto	u871
  3283  00F52C  EF9A  F07A         	goto	u870
  3284  00F530                     u871:
  3285  00F530  EFA1  F07A         	goto	l1710
  3286  00F534                     u870:
  3287  00F534  B881               	btfsc	129,4,c	;volatile
  3288  00F536  EF9F  F07A         	goto	u881
  3289  00F53A  EFA1  F07A         	goto	u880
  3290  00F53E                     u881:
  3291  00F53E  EFA7  F07A         	goto	l1714
  3292  00F542                     u880:
  3293  00F542                     l1710:
  3294                           
  3295                           ;main.c: 610:     {;main.c: 611:         return 1;
  3296  00F542  0E00               	movlw	0
  3297  00F544  6E02               	movwf	(?_isProgramInterupted+1)^0,c
  3298  00F546  0E01               	movlw	1
  3299  00F548  6E01               	movwf	?_isProgramInterupted^0,c
  3300  00F54A  EFAB  F07A         	goto	l212
  3301  00F54E                     l1714:
  3302                           
  3303                           ;main.c: 614:     return 0;
  3304  00F54E  0E00               	movlw	0
  3305  00F550  6E02               	movwf	(?_isProgramInterupted+1)^0,c
  3306  00F552  0E00               	movlw	0
  3307  00F554  6E01               	movwf	?_isProgramInterupted^0,c
  3308  00F556                     l212:
  3309  00F556  0012               	return		;funcret
  3310  00F558                     __end_of_isProgramInterupted:
  3311                           	opt callstack 0
  3312                           
  3313 ;; *************** function _intToBinary *****************
  3314 ;; Defined at:
  3315 ;;		line 81 in file "main.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;  buffor          2    0[COMRAM] PTR unsigned char 
  3318 ;;		 -> subProgram9@binBuffer(8), subProgram7@binBuffer(8), subProgram6@binBuffer(8), subProgram5@binBuffer(8), 
  3319 ;;		 -> subProgram4@binBuffer(8), subProgram3@binBuffer(8), subProgram2@binBuffer(8), subProgram1@binBuffer(8), 
  3320 ;;  value           1    2[COMRAM] unsigned char 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  i               2    5[COMRAM] short 
  3323 ;; Return value:  Size  Location     Type
  3324 ;;                  1    wreg      void 
  3325 ;; Registers used:
  3326 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3332 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3333 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3334 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3335 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3336 ;;Total ram usage:        7 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; This function calls:
  3339 ;;		Nothing
  3340 ;; This function is called by:
  3341 ;;		_subProgram1
  3342 ;;		_subProgram2
  3343 ;;		_subProgram3
  3344 ;;		_subProgram4
  3345 ;;		_subProgram5
  3346 ;;		_subProgram6
  3347 ;;		_subProgram7
  3348 ;;		_subProgram9
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           	psect	text22
  3353  00F2F4                     __ptext22:
  3354                           	opt callstack 0
  3355  00F2F4                     _intToBinary:
  3356                           	opt callstack 28
  3357  00F2F4                     
  3358                           ;main.c: 81: void intToBinary(unsigned char * buffor, unsigned char value);main.c: 82: {
      +                          ;main.c: 83:     short i = 7;
  3359  00F2F4  0E00               	movlw	0
  3360  00F2F6  6E07               	movwf	(intToBinary@i+1)^0,c
  3361  00F2F8  0E07               	movlw	7
  3362  00F2FA  6E06               	movwf	intToBinary@i^0,c
  3363                           
  3364                           ;main.c: 84:     while (i >= 0) {
  3365  00F2FC  EF98  F079         	goto	l1652
  3366  00F300                     l1648:
  3367                           
  3368                           ;main.c: 85:         buffor[i] = ((value >> i) & 1);
  3369  00F300  5006               	movf	intToBinary@i^0,w,c
  3370  00F302  2401               	addwf	intToBinary@buffor^0,w,c
  3371  00F304  6ED9               	movwf	fsr2l,c
  3372  00F306  5007               	movf	(intToBinary@i+1)^0,w,c
  3373  00F308  2002               	addwfc	(intToBinary@buffor+1)^0,w,c
  3374  00F30A  6EDA               	movwf	fsr2h,c
  3375  00F30C  C006  F004         	movff	intToBinary@i,??_intToBinary
  3376  00F310  C003  F005         	movff	intToBinary@value,??_intToBinary+1
  3377  00F314  2A04               	incf	??_intToBinary^0,f,c
  3378  00F316  EF8F  F079         	goto	u794
  3379  00F31A                     u795:
  3380  00F31A  90D8               	bcf	status,0,c
  3381  00F31C  3205               	rrcf	(??_intToBinary+1)^0,f,c
  3382  00F31E                     u794:
  3383  00F31E  2E04               	decfsz	??_intToBinary^0,f,c
  3384  00F320  EF8D  F079         	goto	u795
  3385  00F324  5005               	movf	(??_intToBinary+1)^0,w,c
  3386  00F326  0B01               	andlw	1
  3387  00F328  6EDF               	movwf	indf2,c
  3388  00F32A                     
  3389                           ;main.c: 86:         i--;
  3390  00F32A  0606               	decf	intToBinary@i^0,f,c
  3391  00F32C  A0D8               	btfss	status,0,c
  3392  00F32E  0607               	decf	(intToBinary@i+1)^0,f,c
  3393  00F330                     l1652:
  3394                           
  3395                           ;main.c: 84:     while (i >= 0) {
  3396  00F330  BE07               	btfsc	(intToBinary@i+1)^0,7,c
  3397  00F332  EF9F  F079         	goto	u800
  3398  00F336  EF9D  F079         	goto	u801
  3399  00F33A                     u801:
  3400  00F33A  EF80  F079         	goto	l1648
  3401  00F33E                     u800:
  3402  00F33E  0012               	return		;funcret
  3403  00F340                     __end_of_intToBinary:
  3404                           	opt callstack 0
  3405                           
  3406 ;; *************** function _lcd_init *****************
  3407 ;; Defined at:
  3408 ;;		line 204 in file "main.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;		None
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;		None
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  1    wreg      void 
  3415 ;; Registers used:
  3416 ;;		wreg, status,2, status,0, cstack
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3426 ;;Total ram usage:        0 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; Hardware stack levels required when called:    2
  3429 ;; This function calls:
  3430 ;;		_delay
  3431 ;;		_lcd_cmd
  3432 ;; This function is called by:
  3433 ;;		_main
  3434 ;; This function uses a non-reentrant model
  3435 ;;
  3436                           
  3437                           	psect	text23
  3438  00F48A                     __ptext23:
  3439                           	opt callstack 0
  3440  00F48A                     _lcd_init:
  3441                           	opt callstack 28
  3442  00F48A                     
  3443                           ;main.c: 206:  PORTEbits.RE1=0;
  3444  00F48A  9284               	bcf	132,1,c	;volatile
  3445                           
  3446                           ;main.c: 207:  PORTEbits.RE2=0;
  3447  00F48C  9484               	bcf	132,2,c	;volatile
  3448  00F48E                     
  3449                           ;main.c: 208:  delay(20);
  3450  00F48E  0E00               	movlw	0
  3451  00F490  6E02               	movwf	(delay@ms+1)^0,c
  3452  00F492  0E14               	movlw	20
  3453  00F494  6E01               	movwf	delay@ms^0,c
  3454  00F496  EC56  F079         	call	_delay	;wreg free
  3455  00F49A                     
  3456                           ;main.c: 209:  PORTEbits.RE1=1;
  3457  00F49A  8284               	bsf	132,1,c	;volatile
  3458  00F49C                     
  3459                           ;main.c: 211:  lcd_cmd(0x38);
  3460  00F49C  0E38               	movlw	56
  3461  00F49E  ECDA  F078         	call	_lcd_cmd
  3462  00F4A2                     
  3463                           ;main.c: 212:  delay(5);
  3464  00F4A2  0E00               	movlw	0
  3465  00F4A4  6E02               	movwf	(delay@ms+1)^0,c
  3466  00F4A6  0E05               	movlw	5
  3467  00F4A8  6E01               	movwf	delay@ms^0,c
  3468  00F4AA  EC56  F079         	call	_delay	;wreg free
  3469                           
  3470                           ;main.c: 213:  lcd_cmd(0x38);
  3471  00F4AE  0E38               	movlw	56
  3472  00F4B0  ECDA  F078         	call	_lcd_cmd
  3473  00F4B4                     
  3474                           ;main.c: 214:         delay(1);
  3475  00F4B4  0E00               	movlw	0
  3476  00F4B6  6E02               	movwf	(delay@ms+1)^0,c
  3477  00F4B8  0E01               	movlw	1
  3478  00F4BA  6E01               	movwf	delay@ms^0,c
  3479  00F4BC  EC56  F079         	call	_delay	;wreg free
  3480  00F4C0                     
  3481                           ;main.c: 215:  lcd_cmd(0x38);
  3482  00F4C0  0E38               	movlw	56
  3483  00F4C2  ECDA  F078         	call	_lcd_cmd
  3484  00F4C6                     
  3485                           ;main.c: 216:  lcd_cmd(0x08);
  3486  00F4C6  0E08               	movlw	8
  3487  00F4C8  ECDA  F078         	call	_lcd_cmd
  3488  00F4CC                     
  3489                           ;main.c: 217:  lcd_cmd(0x0F);
  3490  00F4CC  0E0F               	movlw	15
  3491  00F4CE  ECDA  F078         	call	_lcd_cmd
  3492  00F4D2                     
  3493                           ;main.c: 218:  lcd_cmd(0x01);
  3494  00F4D2  0E01               	movlw	1
  3495  00F4D4  ECDA  F078         	call	_lcd_cmd
  3496  00F4D8                     
  3497                           ;main.c: 219:  lcd_cmd(0x38);
  3498  00F4D8  0E38               	movlw	56
  3499  00F4DA  ECDA  F078         	call	_lcd_cmd
  3500  00F4DE                     
  3501                           ;main.c: 220:         lcd_cmd(0x80);
  3502  00F4DE  0E80               	movlw	128
  3503  00F4E0  ECDA  F078         	call	_lcd_cmd
  3504  00F4E4  0012               	return		;funcret
  3505  00F4E6                     __end_of_lcd_init:
  3506                           	opt callstack 0
  3507                           
  3508 ;; *************** function _lcd_cmd *****************
  3509 ;; Defined at:
  3510 ;;		line 182 in file "main.c"
  3511 ;; Parameters:    Size  Location     Type
  3512 ;;  val             1    wreg     unsigned char 
  3513 ;; Auto vars:     Size  Location     Type
  3514 ;;  val             1    1[COMRAM] unsigned char 
  3515 ;; Return value:  Size  Location     Type
  3516 ;;                  1    wreg      void 
  3517 ;; Registers used:
  3518 ;;		wreg, status,2, cstack
  3519 ;; Tracked objects:
  3520 ;;		On entry : 0/0
  3521 ;;		On exit  : 0/0
  3522 ;;		Unchanged: 0/0
  3523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3528 ;;Total ram usage:        1 bytes
  3529 ;; Hardware stack levels used:    1
  3530 ;; Hardware stack levels required when called:    1
  3531 ;; This function calls:
  3532 ;;		_lcd_wr
  3533 ;; This function is called by:
  3534 ;;		_lcd_init
  3535 ;;		_subProgram1
  3536 ;;		_subProgram2
  3537 ;;		_subProgram3
  3538 ;;		_subProgram4
  3539 ;;		_subProgram5
  3540 ;;		_subProgram6
  3541 ;;		_subProgram7
  3542 ;;		_subProgram8
  3543 ;;		_subProgram9
  3544 ;;		_main
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           	psect	text24
  3549  00F1B4                     __ptext24:
  3550                           	opt callstack 0
  3551  00F1B4                     _lcd_cmd:
  3552                           	opt callstack 27
  3553                           
  3554                           ;incstack = 0
  3555                           ;lcd_cmd@val stored from wreg
  3556  00F1B4  6E02               	movwf	lcd_cmd@val^0,c
  3557  00F1B6                     
  3558                           ;main.c: 182: void lcd_cmd(unsigned char val);main.c: 183: {;main.c: 184:  PORTEbits.RE1
      +                          =1;
  3559  00F1B6  8284               	bsf	132,1,c	;volatile
  3560  00F1B8                     
  3561                           ;main.c: 185:         lcd_wr(val);
  3562  00F1B8  5002               	movf	lcd_cmd@val^0,w,c
  3563  00F1BA  ECD1  F078         	call	_lcd_wr
  3564  00F1BE                     
  3565                           ;main.c: 186:         PORTEbits.RE2=0;
  3566  00F1BE  9484               	bcf	132,2,c	;volatile
  3567  00F1C0                     
  3568                           ;main.c: 188:         PORTEbits.RE1=0;
  3569  00F1C0  9284               	bcf	132,1,c	;volatile
  3570  00F1C2                     
  3571                           ;main.c: 190:  PORTEbits.RE1=1;
  3572  00F1C2  8284               	bsf	132,1,c	;volatile
  3573  00F1C4  0012               	return		;funcret
  3574  00F1C6                     __end_of_lcd_cmd:
  3575                           	opt callstack 0
  3576                           
  3577 ;; *************** function _lcd_wr *****************
  3578 ;; Defined at:
  3579 ;;		line 177 in file "main.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;  val             1    wreg     unsigned char 
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;  val             1    0[COMRAM] unsigned char 
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  1    wreg      void 
  3586 ;; Registers used:
  3587 ;;		wreg
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3594 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3596 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3597 ;;Total ram usage:        1 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; This function calls:
  3600 ;;		Nothing
  3601 ;; This function is called by:
  3602 ;;		_lcd_cmd
  3603 ;;		_lcd_dat
  3604 ;; This function uses a non-reentrant model
  3605 ;;
  3606                           
  3607                           	psect	text25
  3608  00F1A2                     __ptext25:
  3609                           	opt callstack 0
  3610  00F1A2                     _lcd_wr:
  3611                           	opt callstack 26
  3612                           
  3613                           ;incstack = 0
  3614                           ;lcd_wr@val stored from wreg
  3615  00F1A2  6E01               	movwf	lcd_wr@val^0,c
  3616  00F1A4                     
  3617                           ;main.c: 177: void lcd_wr(unsigned char val);main.c: 178: {;main.c: 179:   PORTD=val;
  3618  00F1A4  C001  FF83         	movff	lcd_wr@val,3971	;volatile
  3619  00F1A8  0012               	return		;funcret
  3620  00F1AA                     __end_of_lcd_wr:
  3621                           	opt callstack 0
  3622                           
  3623 ;; *************** function _delay *****************
  3624 ;; Defined at:
  3625 ;;		line 143 in file "main.c"
  3626 ;; Parameters:    Size  Location     Type
  3627 ;;  ms              2    0[COMRAM] unsigned int 
  3628 ;; Auto vars:     Size  Location     Type
  3629 ;;  i               2    2[COMRAM] unsigned int 
  3630 ;;  j               1    4[COMRAM] unsigned char 
  3631 ;; Return value:  Size  Location     Type
  3632 ;;                  1    wreg      void 
  3633 ;; Registers used:
  3634 ;;		wreg, status,2, status,0
  3635 ;; Tracked objects:
  3636 ;;		On entry : 0/0
  3637 ;;		On exit  : 0/0
  3638 ;;		Unchanged: 0/0
  3639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3640 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3641 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3643 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3644 ;;Total ram usage:        5 bytes
  3645 ;; Hardware stack levels used:    1
  3646 ;; This function calls:
  3647 ;;		Nothing
  3648 ;; This function is called by:
  3649 ;;		_lcd_init
  3650 ;;		_subProgram1
  3651 ;;		_subProgram2
  3652 ;;		_subProgram3
  3653 ;;		_subProgram4
  3654 ;;		_subProgram5
  3655 ;;		_subProgram6
  3656 ;;		_subProgram7
  3657 ;;		_subProgram8
  3658 ;;		_subProgram9
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661                           
  3662                           	psect	text26
  3663  00F2AC                     __ptext26:
  3664                           	opt callstack 0
  3665  00F2AC                     _delay:
  3666                           	opt callstack 28
  3667  00F2AC                     
  3668                           ;main.c: 143: void delay(unsigned int ms);main.c: 144: {;main.c: 145:     unsigned int i
      +                          ;;main.c: 146:     unsigned char j;;main.c: 148:  for (i =0; i< ms; i++)
  3669  00F2AC  0E00               	movlw	0
  3670  00F2AE  6E04               	movwf	(delay@i+1)^0,c
  3671  00F2B0  0E00               	movlw	0
  3672  00F2B2  6E03               	movwf	delay@i^0,c
  3673  00F2B4  EF6E  F079         	goto	l1688
  3674  00F2B8                     l1676:
  3675                           
  3676                           ;main.c: 149:  {;main.c: 151:   for (j =0 ; j < 200; j++)
  3677  00F2B8  0E00               	movlw	0
  3678  00F2BA  6E05               	movwf	delay@j^0,c
  3679  00F2BC                     l65:
  3680                           
  3681                           ;main.c: 152:    {;main.c: 153:       __nop();
  3682  00F2BC  F000               	nop	
  3683                           
  3684                           ;main.c: 154:       __nop();
  3685  00F2BE  F000               	nop	
  3686                           
  3687                           ;main.c: 155:       __nop();
  3688  00F2C0  F000               	nop	
  3689                           
  3690                           ;main.c: 156:       __nop();
  3691  00F2C2  F000               	nop	
  3692                           
  3693                           ;main.c: 157:       __nop();
  3694  00F2C4  F000               	nop	
  3695  00F2C6                     
  3696                           ;main.c: 158:    }
  3697  00F2C6  2A05               	incf	delay@j^0,f,c
  3698  00F2C8  0EC7               	movlw	199
  3699  00F2CA  6405               	cpfsgt	delay@j^0,c
  3700  00F2CC  EF6A  F079         	goto	u811
  3701  00F2D0  EF6C  F079         	goto	u810
  3702  00F2D4                     u811:
  3703  00F2D4  EF5E  F079         	goto	l65
  3704  00F2D8                     u810:
  3705  00F2D8                     
  3706                           ;main.c: 159:  }
  3707  00F2D8  4A03               	infsnz	delay@i^0,f,c
  3708  00F2DA  2A04               	incf	(delay@i+1)^0,f,c
  3709  00F2DC                     l1688:
  3710  00F2DC  5001               	movf	delay@ms^0,w,c
  3711  00F2DE  5C03               	subwf	delay@i^0,w,c
  3712  00F2E0  5002               	movf	(delay@ms+1)^0,w,c
  3713  00F2E2  5804               	subwfb	(delay@i+1)^0,w,c
  3714  00F2E4  A0D8               	btfss	status,0,c
  3715  00F2E6  EF77  F079         	goto	u821
  3716  00F2EA  EF79  F079         	goto	u820
  3717  00F2EE                     u821:
  3718  00F2EE  EF5C  F079         	goto	l1676
  3719  00F2F2                     u820:
  3720  00F2F2  0012               	return		;funcret
  3721  00F2F4                     __end_of_delay:
  3722                           	opt callstack 0
  3723                           
  3724 ;; *************** function _changeProgram *****************
  3725 ;; Defined at:
  3726 ;;		line 617 in file "main.c"
  3727 ;; Parameters:    Size  Location     Type
  3728 ;;  program         2    0[COMRAM] PTR unsigned int 
  3729 ;;		 -> main@program(2), 
  3730 ;; Auto vars:     Size  Location     Type
  3731 ;;  i               2    4[COMRAM] unsigned int 
  3732 ;; Return value:  Size  Location     Type
  3733 ;;                  1    wreg      void 
  3734 ;; Registers used:
  3735 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3736 ;; Tracked objects:
  3737 ;;		On entry : 0/0
  3738 ;;		On exit  : 0/0
  3739 ;;		Unchanged: 0/0
  3740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3741 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3742 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;Total ram usage:        6 bytes
  3746 ;; Hardware stack levels used:    1
  3747 ;; This function calls:
  3748 ;;		Nothing
  3749 ;; This function is called by:
  3750 ;;		_main
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754                           	psect	text27
  3755  00FCC8                     __ptext27:
  3756                           	opt callstack 0
  3757  00FCC8                     _changeProgram:
  3758                           	opt callstack 30
  3759  00FCC8                     
  3760                           ;main.c: 617: void changeProgram(unsigned int * program);main.c: 618: {;main.c: 619:    
      +                           unsigned int i = 6000;
  3761  00FCC8  0E17               	movlw	23
  3762  00FCCA  6E06               	movwf	(changeProgram@i+1)^0,c
  3763  00FCCC  0E70               	movlw	112
  3764  00FCCE  6E05               	movwf	changeProgram@i^0,c
  3765                           
  3766                           ;main.c: 621:     while(PORTBbits.RB4 && PORTBbits.RB3 && i > 0)
  3767  00FCD0  EF6D  F07E         	goto	l2068
  3768  00FCD4                     l2066:
  3769                           
  3770                           ;main.c: 622:     {;main.c: 623:         i--;
  3771  00FCD4  0605               	decf	changeProgram@i^0,f,c
  3772  00FCD6  A0D8               	btfss	status,0,c
  3773  00FCD8  0606               	decf	(changeProgram@i+1)^0,f,c
  3774  00FCDA                     l2068:
  3775                           
  3776                           ;main.c: 621:     while(PORTBbits.RB4 && PORTBbits.RB3 && i > 0)
  3777  00FCDA  A881               	btfss	129,4,c	;volatile
  3778  00FCDC  EF72  F07E         	goto	u1171
  3779  00FCE0  EF74  F07E         	goto	u1170
  3780  00FCE4                     u1171:
  3781  00FCE4  EF84  F07E         	goto	l219
  3782  00FCE8                     u1170:
  3783  00FCE8  A681               	btfss	129,3,c	;volatile
  3784  00FCEA  EF79  F07E         	goto	u1181
  3785  00FCEE  EF7B  F07E         	goto	u1180
  3786  00FCF2                     u1181:
  3787  00FCF2  EF84  F07E         	goto	l219
  3788  00FCF6                     u1180:
  3789  00FCF6  5005               	movf	changeProgram@i^0,w,c
  3790  00FCF8  1006               	iorwf	(changeProgram@i+1)^0,w,c
  3791  00FCFA  A4D8               	btfss	status,2,c
  3792  00FCFC  EF82  F07E         	goto	u1191
  3793  00FD00  EF84  F07E         	goto	u1190
  3794  00FD04                     u1191:
  3795  00FD04  EF6A  F07E         	goto	l2066
  3796  00FD08                     u1190:
  3797  00FD08                     l219:
  3798                           
  3799                           ;main.c: 626:     if(PORTBbits.RB3 == 0)
  3800  00FD08  B681               	btfsc	129,3,c	;volatile
  3801  00FD0A  EF89  F07E         	goto	u1201
  3802  00FD0E  EF8B  F07E         	goto	u1200
  3803  00FD12                     u1201:
  3804  00FD12  EFAE  F07E         	goto	l220
  3805  00FD16                     u1200:
  3806  00FD16                     
  3807                           ;main.c: 627:     {;main.c: 628:         if (*program < 9) {
  3808  00FD16  C001  FFD9         	movff	changeProgram@program,fsr2l
  3809  00FD1A  C002  FFDA         	movff	changeProgram@program+1,fsr2h
  3810  00FD1E  0E01               	movlw	1
  3811  00FD20  50DB               	movf	plusw2,w,c
  3812  00FD22  E107               	bnz	u1211
  3813  00FD24  0E09               	movlw	9
  3814  00FD26  5CDE               	subwf	postinc2,w,c
  3815  00FD28  B0D8               	btfsc	status,0,c
  3816  00FD2A  EF99  F07E         	goto	u1211
  3817  00FD2E  EF9B  F07E         	goto	u1210
  3818  00FD32                     u1211:
  3819  00FD32  EFA4  F07E         	goto	l2078
  3820  00FD36                     u1210:
  3821  00FD36                     
  3822                           ;main.c: 629:             (*program)++;
  3823  00FD36  C001  FFD9         	movff	changeProgram@program,fsr2l
  3824  00FD3A  C002  FFDA         	movff	changeProgram@program+1,fsr2h
  3825  00FD3E  2ADE               	incf	postinc2,f,c
  3826  00FD40  0E00               	movlw	0
  3827  00FD42  22DD               	addwfc	postdec2,f,c
  3828                           
  3829                           ;main.c: 630:         } else {
  3830  00FD44  EFD6  F07E         	goto	l227
  3831  00FD48                     l2078:
  3832                           
  3833                           ;main.c: 631:             *program = 1;
  3834  00FD48  C001  FFD9         	movff	changeProgram@program,fsr2l
  3835  00FD4C  C002  FFDA         	movff	changeProgram@program+1,fsr2h
  3836  00FD50  0E01               	movlw	1
  3837  00FD52  6EDE               	movwf	postinc2,c
  3838  00FD54  0E00               	movlw	0
  3839  00FD56  6EDD               	movwf	postdec2,c
  3840  00FD58  EFD6  F07E         	goto	l227
  3841  00FD5C                     l220:
  3842  00FD5C  B881               	btfsc	129,4,c	;volatile
  3843  00FD5E  EFB3  F07E         	goto	u1221
  3844  00FD62  EFB5  F07E         	goto	u1220
  3845  00FD66                     u1221:
  3846  00FD66  EFD6  F07E         	goto	l227
  3847  00FD6A                     u1220:
  3848  00FD6A                     
  3849                           ;main.c: 635:     {;main.c: 636:         if (*program > 1) {
  3850  00FD6A  C001  FFD9         	movff	changeProgram@program,fsr2l
  3851  00FD6E  C002  FFDA         	movff	changeProgram@program+1,fsr2h
  3852  00FD72  0E01               	movlw	1
  3853  00FD74  50DB               	movf	plusw2,w,c
  3854  00FD76  E109               	bnz	u1230
  3855  00FD78  0E02               	movlw	2
  3856  00FD7A  5CDE               	subwf	postinc2,w,c
  3857  00FD7C  A0D8               	btfss	status,0,c
  3858  00FD7E  EFC3  F07E         	goto	u1231
  3859  00FD82  EFC5  F07E         	goto	u1230
  3860  00FD86                     u1231:
  3861  00FD86  EFCE  F07E         	goto	l2084
  3862  00FD8A                     u1230:
  3863  00FD8A                     
  3864                           ;main.c: 637:             (*program)--;
  3865  00FD8A  C001  FFD9         	movff	changeProgram@program,fsr2l
  3866  00FD8E  C002  FFDA         	movff	changeProgram@program+1,fsr2h
  3867  00FD92  06DE               	decf	postinc2,f,c
  3868  00FD94  0E00               	movlw	0
  3869  00FD96  5ADD               	subwfb	postdec2,f,c
  3870                           
  3871                           ;main.c: 638:         } else {
  3872  00FD98  EFD6  F07E         	goto	l227
  3873  00FD9C                     l2084:
  3874                           
  3875                           ;main.c: 639:             *program = 9;
  3876  00FD9C  C001  FFD9         	movff	changeProgram@program,fsr2l
  3877  00FDA0  C002  FFDA         	movff	changeProgram@program+1,fsr2h
  3878  00FDA4  0E09               	movlw	9
  3879  00FDA6  6EDE               	movwf	postinc2,c
  3880  00FDA8  0E00               	movlw	0
  3881  00FDAA  6EDD               	movwf	postdec2,c
  3882  00FDAC                     l227:
  3883  00FDAC  0012               	return		;funcret
  3884  00FDAE                     __end_of_changeProgram:
  3885                           	opt callstack 0
  3886                           
  3887                           	psect	rparam
  3888  0000                     tosu	equ	0xFFF
  3889                           tosh	equ	0xFFE
  3890                           tosl	equ	0xFFD
  3891                           stkptr	equ	0xFFC
  3892                           pclatu	equ	0xFFB
  3893                           pclath	equ	0xFFA
  3894                           pcl	equ	0xFF9
  3895                           tblptru	equ	0xFF8
  3896                           tblptrh	equ	0xFF7
  3897                           tblptrl	equ	0xFF6
  3898                           tablat	equ	0xFF5
  3899                           prodh	equ	0xFF4
  3900                           prodl	equ	0xFF3
  3901                           indf0	equ	0xFEF
  3902                           postinc0	equ	0xFEE
  3903                           postdec0	equ	0xFED
  3904                           preinc0	equ	0xFEC
  3905                           plusw0	equ	0xFEB
  3906                           fsr0h	equ	0xFEA
  3907                           fsr0l	equ	0xFE9
  3908                           wreg	equ	0xFE8
  3909                           indf1	equ	0xFE7
  3910                           postinc1	equ	0xFE6
  3911                           postdec1	equ	0xFE5
  3912                           preinc1	equ	0xFE4
  3913                           plusw1	equ	0xFE3
  3914                           fsr1h	equ	0xFE2
  3915                           fsr1l	equ	0xFE1
  3916                           bsr	equ	0xFE0
  3917                           indf2	equ	0xFDF
  3918                           postinc2	equ	0xFDE
  3919                           postdec2	equ	0xFDD
  3920                           preinc2	equ	0xFDC
  3921                           plusw2	equ	0xFDB
  3922                           fsr2h	equ	0xFDA
  3923                           fsr2l	equ	0xFD9
  3924                           status	equ	0xFD8


Data Sizes:
    Strings     259
    Constant    0
    Data        0
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     27      42
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    changeProgram@program	PTR unsigned int  size(2) Largest target is 2
		 -> main@program(COMRAM[2]), 

    clearMaskFromNthPosition@mask	PTR unsigned char  size(2) Largest target is 8
		 -> subProgram8@mask(COMRAM[8]), 

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_17(CODE[16]), STR_16(CODE[14]), STR_15(CODE[16]), STR_14(CODE[16]), 
		 -> STR_13(CODE[14]), STR_12(CODE[16]), STR_11(CODE[14]), STR_10(CODE[16]), 
		 -> STR_9(CODE[14]), STR_8(CODE[16]), STR_7(CODE[14]), STR_6(CODE[16]), 
		 -> STR_5(CODE[14]), STR_4(CODE[16]), STR_3(CODE[14]), STR_2(CODE[16]), 

    sp__cprog_itos	PTR unsigned char  size(2) Largest target is 0

    sp__cprog_strrev	PTR unsigned char  size(2) Largest target is 0

    printMask@mask	PTR unsigned char  size(2) Largest target is 8
		 -> subProgram9@binBuffer(COMRAM[8]), subProgram8@mask(COMRAM[8]), subProgram7@binBuffer(COMRAM[8]), subProgram6@binBuffer(COMRAM[8]), 
		 -> subProgram5@binBuffer(COMRAM[8]), subProgram4@binBuffer(COMRAM[8]), subProgram3@binBuffer(COMRAM[8]), subProgram2@binBuffer(COMRAM[8]), 
		 -> subProgram1@binBuffer(COMRAM[8]), 

    intToBinary@buffor	PTR unsigned char  size(2) Largest target is 8
		 -> subProgram9@binBuffer(COMRAM[8]), subProgram7@binBuffer(COMRAM[8]), subProgram6@binBuffer(COMRAM[8]), subProgram5@binBuffer(COMRAM[8]), 
		 -> subProgram4@binBuffer(COMRAM[8]), subProgram3@binBuffer(COMRAM[8]), subProgram2@binBuffer(COMRAM[8]), subProgram1@binBuffer(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_runSubProgram
    _runSubProgram->_subProgram5
    _runSubProgram->_subProgram6
    _subProgram9->_getGeneratedValue
    _subProgram9->_intToBinary
    _subProgram9->_lcd_str
    _subProgram8->_lcd_str
    _subProgram7->_intToBinary
    _subProgram7->_lcd_str
    _subProgram6->_convertIntoToBCD
    _subProgram5->_convertIntoToBCD
    _convertIntoToBCD->___awdiv
    _subProgram4->_intToBinary
    _subProgram4->_lcd_str
    _subProgram3->_intToBinary
    _subProgram3->_lcd_str
    _subProgram2->_intToBinary
    _subProgram2->_lcd_str
    _subProgram1->_intToBinary
    _subProgram1->_lcd_str
    _lcd_str->_lcd_dat
    _lcd_dat->_lcd_wr
    _lcd_init->_delay
    _lcd_cmd->_lcd_wr

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   48242
                                             25 COMRAM     2     2      0
                      _changeProgram
                            _lcd_cmd
                           _lcd_init
                      _runSubProgram
 ---------------------------------------------------------------------------------
 (1) _runSubProgram                                        4     2      2   46663
                                             21 COMRAM     4     2      2
                        _subProgram1
                        _subProgram2
                        _subProgram3
                        _subProgram4
                        _subProgram5
                        _subProgram6
                        _subProgram7
                        _subProgram8
                        _subProgram9
 ---------------------------------------------------------------------------------
 (2) _subProgram9                                          9     9      0    5082
                                              7 COMRAM     9     9      0
                              _delay
                  _getGeneratedValue
                        _intToBinary
                            _lcd_cmd
                            _lcd_str
                          _printMask
 ---------------------------------------------------------------------------------
 (3) _getGeneratedValue                                    7     7      0     165
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (2) _subProgram8                                         13    13      0    4160
                                              7 COMRAM    13    13      0
           _clearMaskFromNthPosition
                              _delay
                _isProgramInterupted
                            _lcd_cmd
                            _lcd_str
                          _printMask
 ---------------------------------------------------------------------------------
 (3) _clearMaskFromNthPosition                             6     2      4     264
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _subProgram7                                         10    10      0    5025
                                              7 COMRAM    10    10      0
                              _delay
                        _intToBinary
                _isProgramInterupted
                            _lcd_cmd
                            _lcd_str
                          _nextSnake
                          _printMask
 ---------------------------------------------------------------------------------
 (3) _nextSnake                                            2     2      0      60
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _subProgram6                                         10    10      0    6213
                                             11 COMRAM    10    10      0
                   _convertIntoToBCD
                              _delay
                        _intToBinary
                _isProgramInterupted
                            _lcd_cmd
                            _lcd_str
                          _printMask
 ---------------------------------------------------------------------------------
 (2) _subProgram5                                         10    10      0    6213
                                             11 COMRAM    10    10      0
                   _convertIntoToBCD
                              _delay
                        _intToBinary
                _isProgramInterupted
                            _lcd_cmd
                            _lcd_str
                          _printMask
 ---------------------------------------------------------------------------------
 (3) _convertIntoToBCD                                     3     3      0    1248
                                              8 COMRAM     3     3      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     600
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     604
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _subProgram4                                         10    10      0    4995
                                              7 COMRAM    10    10      0
             _convertValueToGrayCode
                              _delay
                        _intToBinary
                _isProgramInterupted
                            _lcd_cmd
                            _lcd_str
                          _printMask
 ---------------------------------------------------------------------------------
 (2) _subProgram3                                         10    10      0    4995
                                              7 COMRAM    10    10      0
             _convertValueToGrayCode
                              _delay
                        _intToBinary
                _isProgramInterupted
                            _lcd_cmd
                            _lcd_str
                          _printMask
 ---------------------------------------------------------------------------------
 (3) _convertValueToGrayCode                               1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _subProgram2                                          9     9      0    4941
                                              7 COMRAM     9     9      0
                              _delay
                        _intToBinary
                _isProgramInterupted
                            _lcd_cmd
                            _lcd_str
                          _printMask
 ---------------------------------------------------------------------------------
 (2) _subProgram1                                          9     9      0    4941
                                              7 COMRAM     9     9      0
                              _delay
                        _intToBinary
                _isProgramInterupted
                            _lcd_cmd
                            _lcd_str
                          _printMask
 ---------------------------------------------------------------------------------
 (3) _printMask                                            3     1      2     891
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _lcd_str                                              5     3      2    1336
                                              2 COMRAM     5     3      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (4) _lcd_dat                                              1     1      0      30
                                              1 COMRAM     1     1      0
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _isProgramInterupted                                  4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _intToBinary                                          7     4      3    1328
                                              0 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    1262
                              _delay
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              1     1      0      30
                                              1 COMRAM     1     1      0
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (5) _lcd_wr                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _delay                                                5     3      2    1232
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _changeProgram                                        6     4      2     232
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _changeProgram
   _lcd_cmd
     _lcd_wr
   _lcd_init
     _delay
     _lcd_cmd
       _lcd_wr
   _runSubProgram
     _subProgram1
       _delay
       _intToBinary
       _isProgramInterupted
       _lcd_cmd
         _lcd_wr
       _lcd_str
         _lcd_dat
           _lcd_wr
       _printMask
     _subProgram2
       _delay
       _intToBinary
       _isProgramInterupted
       _lcd_cmd
         _lcd_wr
       _lcd_str
         _lcd_dat
           _lcd_wr
       _printMask
     _subProgram3
       _convertValueToGrayCode
       _delay
       _intToBinary
       _isProgramInterupted
       _lcd_cmd
         _lcd_wr
       _lcd_str
         _lcd_dat
           _lcd_wr
       _printMask
     _subProgram4
       _convertValueToGrayCode
       _delay
       _intToBinary
       _isProgramInterupted
       _lcd_cmd
         _lcd_wr
       _lcd_str
         _lcd_dat
           _lcd_wr
       _printMask
     _subProgram5
       _convertIntoToBCD
         ___awdiv
         ___awmod
       _delay
       _intToBinary
       _isProgramInterupted
       _lcd_cmd
         _lcd_wr
       _lcd_str
         _lcd_dat
           _lcd_wr
       _printMask
     _subProgram6
       _convertIntoToBCD
         ___awdiv
         ___awmod
       _delay
       _intToBinary
       _isProgramInterupted
       _lcd_cmd
         _lcd_wr
       _lcd_str
         _lcd_dat
           _lcd_wr
       _printMask
     _subProgram7
       _delay
       _intToBinary
       _isProgramInterupted
       _lcd_cmd
         _lcd_wr
       _lcd_str
         _lcd_dat
           _lcd_wr
       _nextSnake
       _printMask
     _subProgram8
       _clearMaskFromNthPosition
       _delay
       _isProgramInterupted
       _lcd_cmd
         _lcd_wr
       _lcd_str
         _lcd_dat
           _lcd_wr
       _printMask
     _subProgram9
       _delay
       _getGeneratedValue
       _intToBinary
       _lcd_cmd
         _lcd_wr
       _lcd_str
         _lcd_dat
           _lcd_wr
       _printMask

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1B      2A       1       33.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2A      34        0.0%
DATA                 0      0      2A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Jun  6 03:14:11 2020

                               l42 F33E                                 l45 FC02  
                               l65 F2BC                                 l82 F1A8  
                               l91 F4E4                                 l68 F2F2  
                               l85 F1C4                                 l88 F1D6  
                               l97 F38E                       ___awdiv@sign 0006  
                    _runSubProgram FA9E                        __CFG_BORV$3 000000  
             subProgram9@binBuffer 0008                       __CFG_CP0$OFF 000000  
                     __CFG_CP1$OFF 000000                       __CFG_CP2$OFF 000000  
                     __CFG_CP3$OFF 000000                       subProgram8@i 0013  
                     subProgram8@j 0011                                l102 F9EC  
                              l201 FB4E                                l114 F1B2  
                              l131 F222                                l220 FD5C  
                              l212 F556                                l109 F93C  
                              l126 F68A                                l119 F736  
                              l143 F88E                                l208 F526  
                              l136 F7E2                                l153 F488  
                              l227 FDAC                                l219 FD08  
                              l149 F46A                                l181 F2AA  
                              l158 F5E0                                l166 F266  
                              l174 FEF8                                l475 FCC6  
                              l488 FA9C                                l930 F1D0  
                              l924 F1A4                                l932 F1D2  
                              l934 F1D4                                l926 F1C8  
                              l928 F1CA                       __CFG_CPB$OFF 000000  
                              u230 F44C                                u231 F448  
                              u240 F466                                u241 F462  
                              u250 F47A                                u251 F476  
                     __CFG_CPD$OFF 000000                                u700 FC74  
                              u701 FC70                                u710 FC90  
                              u711 FC8C                                u800 F33E  
                              u720 FCB6                                u801 F33A  
                              u721 FCB2                                u810 F2D8  
                              u730 FA00                                u811 F2D4  
                              u731 F9FC                                u820 F2F2  
                              u740 FA1A                                u900 F266  
                              u821 F2EE                                u741 FA16  
                              u901 F262                                u830 F38E  
                              u910 F98C                                u670 FC16  
                              u750 FA34                                u831 F38A  
                              u911 F988                                u671 FC12  
                              u751 FA30                                u840 F506  
                              u920 F9B2                                u680 FC30  
                              u760 FA52                                u841 F502  
                              u921 F9AE                                u681 FC2C  
                              u761 FA4E                                u850 F514  
                              u930 F9C8                                u690 FC56  
                              u770 FA68                                u851 F510  
                              u931 F9C4                                u691 FC52  
                              u771 FA64                                u860 F526  
                              u940 F8DC                                u780 FA8C  
                              u861 F522                                u941 F8D8  
                              u781 FA88                                u870 F534  
                              u950 F902                                u871 F530  
                              u951 F8FE                                u880 F542  
                              u960 F918                                u881 F53E  
                              u961 F914                                u794 F31E  
                              u970 F6E2                                u890 F23E  
                              u795 F31A                                u971 F6DE  
                              u891 F23A                                u980 F708  
                              u981 F704                                u990 F71E  
                              u991 F71A                       ___awmod@sign 0006  
                              wreg 000FE8                       __CFG_LVP$OFF 000000  
                    printMask@mask 0001                       __CFG_WDT$OFF 000000  
                             l1110 F44C                               l1120 F486  
                             l1112 F454                               l2000 F39C  
                             l1114 F466                               l1106 F436  
                             l2010 F3D0                               l2002 F3A8  
                             l1060 F1B6                               l2020 F4A2  
                             l2012 F48A                               l1116 F47A  
                             l1108 F43A                               l2004 F3AC  
                             l1062 F1B8                               l2030 F4D2  
                             l2022 F4B4                               l2014 F48E  
                             l1118 F482                               l1134 F26A  
                             l2006 F3BC                               l2110 F402  
                             l1064 F1BE                               l2032 F4D8  
                             l2024 F4C0                               l2016 F49A  
                             l2008 F3C8                               l2040 FAAA  
                             l2112 F406                               l1066 F1C0  
                             l2034 F4DE                               l2026 F4C6  
                             l2018 F49C                               l2050 FAD2  
                             l2042 FAB2                               l2114 F40C  
                             l1068 F1C2                               l2028 F4CC  
                             l2124 FB00                               l2052 FADA  
                             l2044 FABA                               l2036 FA9E  
                             l2116 F414                               l2108 F3E2  
                             l2070 FCE8                               l2054 FAE2  
                             l2046 FAC2                               l2038 FAA2  
                             l2118 F420                               l2080 FD6A  
                             l2072 FCF6                               l2064 FCC8  
                             l1600 FCA0                               l2048 FACA  
                             l2082 FD8A                               l2074 FD16  
                             l2066 FCD4                               l1098 F1AC  
                             l1602 FCA6                               l1610 F9EE  
                             l2058 FAEA                               l2084 FD9C  
                             l2076 FD36                               l2068 FCDA  
                             l1700 F4F2                               l1604 FCB6  
                             l1620 FA1A                               l1612 F9F2  
                             l2078 FD48                               l1710 F542  
                             l1702 F4F8                               l1606 FCBE  
                             l1630 FA52                               l1622 FA22  
                             l1614 FA00                               l1704 F506  
                             l1800 F6C0                               l1640 FA8C  
                             l1632 FA68                               l1624 FA34  
                             l1616 FA08                               l1650 F32A  
                             l1714 F54E                               l1706 F514  
                             l1810 F70C                               l1802 F6CC  
                             l1570 FC16                               l1642 FA94  
                             l1634 FA70                               l1626 FA3C  
                             l1618 FA0C                               l1730 F258  
                             l1722 F224                               l1652 F330  
                             l1708 F534                               l1660 FB8E  
                             l1740 F96A                               l1732 F93E  
                             l1812 F70E                               l1820 F5E4  
                             l1580 FC3C                               l1572 FC1E  
                             l1636 FA76                               l1628 FA44  
                             l1646 F2F4                               l1670 FBF2  
                             l1662 FBA2                               l1654 FB50  
                             l1750 F9B6                               l1742 F976  
                             l1734 F94A                               l1814 F71E  
                             l1806 F6E6                               l1830 F604  
                             l1822 F5E4                               l1590 FC74  
                             l1582 FC44                               l1574 FC22  
                             l1566 FC04                               l1638 FA7C  
                             l1718 F1F0                               l1902 F864  
                             l1910 F558                               l1726 F242  
                             l1648 F300                               l1672 FBFE  
                             l1664 FBB6                               l1656 FB54  
                             l1752 F9B8                               l1736 F956  
                             l1760 F890                               l1816 F72A  
                             l1832 F614                               l1824 F5EA  
                             l1592 FC7A                               l1584 FC56  
                             l1576 FC30                               l1568 FC08  
                             l1904 F866                               l1920 F578  
                             l1912 F564                               l1728 F252  
                             l1682 F2C6                               l1674 F2AC  
                             l1690 F340                               l1666 FBCA  
                             l1658 FB7A                               l1754 F9C8  
                             l1746 F990                               l1738 F95A  
                             l1770 F8C6                               l1762 F89C  
                             l1842 F660                               l1834 F620  
                             l1826 F5F0                               l1818 F5E2  
                             l1594 FC90                               l1586 FC5E  
                             l1578 FC38                               l1850 F738  
                             l1906 F876                               l1922 F588  
                             l1914 F570                               l1684 F2C8  
                             l1676 F2B8                               l1692 F348  
                             l1668 FBDE                               l1756 F9D4  
                             l1780 F908                               l1764 F8A8  
                             l1844 F662                               l1828 F5FC  
                             l1596 FC98                               l1588 FC66  
                             l1860 F75C                               l1852 F73C  
                             l1908 F882                               l1932 F5D4  
                             l1924 F594                               l1916 F570  
                             l1940 FDCA                               l1686 F2D8  
                             l1694 F364                               l1758 F9E0  
                             l1782 F918                               l1774 F8E0  
                             l1766 F8AA                               l1790 F690  
                             l1846 F672                               l1838 F63A  
                             l1598 FC9A                               l1862 F76C  
                             l1854 F742                               l1918 F574  
                             l1950 FDDE                               l1942 FDCE  
                             l1934 FDAE                               l1688 F2DC  
                             l1696 F366                               l1784 F924  
                             l1768 F8BA                               l1792 F696  
                             l1848 F67E                               l1872 F7B8  
                             l1864 F778                               l1856 F748  
                             l1880 F7E4                               l1928 F5AE  
                             l1960 FDEE                               l1952 FDE2  
                             l1944 FDD2                               l1936 FDBA  
                             l1698 F4E6                               l1786 F930  
                             l1778 F906                               l1794 F69C  
                             l1874 F7BA                               l1858 F754  
                             l1890 F808                               l1882 F7E8  
                             l1970 FE38                               l1962 FDFA  
                             l1954 FDE6                               l1946 FDD6  
                             l1938 FDC6                               l1796 F6A8  
                             l1788 F68C                               l1876 F7CA  
                             l1868 F792                               l1892 F818  
                             l1884 F7EE                               l1980 FE78  
                             l1964 FE0A                               l1948 FDDA  
                             l1798 F6B0                               l1878 F7D6  
                             l1894 F824                               l1886 F7F4  
                             l1990 FEC6                               l1974 FE52  
                             l1888 F800                               l1992 FED4  
                             l1984 FE9E                               l1976 FE5E  
                             l1968 FE24              __end_of_changeProgram FDAE  
                             l1898 F83E                               l1994 FEE0  
                             l1986 FEA2                               l1996 FEEC  
                             l1988 FEC0                               l1998 F390  
                             STR_1 FEFB                               STR_2 FF0C  
                             STR_3 FF9C                               STR_4 FF1C  
                             STR_5 FFAA                               STR_6 FF2C  
                             STR_7 FFB8                               STR_8 FF3C  
                             STR_9 FFC6          clearMaskFromNthPosition@i 0005  
                             u1000 F636                               u1001 F632  
                             u1010 F65C                               u1011 F658  
                             u1020 F672                               u1100 F5D0  
                             u1021 F66E                               u1101 F5CC  
                             u1030 F78E                               u1110 FE20  
                             u1031 F78A                               u1111 FE1C  
                             u1200 FD16                               u1040 F7B4  
                             u1120 FE4E                               u1201 FD12  
                             u1041 F7B0                               u1121 FE4A  
                             u1210 FD36                               u1050 F7CA  
                             u1130 FE74                               u1211 FD32  
                             u1051 F7C6                               u1131 FE70  
                             u1220 FD6A                               u1060 F83A  
                             u1140 FE9A                               u1221 FD66  
                             u1061 F836                               u1141 FE96  
                             u1230 FD8A                               u1070 F860  
                             u1150 FEC0                               u1231 FD86  
                             u1071 F85C                               u1151 FEBC  
                             u1080 F876                               u1160 FED4  
                             u1081 F872                               u1161 FED0  
                             u1170 FCE8                               u1090 F5AA  
                             u1171 FCE4                               u1091 F5A6  
                             u1180 FCF6                               u1181 FCF2  
                             u1190 FD08                               u1191 FD04  
                     __CFG_PWRT$ON 000000           _clearMaskFromNthPosition F224  
                             _main F3E2                               fsr2h 000FDA  
                             indf2 000FDF                               fsr2l 000FD9  
                      main@program 001A                               prodl 000FF3  
                             start 0000                      __CFG_IESO$OFF 000000  
                    __CFG_MCLRE$ON 000000                       ?_intToBinary 0001  
                     ___param_bank 000000            convertIntoToBCD@counter 000B  
                   ?_runSubProgram 0016                     printMask@value 0003  
             changeProgram@program 0001                              ?_main 0001  
                  __end_of___awdiv FCC8                              STR_10 FF4C  
                            STR_11 FFD4                              STR_12 FF5C  
                            STR_13 FFE2                              STR_14 FF6C  
                            STR_15 FF7C                              STR_16 FFF0  
                            STR_17 FF8C                    __end_of___awmod FA9E  
                  ___awdiv@divisor 0003                    ___awdiv@counter 0005  
                            _PORTD 000F83                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
             isProgramInterupted@i 0003                      __CFG_WRT0$OFF 000000  
                    __CFG_WRT1$OFF 000000                      __CFG_WRT2$OFF 000000  
                    __CFG_WRT3$OFF 000000                     __CFG_EBTR0$OFF 000000  
                   __CFG_FCMEN$OFF 000000                     __CFG_EBTR1$OFF 000000  
                   __CFG_EBTR2$OFF 000000                     __CFG_EBTR3$OFF 000000  
                ?_convertIntoToBCD 0001                    __end_of_lcd_dat F1D8  
                  __end_of_lcd_cmd F1C6                      __CFG_WRTB$OFF 000000  
                    __CFG_WRTC$OFF 000000                    __end_of_lcd_str F390  
                    __CFG_WRTD$OFF 000000                     __CFG_EBTRB$OFF 000000  
                            _delay F2AC                 ??_convertIntoToBCD 0009  
                   __CFG_BOREN$OFF 000000                              tablat 000FF5  
                            plusw2 000FDB                              status 000FD8  
          ?_convertValueToGrayCode 0001                    __initialization F1D8  
             runSubProgram@program 0016                       __end_of_main F434  
                   __CFG_OSC$HSPLL 000000       __size_of_isProgramInterupted 0072  
                           ??_main 001A                      __activetblptr 000002  
                  subProgram8@mask 0009                    subProgram9@seed 0010  
                           ?_delay 0001                             _ADCON0 000FC2  
                           _ADCON1 000FC1                             _ADCON2 000FC0  
                           _ADRESH 000FC4                             _ADRESL 000FC3  
                 ___awdiv@dividend 0001     __end_of_convertValueToGrayCode F1B4  
                   __CFG_XINST$OFF 000000                   __end_of_lcd_init F4E6  
                  ??_runSubProgram 0018                          ??___awdiv 0005  
                        ??___awmod 0005                             _lcd_wr F1A2  
                           delay@i 0003                             delay@j 0005  
                           clear_0 F1DE                   ___awdiv@quotient 0007  
                  ___awmod@divisor 0003                    ___awmod@counter 0005  
                        ??_lcd_dat 0002                          ??_lcd_cmd 0002  
                        ??_lcd_str 0005                       __mediumconst FEFA  
               subProgram1@counter 0010                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
               subProgram2@counter 0010                       ?_subProgram1 0001  
                     ?_subProgram2 0001                       ?_subProgram3 0001  
                     ?_subProgram4 0001                       ?_subProgram5 0001  
                     ?_subProgram6 0001                       ?_subProgram7 0001  
                     ?_subProgram8 0001                       ?_subProgram9 0001  
               subProgram3@counter 0011                 subProgram4@counter 0011  
               subProgram5@counter 0015                         __accesstop 0080  
          __end_of__initialization F1E4                    __CFG_PBADEN$OFF 000000  
               subProgram6@counter 0015                      ___rparam_used 000001  
                   __pcstackCOMRAM 0001                  _getGeneratedValue F268  
                    __end_of_delay F2F4               __size_of_intToBinary 004C  
               ?_getGeneratedValue 0001                ??_getGeneratedValue 0001  
       ??_clearMaskFromNthPosition 0005                            ??_delay 0003  
        subProgram3@counterDisplay 0010                   subProgram7@snake 0011  
        __end_of_getGeneratedValue F2AC                 __size_of_nextSnake 0056  
                     intToBinary@i 0006                            ?_lcd_wr 0001  
               __size_of_printMask 00B4                  _potentiomer1value 0022  
                _potentiomer2value 001C                          ?_lcd_init 0001  
              _isProgramInterupted F4E6                    nextSnake@result 0002  
        subProgram5@counterDisplay 0014                            __Hparam 0000  
        __size_of_convertIntoToBCD 0036                            __Lparam 0000  
                          ___awdiv FC04                            ___awmod F9EE  
                  __size_of_lcd_wr 0008               ?_isProgramInterupted 0001  
                  __CFG_STVREN$OFF 000000                            __pcinit F1D8  
           __size_of_changeProgram 00E6                            __ramtop 1000  
                          __ptext0 F3E2                            __ptext1 FA9E  
                          __ptext2 F390                            __ptext3 F268  
                          __ptext4 FDAE                            __ptext5 F224  
                          __ptext6 F558                            __ptext7 F434  
                          __ptext8 F7E4                            __ptext9 F738  
                          _lcd_dat F1C6                            _lcd_cmd F1B4  
      convertValueToGrayCode@value 0001                            _lcd_str F340  
                          delay@ms 0001                   ___awmod@dividend 0001  
                       ??_lcd_init 0006                  __end_of_nextSnake F48A  
             end_of_initialization F1E4               __size_of_subProgram1 00B0  
             __size_of_subProgram2 00AE               __size_of_subProgram3 00AC  
             __size_of_subProgram4 00AA               __size_of_subProgram5 00AC  
             __size_of_subProgram6 00AC               __size_of_subProgram7 008A  
             __size_of_subProgram8 014C               __size_of_subProgram9 0052  
                    __Lmediumconst FEFA                   intToBinary@value 0003  
       __size_of_getGeneratedValue 0044                  __end_of_printMask FC04  
                          postdec2 000FDD                            postinc0 000FEE  
                          postinc2 000FDE              ??_isProgramInterupted 0003  
        subProgram7@counterDisplay 0010                          _PORTBbits 000F81  
                        _PORTEbits 000F84   __end_of_clearMaskFromNthPosition F268  
                       lcd_dat@val 0002                         lcd_cmd@val 0002  
                    _changeProgram FCC8                         lcd_str@str 0003  
            __end_of_runSubProgram FB50                     __end_of_lcd_wr F1AA  
              start_initialization F1D8                     ?_changeProgram 0001  
                   changeProgram@i 0005                   _convertIntoToBCD F1EE  
                    ??_intToBinary 0004          getGeneratedValue@fifthBit 0004  
                         ??_lcd_wr 0001                   __CFG_LPT1OSC$OFF 000000  
        getGeneratedValue@firstBit 0002                        __pbssCOMRAM 001C  
         ??_convertValueToGrayCode 0001          getGeneratedValue@sixthBit 0005  
                __size_of_lcd_init 005C  __size_of_clearMaskFromNthPosition 0044  
        ?_clearMaskFromNthPosition 0001                  __CFG_CCP2MX$PORTC 000000  
                    __pmediumconst FEFA                           ?___awdiv 0001  
                         ?___awmod 0001                          _direction 002A  
              __end_of_intToBinary F340                           ?_lcd_dat 0001  
                         ?_lcd_cmd 0001                           ?_lcd_str 0003  
                   nextSnake@snake 0001                    ??_changeProgram 0003  
                   __size_of_delay 0048       clearMaskFromNthPosition@mask 0001  
                        _nextSnake F434                   __CFG_WDTPS$32768 000000  
                        _printMask FB50                         _ADCON0bits 000FC2  
      getGeneratedValue@rolledSeed 0001                          lcd_wr@val 0001  
                    ??_subProgram1 0008                      ??_subProgram2 0008  
                    ??_subProgram3 0008                      ??_subProgram4 0008  
                    ??_subProgram5 000C                      ??_subProgram6 000C  
                    ??_subProgram7 0008                      ??_subProgram8 0008  
                    ??_subProgram9 0008    __size_of_convertValueToGrayCode 000A  
                       ?_nextSnake 0001        __end_of_isProgramInterupted F558  
                         __Hrparam 0000                           __Lrparam 0000  
                      _intToBinary F2F4                         ?_printMask 0001  
                 __size_of___awdiv 00C4                   __size_of___awmod 00B0  
            getGeneratedValue@seed 0007                   __size_of_lcd_dat 0012  
                 __size_of_lcd_cmd 0012                   __size_of_lcd_str 0050  
         __end_of_convertIntoToBCD F224                           __ptext10 F1EE  
                         __ptext11 F9EE                           __ptext20 F1C6  
                         __ptext12 FC04                           __ptext21 F4E6  
                         __ptext13 F5E2                           __ptext22 F2F4  
                         __ptext14 F68C                           __ptext23 F48A  
                         __ptext15 F1AA                           __ptext24 F1B4  
                         __ptext16 F890                           __ptext25 F1A2  
                         __ptext17 F93E                           __ptext26 F2AC  
                         __ptext18 FB50                           __ptext27 FCC8  
                         __ptext19 F340                           _lcd_init F48A  
                    __size_of_main 0052                __end_of_subProgram1 F9EE  
              __end_of_subProgram2 F93E                __end_of_subProgram3 F738  
              __end_of_subProgram4 F68C                __end_of_subProgram5 F7E4  
              __end_of_subProgram6 F890                __end_of_subProgram7 F5E2  
              __end_of_subProgram8 FEFA                __end_of_subProgram9 F3E2  
        subProgram4@counterDisplay 0010         getGeneratedValue@secondBit 0003  
           _convertValueToGrayCode F1AA               subProgram1@binBuffer 0008  
                         lcd_str@i 0007               subProgram2@binBuffer 0008  
       getGeneratedValue@xoredBits 0006               subProgram3@binBuffer 0008  
           __size_of_runSubProgram 00B2                  intToBinary@buffor 0001  
                      ??_nextSnake 0001               subProgram4@binBuffer 0008  
        subProgram6@counterDisplay 0014                        ??_printMask 0003  
             subProgram5@binBuffer 000C               subProgram6@binBuffer 000C  
                      _subProgram1 F93E                        _subProgram2 F890  
                      _subProgram3 F68C                        _subProgram4 F5E2  
                      _subProgram5 F738                        _subProgram6 F7E4  
                      _subProgram7 F558                        _subProgram8 FDAE  
                      _subProgram9 F390   clearMaskFromNthPosition@position 0003  
             subProgram7@binBuffer 0008                       _potentiometr 0028  
