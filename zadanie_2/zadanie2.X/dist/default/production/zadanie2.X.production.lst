

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Jun  6 03:44:41 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29  0000                     
    30                           ; Version 2.10
    31                           ; Generated 31/07/2019 GMT
    32                           ; 
    33                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F4620 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     _TRISE	set	3990
    65  0000                     _TRISD	set	3989
    66  0000                     _TRISC	set	3988
    67  0000                     _TRISB	set	3987
    68  0000                     _TRISA	set	3986
    69  0000                     _ADCON2	set	4032
    70  0000                     _ADCON1	set	4033
    71  0000                     _PORTBbits	set	3969
    72  0000                     _PORTEbits	set	3972
    73  0000                     _ADRESL	set	4035
    74  0000                     _ADRESH	set	4036
    75  0000                     _ADCON0bits	set	4034
    76  0000                     _ADCON0	set	4034
    77  0000                     _PORTD	set	3971
    78                           
    79                           	psect	smallconst
    80  001000                     __psmallconst:
    81                           	opt callstack 0
    82  001000  00                 	db	0
    83  001001  30                 	db	48	;'0'
    84  001002  31                 	db	49	;'1'
    85  001003  32                 	db	50	;'2'
    86  001004  33                 	db	51	;'3'
    87  001005  34                 	db	52	;'4'
    88  001006  35                 	db	53	;'5'
    89  001007  36                 	db	54	;'6'
    90  001008  37                 	db	55	;'7'
    91  001009  38                 	db	56	;'8'
    92  00100A  39                 	db	57	;'9'
    93  00100B  41                 	db	65	;'A'
    94  00100C  42                 	db	66	;'B'
    95  00100D  43                 	db	67	;'C'
    96  00100E  44                 	db	68	;'D'
    97  00100F  45                 	db	69	;'E'
    98  001010  46                 	db	70	;'F'
    99  001011  00                 	db	0
   100  001012                     STR_2:
   101  001012  50                 	db	80	;'P'
   102  001013  72                 	db	114	;'r'
   103  001014  6F                 	db	111	;'o'
   104  001015  67                 	db	103	;'g'
   105  001016  72                 	db	114	;'r'
   106  001017  61                 	db	97	;'a'
   107  001018  6D                 	db	109	;'m'
   108  001019  20                 	db	32
   109  00101A  31                 	db	49	;'1'
   110  00101B  20                 	db	32
   111  00101C  73                 	db	115	;'s'
   112  00101D  74                 	db	116	;'t'
   113  00101E  61                 	db	97	;'a'
   114  00101F  72                 	db	114	;'r'
   115  001020  74                 	db	116	;'t'
   116  001021  00                 	db	0
   117  001022                     STR_4:
   118  001022  50                 	db	80	;'P'
   119  001023  72                 	db	114	;'r'
   120  001024  6F                 	db	111	;'o'
   121  001025  67                 	db	103	;'g'
   122  001026  72                 	db	114	;'r'
   123  001027  61                 	db	97	;'a'
   124  001028  6D                 	db	109	;'m'
   125  001029  20                 	db	32
   126  00102A  32                 	db	50	;'2'
   127  00102B  20                 	db	32
   128  00102C  73                 	db	115	;'s'
   129  00102D  74                 	db	116	;'t'
   130  00102E  61                 	db	97	;'a'
   131  00102F  72                 	db	114	;'r'
   132  001030  74                 	db	116	;'t'
   133  001031  00                 	db	0
   134  001032                     STR_3:
   135  001032  50                 	db	80	;'P'
   136  001033  72                 	db	114	;'r'
   137  001034  6F                 	db	111	;'o'
   138  001035  67                 	db	103	;'g'
   139  001036  72                 	db	114	;'r'
   140  001037  61                 	db	97	;'a'
   141  001038  6D                 	db	109	;'m'
   142  001039  20                 	db	32
   143  00103A  31                 	db	49	;'1'
   144  00103B  20                 	db	32
   145  00103C  65                 	db	101	;'e'
   146  00103D  6E                 	db	110	;'n'
   147  00103E  64                 	db	100	;'d'
   148  00103F  00                 	db	0
   149  001040                     STR_5:
   150  001040  50                 	db	80	;'P'
   151  001041  72                 	db	114	;'r'
   152  001042  6F                 	db	111	;'o'
   153  001043  67                 	db	103	;'g'
   154  001044  72                 	db	114	;'r'
   155  001045  61                 	db	97	;'a'
   156  001046  6D                 	db	109	;'m'
   157  001047  20                 	db	32
   158  001048  32                 	db	50	;'2'
   159  001049  20                 	db	32
   160  00104A  65                 	db	101	;'e'
   161  00104B  6E                 	db	110	;'n'
   162  00104C  64                 	db	100	;'d'
   163  00104D  00                 	db	0
   164                           
   165                           ; #config settings
   166  00104E  00                 	db	0	; dummy byte at the end
   167  0000                     
   168                           	psect	cinit
   169  0016C6                     __pcinit:
   170                           	opt callstack 0
   171  0016C6                     start_initialization:
   172                           	opt callstack 0
   173  0016C6                     __initialization:
   174                           	opt callstack 0
   175                           
   176                           ; Clear objects allocated to COMRAM (15 bytes)
   177  0016C6  EE00  F027         	lfsr	0,__pbssCOMRAM
   178  0016CA  0E0F               	movlw	15
   179  0016CC                     clear_0:
   180  0016CC  6AEE               	clrf	postinc0,c
   181  0016CE  06E8               	decf	wreg,f,c
   182  0016D0  E1FD               	bnz	clear_0
   183  0016D2                     end_of_initialization:
   184                           	opt callstack 0
   185  0016D2                     __end_of__initialization:
   186                           	opt callstack 0
   187  0016D2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   188  0016D4  6EF8               	movwf	tblptru,c
   189  0016D6  0100               	movlb	0
   190  0016D8  EF92  F00A         	goto	_main	;jump to C main() function
   191                           
   192                           	psect	bssCOMRAM
   193  000027                     __pbssCOMRAM:
   194                           	opt callstack 0
   195  000027                     _potentiomer2value:
   196                           	opt callstack 0
   197  000027                     	ds	6
   198  00002D                     _potentiomer1value:
   199                           	opt callstack 0
   200  00002D                     	ds	6
   201  000033                     _potentiometr:
   202                           	opt callstack 0
   203  000033                     	ds	2
   204  000035                     _direction:
   205                           	opt callstack 0
   206  000035                     	ds	1
   207                           
   208                           	psect	cstackCOMRAM
   209  000001                     __pcstackCOMRAM:
   210                           	opt callstack 0
   211  000001                     ?_isProgramInterupted:
   212                           	opt callstack 0
   213  000001                     ?_adc:
   214                           	opt callstack 0
   215  000001                     lcd_wr@val:
   216                           	opt callstack 0
   217  000001                     convertValueToGrayCode@value:
   218                           	opt callstack 0
   219  000001                     intToBinary@buffor:
   220                           	opt callstack 0
   221  000001                     printMask@mask:
   222                           	opt callstack 0
   223  000001                     changeProgram@program:
   224                           	opt callstack 0
   225                           
   226                           ; 2 bytes @ 0x0
   227  000001                     	ds	1
   228  000002                     lcd_cmd@val:
   229                           	opt callstack 0
   230  000002                     lcd_dat@val:
   231                           	opt callstack 0
   232                           
   233                           ; 1 bytes @ 0x1
   234  000002                     	ds	1
   235  000003                     ??_adc:
   236  000003                     intToBinary@value:
   237                           	opt callstack 0
   238  000003                     printMask@value:
   239                           	opt callstack 0
   240  000003                     lcd_str@str:
   241                           	opt callstack 0
   242  000003                     isProgramInterupted@i:
   243                           	opt callstack 0
   244                           
   245                           ; 2 bytes @ 0x2
   246  000003                     	ds	1
   247  000004                     ??_intToBinary:
   248                           
   249                           ; 1 bytes @ 0x3
   250  000004                     	ds	1
   251  000005                     ??_lcd_str:
   252  000005                     changeProgram@i:
   253                           	opt callstack 0
   254                           
   255                           ; 2 bytes @ 0x4
   256  000005                     	ds	1
   257  000006                     intToBinary@i:
   258                           	opt callstack 0
   259                           
   260                           ; 2 bytes @ 0x5
   261  000006                     	ds	1
   262  000007                     adc@kanal:
   263                           	opt callstack 0
   264  000007                     lcd_str@i:
   265                           	opt callstack 0
   266                           
   267                           ; 1 bytes @ 0x6
   268  000007                     	ds	1
   269  000008                     ?___lwdiv:
   270                           	opt callstack 0
   271  000008                     ___lwdiv@dividend:
   272                           	opt callstack 0
   273                           
   274                           ; 2 bytes @ 0x7
   275  000008                     	ds	2
   276  00000A                     ___lwdiv@divisor:
   277                           	opt callstack 0
   278                           
   279                           ; 2 bytes @ 0x9
   280  00000A                     	ds	2
   281  00000C                     ___lwdiv@quotient:
   282                           	opt callstack 0
   283                           
   284                           ; 2 bytes @ 0xB
   285  00000C                     	ds	2
   286  00000E                     ___lwdiv@counter:
   287                           	opt callstack 0
   288                           
   289                           ; 1 bytes @ 0xD
   290  00000E                     	ds	1
   291  00000F                     ?_getDelay:
   292                           	opt callstack 0
   293                           
   294                           ; 2 bytes @ 0xE
   295  00000F                     	ds	2
   296  000011                     getDelay@delay:
   297                           	opt callstack 0
   298                           
   299                           ; 1 bytes @ 0x10
   300  000011                     	ds	1
   301  000012                     delay@ms:
   302                           	opt callstack 0
   303                           
   304                           ; 2 bytes @ 0x11
   305  000012                     	ds	2
   306  000014                     delay@i:
   307                           	opt callstack 0
   308                           
   309                           ; 2 bytes @ 0x13
   310  000014                     	ds	2
   311  000016                     delay@j:
   312                           	opt callstack 0
   313                           
   314                           ; 1 bytes @ 0x15
   315  000016                     	ds	1
   316  000017                     subProgram1@binBuffer:
   317                           	opt callstack 0
   318  000017                     subProgram2@binBuffer:
   319                           	opt callstack 0
   320                           
   321                           ; 8 bytes @ 0x16
   322  000017                     	ds	8
   323  00001F                     subProgram1@counter:
   324                           	opt callstack 0
   325  00001F                     subProgram2@counterDisplay:
   326                           	opt callstack 0
   327                           
   328                           ; 1 bytes @ 0x1E
   329  00001F                     	ds	1
   330  000020                     subProgram2@counter:
   331                           	opt callstack 0
   332                           
   333                           ; 1 bytes @ 0x1F
   334  000020                     	ds	1
   335  000021                     runSubProgram@program:
   336                           	opt callstack 0
   337                           
   338                           ; 2 bytes @ 0x20
   339  000021                     	ds	2
   340  000023                     ??_runSubProgram:
   341                           
   342                           ; 1 bytes @ 0x22
   343  000023                     	ds	2
   344  000025                     main@program:
   345                           	opt callstack 0
   346                           
   347                           ; 2 bytes @ 0x24
   348  000025                     	ds	2
   349                           
   350 ;;
   351 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   352 ;;
   353 ;; *************** function _main *****************
   354 ;; Defined at:
   355 ;;		line 372 in file "main2.c"
   356 ;; Parameters:    Size  Location     Type
   357 ;;		None
   358 ;; Auto vars:     Size  Location     Type
   359 ;;  program         2   36[COMRAM] unsigned int 
   360 ;; Return value:  Size  Location     Type
   361 ;;                  1    wreg      void 
   362 ;; Registers used:
   363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   364 ;; Tracked objects:
   365 ;;		On entry : 0/0
   366 ;;		On exit  : 0/0
   367 ;;		Unchanged: 0/0
   368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   370 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   372 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   373 ;;Total ram usage:        2 bytes
   374 ;; Hardware stack levels required when called:    5
   375 ;; This function calls:
   376 ;;		_changeProgram
   377 ;;		_lcd_cmd
   378 ;;		_lcd_init
   379 ;;		_runSubProgram
   380 ;; This function is called by:
   381 ;;		Startup code after reset
   382 ;; This function uses a non-reentrant model
   383 ;;
   384                           
   385                           	psect	text0
   386  001524                     __ptext0:
   387                           	opt callstack 0
   388  001524                     _main:
   389                           	opt callstack 26
   390  001524                     
   391                           ;main2.c: 374:     ADCON0=0x01;
   392  001524  0E01               	movlw	1
   393  001526  6EC2               	movwf	194,c	;volatile
   394                           
   395                           ;main2.c: 375:     ADCON1=0x0B;
   396  001528  0E0B               	movlw	11
   397  00152A  6EC1               	movwf	193,c	;volatile
   398                           
   399                           ;main2.c: 376:     ADCON2=0x01;
   400  00152C  0E01               	movlw	1
   401  00152E  6EC0               	movwf	192,c	;volatile
   402                           
   403                           ;main2.c: 378:     TRISA=0xC3;
   404  001530  0EC3               	movlw	195
   405  001532  6E92               	movwf	146,c	;volatile
   406                           
   407                           ;main2.c: 379:     TRISB=0x3F;
   408  001534  0E3F               	movlw	63
   409  001536  6E93               	movwf	147,c	;volatile
   410                           
   411                           ;main2.c: 380:     TRISC=0x01;
   412  001538  0E01               	movlw	1
   413  00153A  6E94               	movwf	148,c	;volatile
   414                           
   415                           ;main2.c: 381:     TRISD=0x00;
   416  00153C  0E00               	movlw	0
   417  00153E  6E95               	movwf	149,c	;volatile
   418                           
   419                           ;main2.c: 382:     TRISE=0x00;
   420  001540  0E00               	movlw	0
   421  001542  6E96               	movwf	150,c	;volatile
   422  001544                     
   423                           ;main2.c: 384:     lcd_init();
   424  001544  EC64  F00A         	call	_lcd_init	;wreg free
   425  001548                     
   426                           ;main2.c: 385:     lcd_cmd(0x01);
   427  001548  0E01               	movlw	1
   428  00154A  EC77  F00B         	call	_lcd_cmd
   429  00154E                     
   430                           ;main2.c: 387:     unsigned int program = 1;
   431  00154E  0E00               	movlw	0
   432  001550  6E26               	movwf	(main@program+1)^0,c
   433  001552  0E01               	movlw	1
   434  001554  6E25               	movwf	main@program^0,c
   435  001556                     l1423:
   436                           
   437                           ;main2.c: 390:         changeProgram(&program);
   438  001556  0E25               	movlw	low main@program
   439  001558  6E01               	movwf	changeProgram@program^0,c
   440  00155A  0E00               	movlw	high main@program
   441  00155C  6E02               	movwf	(changeProgram@program+1)^0,c
   442  00155E  EC28  F008         	call	_changeProgram	;wreg free
   443  001562                     
   444                           ;main2.c: 392:         runSubProgram(program);
   445  001562  C025  F021         	movff	main@program,runSubProgram@program
   446  001566  C026  F022         	movff	main@program+1,runSubProgram@program+1
   447  00156A  EC2D  F00B         	call	_runSubProgram	;wreg free
   448  00156E  EFAB  F00A         	goto	l1423
   449  001572  EF00  F000         	goto	start
   450  001576                     __end_of_main:
   451                           	opt callstack 0
   452                           
   453 ;; *************** function _runSubProgram *****************
   454 ;; Defined at:
   455 ;;		line 310 in file "main2.c"
   456 ;; Parameters:    Size  Location     Type
   457 ;;  program         2   32[COMRAM] unsigned int 
   458 ;; Auto vars:     Size  Location     Type
   459 ;;		None
   460 ;; Return value:  Size  Location     Type
   461 ;;                  1    wreg      void 
   462 ;; Registers used:
   463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   464 ;; Tracked objects:
   465 ;;		On entry : 0/0
   466 ;;		On exit  : 0/0
   467 ;;		Unchanged: 0/0
   468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   469 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   471 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   472 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   473 ;;Total ram usage:        4 bytes
   474 ;; Hardware stack levels used:    1
   475 ;; Hardware stack levels required when called:    4
   476 ;; This function calls:
   477 ;;		_subProgram1
   478 ;;		_subProgram2
   479 ;; This function is called by:
   480 ;;		_main
   481 ;; This function uses a non-reentrant model
   482 ;;
   483                           
   484                           	psect	text1
   485  00165A                     __ptext1:
   486                           	opt callstack 0
   487  00165A                     _runSubProgram:
   488                           	opt callstack 26
   489  00165A                     
   490                           ;main2.c: 310: void runSubProgram(unsigned int program);main2.c: 311: {;main2.c: 312:   
      +                            switch (program) {
   491  00165A  EF37  F00B         	goto	l1387
   492  00165E                     l1381:
   493                           
   494                           ;main2.c: 314:             subProgram1();
   495  00165E  EC9B  F008         	call	_subProgram1	;wreg free
   496                           
   497                           ;main2.c: 315:             break;
   498  001662  EF4D  F00B         	goto	l124
   499  001666                     l1383:
   500                           
   501                           ;main2.c: 318:             subProgram2();
   502  001666  EC51  F009         	call	_subProgram2	;wreg free
   503                           
   504                           ;main2.c: 319:             break;
   505  00166A  EF4D  F00B         	goto	l124
   506  00166E                     l1387:
   507  00166E  C021  F023         	movff	runSubProgram@program,??_runSubProgram
   508  001672  C022  F024         	movff	runSubProgram@program+1,??_runSubProgram+1
   509                           
   510                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   511                           ; Switch size 1, requested type "simple"
   512                           ; Number of cases is 1, Range of values is 0 to 0
   513                           ; switch strategies available:
   514                           ; Name         Instructions Cycles
   515                           ; simple_byte            4     3 (average)
   516                           ;	Chosen strategy is simple_byte
   517  001676  5024               	movf	(??_runSubProgram+1)^0,w,c
   518  001678  0A00               	xorlw	0	; case 0
   519  00167A  B4D8               	btfsc	status,2,c
   520  00167C  EF42  F00B         	goto	l1435
   521  001680  EF4D  F00B         	goto	l124
   522  001684                     l1435:
   523                           
   524                           ; Switch size 1, requested type "simple"
   525                           ; Number of cases is 2, Range of values is 1 to 2
   526                           ; switch strategies available:
   527                           ; Name         Instructions Cycles
   528                           ; simple_byte            7     4 (average)
   529                           ;	Chosen strategy is simple_byte
   530  001684  5023               	movf	??_runSubProgram^0,w,c
   531  001686  0A01               	xorlw	1	; case 1
   532  001688  B4D8               	btfsc	status,2,c
   533  00168A  EF2F  F00B         	goto	l1381
   534  00168E  0A03               	xorlw	3	; case 2
   535  001690  B4D8               	btfsc	status,2,c
   536  001692  EF33  F00B         	goto	l1383
   537  001696  EF4D  F00B         	goto	l124
   538  00169A                     l124:
   539  00169A  0012               	return		;funcret
   540  00169C                     __end_of_runSubProgram:
   541                           	opt callstack 0
   542                           
   543 ;; *************** function _subProgram2 *****************
   544 ;; Defined at:
   545 ;;		line 276 in file "main2.c"
   546 ;; Parameters:    Size  Location     Type
   547 ;;		None
   548 ;; Auto vars:     Size  Location     Type
   549 ;;  binBuffer       8   22[COMRAM] unsigned char [8]
   550 ;;  delayBuffer     8    0        unsigned char [8]
   551 ;;  counter         1   31[COMRAM] unsigned char 
   552 ;;  counterDispl    1   30[COMRAM] unsigned char 
   553 ;; Return value:  Size  Location     Type
   554 ;;                  1    wreg      void 
   555 ;; Registers used:
   556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   557 ;; Tracked objects:
   558 ;;		On entry : 0/0
   559 ;;		On exit  : 0/0
   560 ;;		Unchanged: 0/0
   561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   563 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   565 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   566 ;;Total ram usage:       10 bytes
   567 ;; Hardware stack levels used:    1
   568 ;; Hardware stack levels required when called:    3
   569 ;; This function calls:
   570 ;;		_convertValueToGrayCode
   571 ;;		_delay
   572 ;;		_getDelay
   573 ;;		_intToBinary
   574 ;;		_isProgramInterupted
   575 ;;		_lcd_cmd
   576 ;;		_lcd_str
   577 ;;		_printMask
   578 ;; This function is called by:
   579 ;;		_runSubProgram
   580 ;; This function uses a non-reentrant model
   581 ;;
   582                           
   583                           	psect	text2
   584  0012A2                     __ptext2:
   585                           	opt callstack 0
   586  0012A2                     _subProgram2:
   587                           	opt callstack 26
   588  0012A2                     
   589                           ;main2.c: 278:     unsigned char counter = 0;
   590  0012A2  0E00               	movlw	0
   591  0012A4  6E20               	movwf	subProgram2@counter^0,c
   592  0012A6                     
   593                           ;main2.c: 281:     unsigned char binBuffer[8];;main2.c: 283:     unsigned char delayBuff
      +                          er[8];;main2.c: 285:     lcd_cmd(0x01);
   594  0012A6  0E01               	movlw	1
   595  0012A8  EC77  F00B         	call	_lcd_cmd
   596  0012AC                     
   597                           ;main2.c: 286:     lcd_cmd(0x80);
   598  0012AC  0E80               	movlw	128
   599  0012AE  EC77  F00B         	call	_lcd_cmd
   600  0012B2                     
   601                           ;main2.c: 287:     lcd_str("Program 2 start");
   602  0012B2  0E22               	movlw	low STR_4
   603  0012B4  6E03               	movwf	lcd_str@str^0,c
   604  0012B6  0E10               	movlw	high STR_4
   605  0012B8  6E04               	movwf	(lcd_str@str+1)^0,c
   606  0012BA  ECBB  F00A         	call	_lcd_str	;wreg free
   607  0012BE                     l1331:
   608                           
   609                           ;main2.c: 290:         counterDisplay = convertValueToGrayCode(counter);
   610  0012BE  5020               	movf	subProgram2@counter^0,w,c
   611  0012C0  EC80  F00B         	call	_convertValueToGrayCode
   612  0012C4  6E1F               	movwf	subProgram2@counterDisplay^0,c
   613  0012C6                     
   614                           ;main2.c: 292:         intToBinary(binBuffer, counterDisplay);
   615  0012C6  0E17               	movlw	low subProgram2@binBuffer
   616  0012C8  6E01               	movwf	intToBinary@buffor^0,c
   617  0012CA  0E00               	movlw	high subProgram2@binBuffer
   618  0012CC  6E02               	movwf	(intToBinary@buffor+1)^0,c
   619  0012CE  C01F  F003         	movff	subProgram2@counterDisplay,intToBinary@value
   620  0012D2  ECE3  F00A         	call	_intToBinary	;wreg free
   621  0012D6                     
   622                           ;main2.c: 294:         printMask(binBuffer);
   623  0012D6  0E17               	movlw	low subProgram2@binBuffer
   624  0012D8  6E01               	movwf	printMask@mask^0,c
   625  0012DA  0E00               	movlw	high subProgram2@binBuffer
   626  0012DC  6E02               	movwf	(printMask@mask+1)^0,c
   627  0012DE  ECF7  F008         	call	_printMask	;wreg free
   628  0012E2                     
   629                           ;main2.c: 296:         if (isProgramInterupted() == 1) return;
   630  0012E2  EC2B  F00A         	call	_isProgramInterupted	;wreg free
   631  0012E6  0401               	decf	?_isProgramInterupted^0,w,c
   632  0012E8  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
   633  0012EA  A4D8               	btfss	status,2,c
   634  0012EC  EF7A  F009         	goto	u521
   635  0012F0  EF7C  F009         	goto	u520
   636  0012F4                     u521:
   637  0012F4  EF7E  F009         	goto	l1341
   638  0012F8                     u520:
   639  0012F8  EFA8  F009         	goto	l115
   640  0012FC                     l1341:
   641                           
   642                           ;main2.c: 298:         delay(getDelay());
   643  0012FC  EC4E  F00B         	call	_getDelay	;wreg free
   644  001300  C00F  F012         	movff	?_getDelay,delay@ms
   645  001304  C010  F013         	movff	?_getDelay+1,delay@ms+1
   646  001308  EC09  F00B         	call	_delay	;wreg free
   647  00130C                     
   648                           ;main2.c: 300:         if (isProgramInterupted() == 1) return;
   649  00130C  EC2B  F00A         	call	_isProgramInterupted	;wreg free
   650  001310  0401               	decf	?_isProgramInterupted^0,w,c
   651  001312  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
   652  001314  A4D8               	btfss	status,2,c
   653  001316  EF8F  F009         	goto	u531
   654  00131A  EF91  F009         	goto	u530
   655  00131E                     u531:
   656  00131E  EF93  F009         	goto	l1347
   657  001322                     u530:
   658  001322  EFA8  F009         	goto	l115
   659  001326                     l1347:
   660                           
   661                           ;main2.c: 302:         counter++;
   662  001326  2A20               	incf	subProgram2@counter^0,f,c
   663  001328                     
   664                           ;main2.c: 303:     } while (counter < 255);
   665  001328  2820               	incf	subProgram2@counter^0,w,c
   666  00132A  A4D8               	btfss	status,2,c
   667  00132C  EF9A  F009         	goto	u541
   668  001330  EF9C  F009         	goto	u540
   669  001334                     u541:
   670  001334  EF5F  F009         	goto	l1331
   671  001338                     u540:
   672  001338                     
   673                           ;main2.c: 305:     lcd_cmd(0x01);
   674  001338  0E01               	movlw	1
   675  00133A  EC77  F00B         	call	_lcd_cmd
   676                           
   677                           ;main2.c: 306:     lcd_cmd(0x80);
   678  00133E  0E80               	movlw	128
   679  001340  EC77  F00B         	call	_lcd_cmd
   680  001344                     
   681                           ;main2.c: 307:     lcd_str("Program 2 end");
   682  001344  0E40               	movlw	low STR_5
   683  001346  6E03               	movwf	lcd_str@str^0,c
   684  001348  0E10               	movlw	high STR_5
   685  00134A  6E04               	movwf	(lcd_str@str+1)^0,c
   686  00134C  ECBB  F00A         	call	_lcd_str	;wreg free
   687  001350                     l115:
   688  001350  0012               	return		;funcret
   689  001352                     __end_of_subProgram2:
   690                           	opt callstack 0
   691                           
   692 ;; *************** function _convertValueToGrayCode *****************
   693 ;; Defined at:
   694 ;;		line 271 in file "main2.c"
   695 ;; Parameters:    Size  Location     Type
   696 ;;  value           1    wreg     unsigned char 
   697 ;; Auto vars:     Size  Location     Type
   698 ;;  value           1    0[COMRAM] unsigned char 
   699 ;; Return value:  Size  Location     Type
   700 ;;                  1    wreg      unsigned char 
   701 ;; Registers used:
   702 ;;		wreg, status,2, status,0
   703 ;; Tracked objects:
   704 ;;		On entry : 0/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   709 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   711 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   712 ;;Total ram usage:        1 bytes
   713 ;; Hardware stack levels used:    1
   714 ;; This function calls:
   715 ;;		Nothing
   716 ;; This function is called by:
   717 ;;		_subProgram2
   718 ;; This function uses a non-reentrant model
   719 ;;
   720                           
   721                           	psect	text3
   722  001700                     __ptext3:
   723                           	opt callstack 0
   724  001700                     _convertValueToGrayCode:
   725                           	opt callstack 28
   726                           
   727                           ;incstack = 0
   728                           ;convertValueToGrayCode@value stored from wreg
   729  001700  6E01               	movwf	convertValueToGrayCode@value^0,c
   730  001702                     
   731                           ;main2.c: 271: unsigned char convertValueToGrayCode(unsigned char value);main2.c: 272: {
      +                          ;main2.c: 273:     return value ^ (value >> 1);
   732  001702  90D8               	bcf	status,0,c
   733  001704  3001               	rrcf	convertValueToGrayCode@value^0,w,c
   734  001706  1801               	xorwf	convertValueToGrayCode@value^0,w,c
   735  001708  0012               	return		;funcret
   736  00170A                     __end_of_convertValueToGrayCode:
   737                           	opt callstack 0
   738                           
   739 ;; *************** function _subProgram1 *****************
   740 ;; Defined at:
   741 ;;		line 241 in file "main2.c"
   742 ;; Parameters:    Size  Location     Type
   743 ;;		None
   744 ;; Auto vars:     Size  Location     Type
   745 ;;  binBuffer       8   22[COMRAM] unsigned char [8]
   746 ;;  counter         1   30[COMRAM] unsigned char 
   747 ;; Return value:  Size  Location     Type
   748 ;;                  1    wreg      void 
   749 ;; Registers used:
   750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   757 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   759 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   760 ;;Total ram usage:        9 bytes
   761 ;; Hardware stack levels used:    1
   762 ;; Hardware stack levels required when called:    3
   763 ;; This function calls:
   764 ;;		_delay
   765 ;;		_getDelay
   766 ;;		_intToBinary
   767 ;;		_isProgramInterupted
   768 ;;		_lcd_cmd
   769 ;;		_lcd_str
   770 ;;		_printMask
   771 ;; This function is called by:
   772 ;;		_runSubProgram
   773 ;; This function uses a non-reentrant model
   774 ;;
   775                           
   776                           	psect	text4
   777  001136                     __ptext4:
   778                           	opt callstack 0
   779  001136                     _subProgram1:
   780                           	opt callstack 26
   781  001136                     
   782                           ;main2.c: 243:     lcd_cmd(0x01);
   783  001136  0E01               	movlw	1
   784  001138  EC77  F00B         	call	_lcd_cmd
   785                           
   786                           ;main2.c: 244:     lcd_cmd(0x80);
   787  00113C  0E80               	movlw	128
   788  00113E  EC77  F00B         	call	_lcd_cmd
   789  001142                     
   790                           ;main2.c: 245:     lcd_str("Program 1 start");
   791  001142  0E12               	movlw	low STR_2
   792  001144  6E03               	movwf	lcd_str@str^0,c
   793  001146  0E10               	movlw	high STR_2
   794  001148  6E04               	movwf	(lcd_str@str+1)^0,c
   795  00114A  ECBB  F00A         	call	_lcd_str	;wreg free
   796  00114E                     
   797                           ;main2.c: 247:     unsigned char counter = 0;
   798  00114E  0E00               	movlw	0
   799  001150  6E1F               	movwf	subProgram1@counter^0,c
   800  001152                     l1299:
   801                           
   802                           ;main2.c: 252:         intToBinary(binBuffer, counter);
   803  001152  0E17               	movlw	low subProgram1@binBuffer
   804  001154  6E01               	movwf	intToBinary@buffor^0,c
   805  001156  0E00               	movlw	high subProgram1@binBuffer
   806  001158  6E02               	movwf	(intToBinary@buffor+1)^0,c
   807  00115A  C01F  F003         	movff	subProgram1@counter,intToBinary@value
   808  00115E  ECE3  F00A         	call	_intToBinary	;wreg free
   809  001162                     
   810                           ;main2.c: 254:         printMask(binBuffer);
   811  001162  0E17               	movlw	low subProgram1@binBuffer
   812  001164  6E01               	movwf	printMask@mask^0,c
   813  001166  0E00               	movlw	high subProgram1@binBuffer
   814  001168  6E02               	movwf	(printMask@mask+1)^0,c
   815  00116A  ECF7  F008         	call	_printMask	;wreg free
   816  00116E                     
   817                           ;main2.c: 256:         if (isProgramInterupted() == 1) return;
   818  00116E  EC2B  F00A         	call	_isProgramInterupted	;wreg free
   819  001172  0401               	decf	?_isProgramInterupted^0,w,c
   820  001174  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
   821  001176  A4D8               	btfss	status,2,c
   822  001178  EFC0  F008         	goto	u491
   823  00117C  EFC2  F008         	goto	u490
   824  001180                     u491:
   825  001180  EFC4  F008         	goto	l1307
   826  001184                     u490:
   827  001184  EFF6  F008         	goto	l105
   828  001188                     l1307:
   829                           
   830                           ;main2.c: 258:         delay(getDelay());
   831  001188  EC4E  F00B         	call	_getDelay	;wreg free
   832  00118C  C00F  F012         	movff	?_getDelay,delay@ms
   833  001190  C010  F013         	movff	?_getDelay+1,delay@ms+1
   834  001194  EC09  F00B         	call	_delay	;wreg free
   835  001198                     
   836                           ;main2.c: 260:         if (isProgramInterupted() == 1) return;
   837  001198  EC2B  F00A         	call	_isProgramInterupted	;wreg free
   838  00119C  0401               	decf	?_isProgramInterupted^0,w,c
   839  00119E  1002               	iorwf	(?_isProgramInterupted+1)^0,w,c
   840  0011A0  A4D8               	btfss	status,2,c
   841  0011A2  EFD5  F008         	goto	u501
   842  0011A6  EFD7  F008         	goto	u500
   843  0011AA                     u501:
   844  0011AA  EFD9  F008         	goto	l1313
   845  0011AE                     u500:
   846  0011AE  EFF6  F008         	goto	l105
   847  0011B2                     l1313:
   848                           
   849                           ;main2.c: 262:         counter++;
   850  0011B2  2A1F               	incf	subProgram1@counter^0,f,c
   851  0011B4                     
   852                           ;main2.c: 263:     } while (counter < 255);
   853  0011B4  281F               	incf	subProgram1@counter^0,w,c
   854  0011B6  A4D8               	btfss	status,2,c
   855  0011B8  EFE0  F008         	goto	u511
   856  0011BC  EFE2  F008         	goto	u510
   857  0011C0                     u511:
   858  0011C0  EFA9  F008         	goto	l1299
   859  0011C4                     u510:
   860  0011C4                     
   861                           ;main2.c: 265:     lcd_cmd(0x01);
   862  0011C4  0E01               	movlw	1
   863  0011C6  EC77  F00B         	call	_lcd_cmd
   864                           
   865                           ;main2.c: 266:     lcd_cmd(0x80);
   866  0011CA  0E80               	movlw	128
   867  0011CC  EC77  F00B         	call	_lcd_cmd
   868  0011D0                     
   869                           ;main2.c: 267:     lcd_str("Program 1 end");
   870  0011D0  0E32               	movlw	low STR_3
   871  0011D2  6E03               	movwf	lcd_str@str^0,c
   872  0011D4  0E10               	movlw	high STR_3
   873  0011D6  6E04               	movwf	(lcd_str@str+1)^0,c
   874  0011D8  ECBB  F00A         	call	_lcd_str	;wreg free
   875  0011DC                     
   876                           ;main2.c: 268:     delay(getDelay());
   877  0011DC  EC4E  F00B         	call	_getDelay	;wreg free
   878  0011E0  C00F  F012         	movff	?_getDelay,delay@ms
   879  0011E4  C010  F013         	movff	?_getDelay+1,delay@ms+1
   880  0011E8  EC09  F00B         	call	_delay	;wreg free
   881  0011EC                     l105:
   882  0011EC  0012               	return		;funcret
   883  0011EE                     __end_of_subProgram1:
   884                           	opt callstack 0
   885                           
   886 ;; *************** function _printMask *****************
   887 ;; Defined at:
   888 ;;		line 91 in file "main2.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;  mask            2    0[COMRAM] PTR unsigned char 
   891 ;;		 -> subProgram2@binBuffer(8), subProgram1@binBuffer(8), 
   892 ;; Auto vars:     Size  Location     Type
   893 ;;  value           1    2[COMRAM] unsigned char 
   894 ;; Return value:  Size  Location     Type
   895 ;;                  1    wreg      void 
   896 ;; Registers used:
   897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   898 ;; Tracked objects:
   899 ;;		On entry : 0/0
   900 ;;		On exit  : 0/0
   901 ;;		Unchanged: 0/0
   902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   903 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   904 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   906 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   907 ;;Total ram usage:        3 bytes
   908 ;; Hardware stack levels used:    1
   909 ;; This function calls:
   910 ;;		Nothing
   911 ;; This function is called by:
   912 ;;		_subProgram1
   913 ;;		_subProgram2
   914 ;; This function uses a non-reentrant model
   915 ;;
   916                           
   917                           	psect	text5
   918  0011EE                     __ptext5:
   919                           	opt callstack 0
   920  0011EE                     _printMask:
   921                           	opt callstack 28
   922  0011EE                     
   923                           ;main2.c: 91: void printMask(unsigned char * mask);main2.c: 92: {;main2.c: 93:     unsig
      +                          ned char value = 0;
   924  0011EE  0E00               	movlw	0
   925  0011F0  6E03               	movwf	printMask@value^0,c
   926  0011F2                     
   927                           ;main2.c: 95:     value += (mask[7] * 128);
   928  0011F2  EE20 F007          	lfsr	2,7
   929  0011F6  5001               	movf	printMask@mask^0,w,c
   930  0011F8  26D9               	addwf	fsr2l,f,c
   931  0011FA  5002               	movf	(printMask@mask+1)^0,w,c
   932  0011FC  22DA               	addwfc	fsr2h,f,c
   933  0011FE  50DF               	movf	indf2,w,c
   934  001200  0D80               	mullw	128
   935  001202  50F3               	movf	243,w,c
   936  001204  0800               	sublw	0
   937  001206  0800               	sublw	0
   938  001208  0800               	sublw	0
   939  00120A  0800               	sublw	0
   940  00120C  0800               	sublw	0
   941  00120E  0800               	sublw	0
   942  001210  0800               	sublw	0
   943  001212  0800               	sublw	0
   944  001214  0800               	sublw	0
   945  001216  2603               	addwf	printMask@value^0,f,c
   946  001218                     
   947                           ;main2.c: 96:     value += (mask[6] * 64);
   948  001218  EE20 F006          	lfsr	2,6
   949  00121C  5001               	movf	printMask@mask^0,w,c
   950  00121E  26D9               	addwf	fsr2l,f,c
   951  001220  5002               	movf	(printMask@mask+1)^0,w,c
   952  001222  22DA               	addwfc	fsr2h,f,c
   953  001224  50DF               	movf	indf2,w,c
   954  001226  0D40               	mullw	64
   955  001228  50F3               	movf	243,w,c
   956  00122A  2603               	addwf	printMask@value^0,f,c
   957  00122C                     
   958                           ;main2.c: 97:     value += (mask[5] * 32);
   959  00122C  EE20 F005          	lfsr	2,5
   960  001230  5001               	movf	printMask@mask^0,w,c
   961  001232  26D9               	addwf	fsr2l,f,c
   962  001234  5002               	movf	(printMask@mask+1)^0,w,c
   963  001236  22DA               	addwfc	fsr2h,f,c
   964  001238  50DF               	movf	indf2,w,c
   965  00123A  0D20               	mullw	32
   966  00123C  50F3               	movf	243,w,c
   967  00123E  2603               	addwf	printMask@value^0,f,c
   968  001240                     
   969                           ;main2.c: 98:     value += (mask[4] * 16);
   970  001240  EE20 F004          	lfsr	2,4
   971  001244  5001               	movf	printMask@mask^0,w,c
   972  001246  26D9               	addwf	fsr2l,f,c
   973  001248  5002               	movf	(printMask@mask+1)^0,w,c
   974  00124A  22DA               	addwfc	fsr2h,f,c
   975  00124C  50DF               	movf	indf2,w,c
   976  00124E  0D10               	mullw	16
   977  001250  50F3               	movf	243,w,c
   978  001252  2603               	addwf	printMask@value^0,f,c
   979  001254                     
   980                           ;main2.c: 99:     value += (mask[3] * 8);
   981  001254  EE20 F003          	lfsr	2,3
   982  001258  5001               	movf	printMask@mask^0,w,c
   983  00125A  26D9               	addwf	fsr2l,f,c
   984  00125C  5002               	movf	(printMask@mask+1)^0,w,c
   985  00125E  22DA               	addwfc	fsr2h,f,c
   986  001260  50DF               	movf	indf2,w,c
   987  001262  0D08               	mullw	8
   988  001264  50F3               	movf	243,w,c
   989  001266  2603               	addwf	printMask@value^0,f,c
   990  001268                     
   991                           ;main2.c: 100:     value += (mask[2] * 4);
   992  001268  EE20 F002          	lfsr	2,2
   993  00126C  5001               	movf	printMask@mask^0,w,c
   994  00126E  26D9               	addwf	fsr2l,f,c
   995  001270  5002               	movf	(printMask@mask+1)^0,w,c
   996  001272  22DA               	addwfc	fsr2h,f,c
   997  001274  50DF               	movf	indf2,w,c
   998  001276  0D04               	mullw	4
   999  001278  50F3               	movf	243,w,c
  1000  00127A  2603               	addwf	printMask@value^0,f,c
  1001  00127C                     
  1002                           ;main2.c: 101:     value += (mask[1] * 2);
  1003  00127C  EE20 F001          	lfsr	2,1
  1004  001280  5001               	movf	printMask@mask^0,w,c
  1005  001282  26D9               	addwf	fsr2l,f,c
  1006  001284  5002               	movf	(printMask@mask+1)^0,w,c
  1007  001286  22DA               	addwfc	fsr2h,f,c
  1008  001288  50DF               	movf	indf2,w,c
  1009  00128A  0D02               	mullw	2
  1010  00128C  50F3               	movf	243,w,c
  1011  00128E  2603               	addwf	printMask@value^0,f,c
  1012  001290                     
  1013                           ;main2.c: 102:     value += mask[0];
  1014  001290  C001  FFD9         	movff	printMask@mask,fsr2l
  1015  001294  C002  FFDA         	movff	printMask@mask+1,fsr2h
  1016  001298  50DF               	movf	indf2,w,c
  1017  00129A  2603               	addwf	printMask@value^0,f,c
  1018  00129C                     
  1019                           ;main2.c: 104:     PORTD = value;
  1020  00129C  C003  FF83         	movff	printMask@value,3971	;volatile
  1021  0012A0  0012               	return		;funcret
  1022  0012A2                     __end_of_printMask:
  1023                           	opt callstack 0
  1024                           
  1025 ;; *************** function _lcd_str *****************
  1026 ;; Defined at:
  1027 ;;		line 223 in file "main2.c"
  1028 ;; Parameters:    Size  Location     Type
  1029 ;;  str             2    2[COMRAM] PTR const unsigned char 
  1030 ;;		 -> STR_5(14), STR_4(16), STR_3(14), STR_2(16), 
  1031 ;; Auto vars:     Size  Location     Type
  1032 ;;  i               1    6[COMRAM] unsigned char 
  1033 ;; Return value:  Size  Location     Type
  1034 ;;                  1    wreg      void 
  1035 ;; Registers used:
  1036 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1037 ;; Tracked objects:
  1038 ;;		On entry : 0/0
  1039 ;;		On exit  : 0/0
  1040 ;;		Unchanged: 0/0
  1041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1042 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1043 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1044 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1045 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1046 ;;Total ram usage:        5 bytes
  1047 ;; Hardware stack levels used:    1
  1048 ;; Hardware stack levels required when called:    2
  1049 ;; This function calls:
  1050 ;;		_lcd_dat
  1051 ;; This function is called by:
  1052 ;;		_subProgram1
  1053 ;;		_subProgram2
  1054 ;; This function uses a non-reentrant model
  1055 ;;
  1056                           
  1057                           	psect	text6
  1058  001576                     __ptext6:
  1059                           	opt callstack 0
  1060  001576                     _lcd_str:
  1061                           	opt callstack 26
  1062  001576                     
  1063                           ;main2.c: 223: void lcd_str(const char* str);main2.c: 224: {;main2.c: 225:  unsigned cha
      +                          r i=0;
  1064  001576  0E00               	movlw	0
  1065  001578  6E07               	movwf	lcd_str@i^0,c
  1066                           
  1067                           ;main2.c: 227:  while(str[i] != 0 )
  1068  00157A  EFCE  F00A         	goto	l1265
  1069  00157E                     l1261:
  1070                           
  1071                           ;main2.c: 228:  {;main2.c: 229:    lcd_dat(str[i]);
  1072  00157E  5007               	movf	lcd_str@i^0,w,c
  1073  001580  2403               	addwf	lcd_str@str^0,w,c
  1074  001582  6E05               	movwf	??_lcd_str^0,c
  1075  001584  0E00               	movlw	0
  1076  001586  2004               	addwfc	(lcd_str@str+1)^0,w,c
  1077  001588  6E06               	movwf	(??_lcd_str+1)^0,c
  1078  00158A  C005  FFF6         	movff	??_lcd_str,tblptrl
  1079  00158E  C006  FFF7         	movff	??_lcd_str+1,tblptrh
  1080  001592                     	if	0	;tblptru may be non-zero
  1081  001592                     	endif
  1082  001592                     	if	0	;tblptru may be non-zero
  1083  001592                     	endif
  1084  001592  0008               	tblrd		*
  1085  001594  50F5               	movf	tablat,w,c
  1086  001596  EC6E  F00B         	call	_lcd_dat
  1087  00159A                     
  1088                           ;main2.c: 230:    i++;
  1089  00159A  2A07               	incf	lcd_str@i^0,f,c
  1090  00159C                     l1265:
  1091                           
  1092                           ;main2.c: 227:  while(str[i] != 0 )
  1093  00159C  5007               	movf	lcd_str@i^0,w,c
  1094  00159E  2403               	addwf	lcd_str@str^0,w,c
  1095  0015A0  6E05               	movwf	??_lcd_str^0,c
  1096  0015A2  0E00               	movlw	0
  1097  0015A4  2004               	addwfc	(lcd_str@str+1)^0,w,c
  1098  0015A6  6E06               	movwf	(??_lcd_str+1)^0,c
  1099  0015A8  C005  FFF6         	movff	??_lcd_str,tblptrl
  1100  0015AC  C006  FFF7         	movff	??_lcd_str+1,tblptrh
  1101  0015B0                     	if	0	;tblptru may be non-zero
  1102  0015B0                     	endif
  1103  0015B0                     	if	0	;tblptru may be non-zero
  1104  0015B0                     	endif
  1105  0015B0  0008               	tblrd		*
  1106  0015B2  50F5               	movf	tablat,w,c
  1107  0015B4  0900               	iorlw	0
  1108  0015B6  A4D8               	btfss	status,2,c
  1109  0015B8  EFE0  F00A         	goto	u431
  1110  0015BC  EFE2  F00A         	goto	u430
  1111  0015C0                     u431:
  1112  0015C0  EFBF  F00A         	goto	l1261
  1113  0015C4                     u430:
  1114  0015C4  0012               	return		;funcret
  1115  0015C6                     __end_of_lcd_str:
  1116                           	opt callstack 0
  1117                           
  1118 ;; *************** function _lcd_dat *****************
  1119 ;; Defined at:
  1120 ;;		line 193 in file "main2.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;  val             1    wreg     unsigned char 
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;  val             1    1[COMRAM] unsigned char 
  1125 ;; Return value:  Size  Location     Type
  1126 ;;                  1    wreg      void 
  1127 ;; Registers used:
  1128 ;;		wreg, status,2, cstack
  1129 ;; Tracked objects:
  1130 ;;		On entry : 0/0
  1131 ;;		On exit  : 0/0
  1132 ;;		Unchanged: 0/0
  1133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1135 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1137 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1138 ;;Total ram usage:        1 bytes
  1139 ;; Hardware stack levels used:    1
  1140 ;; Hardware stack levels required when called:    1
  1141 ;; This function calls:
  1142 ;;		_lcd_wr
  1143 ;; This function is called by:
  1144 ;;		_lcd_str
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           	psect	text7
  1149  0016DC                     __ptext7:
  1150                           	opt callstack 0
  1151  0016DC                     _lcd_dat:
  1152                           	opt callstack 26
  1153                           
  1154                           ;incstack = 0
  1155                           ;lcd_dat@val stored from wreg
  1156  0016DC  6E02               	movwf	lcd_dat@val^0,c
  1157  0016DE                     
  1158                           ;main2.c: 193: void lcd_dat(unsigned char val);main2.c: 194: {;main2.c: 195:  PORTEbits.
      +                          RE1=1;
  1159  0016DE  8284               	bsf	132,1,c	;volatile
  1160  0016E0                     
  1161                           ;main2.c: 196:         lcd_wr(val);
  1162  0016E0  5002               	movf	lcd_dat@val^0,w,c
  1163  0016E2  EC85  F00B         	call	_lcd_wr
  1164  0016E6                     
  1165                           ;main2.c: 197:         PORTEbits.RE2=1;
  1166  0016E6  8484               	bsf	132,2,c	;volatile
  1167  0016E8                     
  1168                           ;main2.c: 199:         PORTEbits.RE1=0;
  1169  0016E8  9284               	bcf	132,1,c	;volatile
  1170  0016EA                     
  1171                           ;main2.c: 201:  PORTEbits.RE1=1;
  1172  0016EA  8284               	bsf	132,1,c	;volatile
  1173  0016EC  0012               	return		;funcret
  1174  0016EE                     __end_of_lcd_dat:
  1175                           	opt callstack 0
  1176                           
  1177 ;; *************** function _isProgramInterupted *****************
  1178 ;; Defined at:
  1179 ;;		line 323 in file "main2.c"
  1180 ;; Parameters:    Size  Location     Type
  1181 ;;		None
  1182 ;; Auto vars:     Size  Location     Type
  1183 ;;  i               2    2[COMRAM] unsigned int 
  1184 ;; Return value:  Size  Location     Type
  1185 ;;                  2    0[COMRAM] int 
  1186 ;; Registers used:
  1187 ;;		wreg, status,2, status,0
  1188 ;; Tracked objects:
  1189 ;;		On entry : 0/0
  1190 ;;		On exit  : 0/0
  1191 ;;		Unchanged: 0/0
  1192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1193 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1194 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1196 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1197 ;;Total ram usage:        4 bytes
  1198 ;; Hardware stack levels used:    1
  1199 ;; This function calls:
  1200 ;;		Nothing
  1201 ;; This function is called by:
  1202 ;;		_subProgram1
  1203 ;;		_subProgram2
  1204 ;; This function uses a non-reentrant model
  1205 ;;
  1206                           
  1207                           	psect	text8
  1208  001456                     __ptext8:
  1209                           	opt callstack 0
  1210  001456                     _isProgramInterupted:
  1211                           	opt callstack 28
  1212  001456                     
  1213                           ;main2.c: 325:     unsigned int i = 6000;
  1214  001456  0E17               	movlw	23
  1215  001458  6E04               	movwf	(isProgramInterupted@i+1)^0,c
  1216  00145A  0E70               	movlw	112
  1217  00145C  6E03               	movwf	isProgramInterupted@i^0,c
  1218                           
  1219                           ;main2.c: 327:     while(PORTBbits.RB4 && PORTBbits.RB3 && i > 0)
  1220  00145E  EF34  F00A         	goto	l1277
  1221  001462                     l1275:
  1222                           
  1223                           ;main2.c: 328:     {;main2.c: 329:         i--;
  1224  001462  0603               	decf	isProgramInterupted@i^0,f,c
  1225  001464  A0D8               	btfss	status,0,c
  1226  001466  0604               	decf	(isProgramInterupted@i+1)^0,f,c
  1227  001468                     l1277:
  1228                           
  1229                           ;main2.c: 327:     while(PORTBbits.RB4 && PORTBbits.RB3 && i > 0)
  1230  001468  A881               	btfss	129,4,c	;volatile
  1231  00146A  EF39  F00A         	goto	u441
  1232  00146E  EF3B  F00A         	goto	u440
  1233  001472                     u441:
  1234  001472  EF4B  F00A         	goto	l131
  1235  001476                     u440:
  1236  001476  A681               	btfss	129,3,c	;volatile
  1237  001478  EF40  F00A         	goto	u451
  1238  00147C  EF42  F00A         	goto	u450
  1239  001480                     u451:
  1240  001480  EF4B  F00A         	goto	l131
  1241  001484                     u450:
  1242  001484  5003               	movf	isProgramInterupted@i^0,w,c
  1243  001486  1004               	iorwf	(isProgramInterupted@i+1)^0,w,c
  1244  001488  A4D8               	btfss	status,2,c
  1245  00148A  EF49  F00A         	goto	u461
  1246  00148E  EF4B  F00A         	goto	u460
  1247  001492                     u461:
  1248  001492  EF31  F00A         	goto	l1275
  1249  001496                     u460:
  1250  001496                     l131:
  1251                           
  1252                           ;main2.c: 332:     if((PORTBbits.RB3 == 0) || (PORTBbits.RB4 == 0))
  1253  001496  A681               	btfss	129,3,c	;volatile
  1254  001498  EF50  F00A         	goto	u471
  1255  00149C  EF52  F00A         	goto	u470
  1256  0014A0                     u471:
  1257  0014A0  EF59  F00A         	goto	l1285
  1258  0014A4                     u470:
  1259  0014A4  B881               	btfsc	129,4,c	;volatile
  1260  0014A6  EF57  F00A         	goto	u481
  1261  0014AA  EF59  F00A         	goto	u480
  1262  0014AE                     u481:
  1263  0014AE  EF5F  F00A         	goto	l1289
  1264  0014B2                     u480:
  1265  0014B2                     l1285:
  1266                           
  1267                           ;main2.c: 333:     {;main2.c: 334:         return 1;
  1268  0014B2  0E00               	movlw	0
  1269  0014B4  6E02               	movwf	(?_isProgramInterupted+1)^0,c
  1270  0014B6  0E01               	movlw	1
  1271  0014B8  6E01               	movwf	?_isProgramInterupted^0,c
  1272  0014BA  EF63  F00A         	goto	l135
  1273  0014BE                     l1289:
  1274                           
  1275                           ;main2.c: 337:     return 0;
  1276  0014BE  0E00               	movlw	0
  1277  0014C0  6E02               	movwf	(?_isProgramInterupted+1)^0,c
  1278  0014C2  0E00               	movlw	0
  1279  0014C4  6E01               	movwf	?_isProgramInterupted^0,c
  1280  0014C6                     l135:
  1281  0014C6  0012               	return		;funcret
  1282  0014C8                     __end_of_isProgramInterupted:
  1283                           	opt callstack 0
  1284                           
  1285 ;; *************** function _intToBinary *****************
  1286 ;; Defined at:
  1287 ;;		line 81 in file "main2.c"
  1288 ;; Parameters:    Size  Location     Type
  1289 ;;  buffor          2    0[COMRAM] PTR unsigned char 
  1290 ;;		 -> subProgram2@binBuffer(8), subProgram1@binBuffer(8), 
  1291 ;;  value           1    2[COMRAM] unsigned char 
  1292 ;; Auto vars:     Size  Location     Type
  1293 ;;  i               2    5[COMRAM] short 
  1294 ;; Return value:  Size  Location     Type
  1295 ;;                  1    wreg      void 
  1296 ;; Registers used:
  1297 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1298 ;; Tracked objects:
  1299 ;;		On entry : 0/0
  1300 ;;		On exit  : 0/0
  1301 ;;		Unchanged: 0/0
  1302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1303 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1304 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1305 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1306 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1307 ;;Total ram usage:        7 bytes
  1308 ;; Hardware stack levels used:    1
  1309 ;; This function calls:
  1310 ;;		Nothing
  1311 ;; This function is called by:
  1312 ;;		_subProgram1
  1313 ;;		_subProgram2
  1314 ;; This function uses a non-reentrant model
  1315 ;;
  1316                           
  1317                           	psect	text9
  1318  0015C6                     __ptext9:
  1319                           	opt callstack 0
  1320  0015C6                     _intToBinary:
  1321                           	opt callstack 28
  1322  0015C6                     
  1323                           ;main2.c: 81: void intToBinary(unsigned char * buffor, unsigned char value);main2.c: 82:
      +                           {;main2.c: 83:     short i = 7;
  1324  0015C6  0E00               	movlw	0
  1325  0015C8  6E07               	movwf	(intToBinary@i+1)^0,c
  1326  0015CA  0E07               	movlw	7
  1327  0015CC  6E06               	movwf	intToBinary@i^0,c
  1328                           
  1329                           ;main2.c: 84:     while (i >= 0) {
  1330  0015CE  EF01  F00B         	goto	l1221
  1331  0015D2                     l1217:
  1332                           
  1333                           ;main2.c: 85:         buffor[i] = ((value >> i) & 1);
  1334  0015D2  5006               	movf	intToBinary@i^0,w,c
  1335  0015D4  2401               	addwf	intToBinary@buffor^0,w,c
  1336  0015D6  6ED9               	movwf	fsr2l,c
  1337  0015D8  5007               	movf	(intToBinary@i+1)^0,w,c
  1338  0015DA  2002               	addwfc	(intToBinary@buffor+1)^0,w,c
  1339  0015DC  6EDA               	movwf	fsr2h,c
  1340  0015DE  C006  F004         	movff	intToBinary@i,??_intToBinary
  1341  0015E2  C003  F005         	movff	intToBinary@value,??_intToBinary+1
  1342  0015E6  2A04               	incf	??_intToBinary^0,f,c
  1343  0015E8  EFF8  F00A         	goto	u394
  1344  0015EC                     u395:
  1345  0015EC  90D8               	bcf	status,0,c
  1346  0015EE  3205               	rrcf	(??_intToBinary+1)^0,f,c
  1347  0015F0                     u394:
  1348  0015F0  2E04               	decfsz	??_intToBinary^0,f,c
  1349  0015F2  EFF6  F00A         	goto	u395
  1350  0015F6  5005               	movf	(??_intToBinary+1)^0,w,c
  1351  0015F8  0B01               	andlw	1
  1352  0015FA  6EDF               	movwf	indf2,c
  1353  0015FC                     
  1354                           ;main2.c: 86:         i--;
  1355  0015FC  0606               	decf	intToBinary@i^0,f,c
  1356  0015FE  A0D8               	btfss	status,0,c
  1357  001600  0607               	decf	(intToBinary@i+1)^0,f,c
  1358  001602                     l1221:
  1359                           
  1360                           ;main2.c: 84:     while (i >= 0) {
  1361  001602  BE07               	btfsc	(intToBinary@i+1)^0,7,c
  1362  001604  EF08  F00B         	goto	u400
  1363  001608  EF06  F00B         	goto	u401
  1364  00160C                     u401:
  1365  00160C  EFE9  F00A         	goto	l1217
  1366  001610                     u400:
  1367  001610  0012               	return		;funcret
  1368  001612                     __end_of_intToBinary:
  1369                           	opt callstack 0
  1370                           
  1371 ;; *************** function _getDelay *****************
  1372 ;; Defined at:
  1373 ;;		line 234 in file "main2.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;		None
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;  delay           1   16[COMRAM] unsigned char 
  1378 ;; Return value:  Size  Location     Type
  1379 ;;                  2   14[COMRAM] unsigned int 
  1380 ;; Registers used:
  1381 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1382 ;; Tracked objects:
  1383 ;;		On entry : 0/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1387 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1388 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1390 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1391 ;;Total ram usage:        3 bytes
  1392 ;; Hardware stack levels used:    1
  1393 ;; Hardware stack levels required when called:    1
  1394 ;; This function calls:
  1395 ;;		___lwdiv
  1396 ;;		_adc
  1397 ;; This function is called by:
  1398 ;;		_subProgram1
  1399 ;;		_subProgram2
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           	psect	text10
  1404  00169C                     __ptext10:
  1405                           	opt callstack 0
  1406  00169C                     _getDelay:
  1407                           	opt callstack 27
  1408  00169C                     
  1409                           ;main2.c: 236:     unsigned char delay = (unsigned char)(((unsigned int)adc(1) / 240)) *
      +                           250;
  1410  00169C  0E01               	movlw	1
  1411  00169E  ECA9  F009         	call	_adc
  1412  0016A2  C001  F008         	movff	?_adc,___lwdiv@dividend
  1413  0016A6  C002  F009         	movff	?_adc+1,___lwdiv@dividend+1
  1414  0016AA  0E00               	movlw	0
  1415  0016AC  6E0B               	movwf	(___lwdiv@divisor+1)^0,c
  1416  0016AE  0EF0               	movlw	240
  1417  0016B0  6E0A               	movwf	___lwdiv@divisor^0,c
  1418  0016B2  ECF1  F009         	call	___lwdiv	;wreg free
  1419  0016B6  5008               	movf	?___lwdiv^0,w,c
  1420  0016B8  0DFA               	mullw	250
  1421  0016BA  CFF3 F011          	movff	prodl,getDelay@delay
  1422  0016BE                     
  1423                           ;main2.c: 238:     return delay;
  1424  0016BE  C011  F00F         	movff	getDelay@delay,?_getDelay
  1425  0016C2  6A10               	clrf	(?_getDelay+1)^0,c
  1426  0016C4  0012               	return		;funcret
  1427  0016C6                     __end_of_getDelay:
  1428                           	opt callstack 0
  1429                           
  1430 ;; *************** function _adc *****************
  1431 ;; Defined at:
  1432 ;;		line 162 in file "main2.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;  kanal           1    wreg     unsigned char 
  1435 ;; Auto vars:     Size  Location     Type
  1436 ;;  kanal           1    6[COMRAM] unsigned char 
  1437 ;; Return value:  Size  Location     Type
  1438 ;;                  2    0[COMRAM] unsigned int 
  1439 ;; Registers used:
  1440 ;;		wreg, status,2, status,0
  1441 ;; Tracked objects:
  1442 ;;		On entry : 0/0
  1443 ;;		On exit  : 0/0
  1444 ;;		Unchanged: 0/0
  1445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1446 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1447 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1448 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1449 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1450 ;;Total ram usage:        7 bytes
  1451 ;; Hardware stack levels used:    1
  1452 ;; This function calls:
  1453 ;;		Nothing
  1454 ;; This function is called by:
  1455 ;;		_getDelay
  1456 ;; This function uses a non-reentrant model
  1457 ;;
  1458                           
  1459                           	psect	text11
  1460  001352                     __ptext11:
  1461                           	opt callstack 0
  1462  001352                     _adc:
  1463                           	opt callstack 27
  1464                           
  1465                           ;incstack = 0
  1466                           ;adc@kanal stored from wreg
  1467  001352  6E07               	movwf	adc@kanal^0,c
  1468  001354                     
  1469                           ;main2.c: 162: unsigned int adc(unsigned char kanal);main2.c: 163: {;main2.c: 164:     s
      +                          witch(kanal)
  1470  001354  EFB8  F009         	goto	l1183
  1471  001358                     l1175:
  1472  001358  0E01               	movlw	1
  1473  00135A  6EC2               	movwf	194,c	;volatile
  1474  00135C  EFD1  F009         	goto	l73
  1475  001360                     l1177:
  1476  001360  0E05               	movlw	5
  1477  001362  6EC2               	movwf	194,c	;volatile
  1478  001364  EFD1  F009         	goto	l73
  1479  001368                     l1179:
  1480  001368  0E09               	movlw	9
  1481  00136A  6EC2               	movwf	194,c	;volatile
  1482  00136C  EFD1  F009         	goto	l73
  1483  001370                     l1183:
  1484  001370  5007               	movf	adc@kanal^0,w,c
  1485  001372  6E03               	movwf	??_adc^0,c
  1486  001374  6A04               	clrf	(??_adc+1)^0,c
  1487                           
  1488                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1489                           ; Switch size 1, requested type "simple"
  1490                           ; Number of cases is 1, Range of values is 0 to 0
  1491                           ; switch strategies available:
  1492                           ; Name         Instructions Cycles
  1493                           ; simple_byte            4     3 (average)
  1494                           ;	Chosen strategy is simple_byte
  1495  001376  5004               	movf	(??_adc+1)^0,w,c
  1496  001378  0A00               	xorlw	0	; case 0
  1497  00137A  B4D8               	btfsc	status,2,c
  1498  00137C  EFC2  F009         	goto	l1437
  1499  001380  EFD1  F009         	goto	l73
  1500  001384                     l1437:
  1501                           
  1502                           ; Switch size 1, requested type "simple"
  1503                           ; Number of cases is 3, Range of values is 0 to 2
  1504                           ; switch strategies available:
  1505                           ; Name         Instructions Cycles
  1506                           ; simple_byte           10     6 (average)
  1507                           ;	Chosen strategy is simple_byte
  1508  001384  5003               	movf	??_adc^0,w,c
  1509  001386  0A00               	xorlw	0	; case 0
  1510  001388  B4D8               	btfsc	status,2,c
  1511  00138A  EFAC  F009         	goto	l1175
  1512  00138E  0A01               	xorlw	1	; case 1
  1513  001390  B4D8               	btfsc	status,2,c
  1514  001392  EFB0  F009         	goto	l1177
  1515  001396  0A03               	xorlw	3	; case 2
  1516  001398  B4D8               	btfsc	status,2,c
  1517  00139A  EFB4  F009         	goto	l1179
  1518  00139E  EFD1  F009         	goto	l73
  1519  0013A2                     l73:
  1520                           
  1521                           ;main2.c: 171:     ADCON0bits.GO=1;
  1522  0013A2  82C2               	bsf	194,1,c	;volatile
  1523  0013A4                     l76:
  1524  0013A4  B2C2               	btfsc	194,1,c	;volatile
  1525  0013A6  EFD7  F009         	goto	u341
  1526  0013AA  EFD9  F009         	goto	u340
  1527  0013AE                     u341:
  1528  0013AE  EFD2  F009         	goto	l76
  1529  0013B2                     u340:
  1530  0013B2                     
  1531                           ;main2.c: 174:    return ((((unsigned int)ADRESH)<<2)|(ADRESL>>6));
  1532  0013B2  CFC3 F003          	movff	4035,??_adc	;volatile
  1533  0013B6  0E06               	movlw	6
  1534  0013B8  6E04               	movwf	(??_adc+1)^0,c
  1535  0013BA                     u355:
  1536  0013BA  90D8               	bcf	status,0,c
  1537  0013BC  3203               	rrcf	??_adc^0,f,c
  1538  0013BE  2E04               	decfsz	(??_adc+1)^0,f,c
  1539  0013C0  EFDD  F009         	goto	u355
  1540  0013C4  5003               	movf	??_adc^0,w,c
  1541  0013C6  CFC4 F005          	movff	4036,??_adc+2	;volatile
  1542  0013CA  6A06               	clrf	(??_adc+3)^0,c
  1543  0013CC  90D8               	bcf	status,0,c
  1544  0013CE  3605               	rlcf	(??_adc+2)^0,f,c
  1545  0013D0  3606               	rlcf	(??_adc+3)^0,f,c
  1546  0013D2  90D8               	bcf	status,0,c
  1547  0013D4  3605               	rlcf	(??_adc+2)^0,f,c
  1548  0013D6  3606               	rlcf	(??_adc+3)^0,f,c
  1549  0013D8  1005               	iorwf	(??_adc+2)^0,w,c
  1550  0013DA  6E01               	movwf	?_adc^0,c
  1551  0013DC  5006               	movf	(??_adc+3)^0,w,c
  1552  0013DE  6E02               	movwf	(?_adc+1)^0,c
  1553  0013E0  0012               	return		;funcret
  1554  0013E2                     __end_of_adc:
  1555                           	opt callstack 0
  1556                           
  1557 ;; *************** function ___lwdiv *****************
  1558 ;; Defined at:
  1559 ;;		line 7 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/lwdiv.c"
  1560 ;; Parameters:    Size  Location     Type
  1561 ;;  dividend        2    7[COMRAM] unsigned int 
  1562 ;;  divisor         2    9[COMRAM] unsigned int 
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;  quotient        2   11[COMRAM] unsigned int 
  1565 ;;  counter         1   13[COMRAM] unsigned char 
  1566 ;; Return value:  Size  Location     Type
  1567 ;;                  2    7[COMRAM] unsigned int 
  1568 ;; Registers used:
  1569 ;;		wreg, status,2, status,0
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1575 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1576 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1578 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1579 ;;Total ram usage:        7 bytes
  1580 ;; Hardware stack levels used:    1
  1581 ;; This function calls:
  1582 ;;		Nothing
  1583 ;; This function is called by:
  1584 ;;		_getDelay
  1585 ;; This function uses a non-reentrant model
  1586 ;;
  1587                           
  1588                           	psect	text12
  1589  0013E2                     __ptext12:
  1590                           	opt callstack 0
  1591  0013E2                     ___lwdiv:
  1592                           	opt callstack 27
  1593  0013E2  0E00               	movlw	0
  1594  0013E4  6E0D               	movwf	(___lwdiv@quotient+1)^0,c
  1595  0013E6  0E00               	movlw	0
  1596  0013E8  6E0C               	movwf	___lwdiv@quotient^0,c
  1597  0013EA  500A               	movf	___lwdiv@divisor^0,w,c
  1598  0013EC  100B               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1599  0013EE  B4D8               	btfsc	status,2,c
  1600  0013F0  EFFC  F009         	goto	u361
  1601  0013F4  EFFE  F009         	goto	u360
  1602  0013F8                     u361:
  1603  0013F8  EF26  F00A         	goto	l658
  1604  0013FC                     u360:
  1605  0013FC  0E01               	movlw	1
  1606  0013FE  6E0E               	movwf	___lwdiv@counter^0,c
  1607  001400  EF06  F00A         	goto	l1201
  1608  001404                     l1199:
  1609  001404  90D8               	bcf	status,0,c
  1610  001406  360A               	rlcf	___lwdiv@divisor^0,f,c
  1611  001408  360B               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1612  00140A  2A0E               	incf	___lwdiv@counter^0,f,c
  1613  00140C                     l1201:
  1614  00140C  AE0B               	btfss	(___lwdiv@divisor+1)^0,7,c
  1615  00140E  EF0B  F00A         	goto	u371
  1616  001412  EF0D  F00A         	goto	u370
  1617  001416                     u371:
  1618  001416  EF02  F00A         	goto	l1199
  1619  00141A                     u370:
  1620  00141A                     l1203:
  1621  00141A  90D8               	bcf	status,0,c
  1622  00141C  360C               	rlcf	___lwdiv@quotient^0,f,c
  1623  00141E  360D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1624  001420  500A               	movf	___lwdiv@divisor^0,w,c
  1625  001422  5C08               	subwf	___lwdiv@dividend^0,w,c
  1626  001424  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  1627  001426  5809               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1628  001428  A0D8               	btfss	status,0,c
  1629  00142A  EF19  F00A         	goto	u381
  1630  00142E  EF1B  F00A         	goto	u380
  1631  001432                     u381:
  1632  001432  EF20  F00A         	goto	l1211
  1633  001436                     u380:
  1634  001436  500A               	movf	___lwdiv@divisor^0,w,c
  1635  001438  5E08               	subwf	___lwdiv@dividend^0,f,c
  1636  00143A  500B               	movf	(___lwdiv@divisor+1)^0,w,c
  1637  00143C  5A09               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1638  00143E  800C               	bsf	___lwdiv@quotient^0,0,c
  1639  001440                     l1211:
  1640  001440  90D8               	bcf	status,0,c
  1641  001442  320B               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1642  001444  320A               	rrcf	___lwdiv@divisor^0,f,c
  1643  001446  2E0E               	decfsz	___lwdiv@counter^0,f,c
  1644  001448  EF0D  F00A         	goto	l1203
  1645  00144C                     l658:
  1646  00144C  C00C  F008         	movff	___lwdiv@quotient,?___lwdiv
  1647  001450  C00D  F009         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1648  001454  0012               	return		;funcret
  1649  001456                     __end_of___lwdiv:
  1650                           	opt callstack 0
  1651                           
  1652 ;; *************** function _lcd_init *****************
  1653 ;; Defined at:
  1654 ;;		line 204 in file "main2.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;		None
  1657 ;; Auto vars:     Size  Location     Type
  1658 ;;		None
  1659 ;; Return value:  Size  Location     Type
  1660 ;;                  1    wreg      void 
  1661 ;; Registers used:
  1662 ;;		wreg, status,2, status,0, cstack
  1663 ;; Tracked objects:
  1664 ;;		On entry : 0/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1672 ;;Total ram usage:        0 bytes
  1673 ;; Hardware stack levels used:    1
  1674 ;; Hardware stack levels required when called:    2
  1675 ;; This function calls:
  1676 ;;		_delay
  1677 ;;		_lcd_cmd
  1678 ;; This function is called by:
  1679 ;;		_main
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683                           	psect	text13
  1684  0014C8                     __ptext13:
  1685                           	opt callstack 0
  1686  0014C8                     _lcd_init:
  1687                           	opt callstack 28
  1688  0014C8                     
  1689                           ;main2.c: 206:  PORTEbits.RE1=0;
  1690  0014C8  9284               	bcf	132,1,c	;volatile
  1691                           
  1692                           ;main2.c: 207:  PORTEbits.RE2=0;
  1693  0014CA  9484               	bcf	132,2,c	;volatile
  1694  0014CC                     
  1695                           ;main2.c: 208:  delay(20);
  1696  0014CC  0E00               	movlw	0
  1697  0014CE  6E13               	movwf	(delay@ms+1)^0,c
  1698  0014D0  0E14               	movlw	20
  1699  0014D2  6E12               	movwf	delay@ms^0,c
  1700  0014D4  EC09  F00B         	call	_delay	;wreg free
  1701  0014D8                     
  1702                           ;main2.c: 209:  PORTEbits.RE1=1;
  1703  0014D8  8284               	bsf	132,1,c	;volatile
  1704  0014DA                     
  1705                           ;main2.c: 211:  lcd_cmd(0x38);
  1706  0014DA  0E38               	movlw	56
  1707  0014DC  EC77  F00B         	call	_lcd_cmd
  1708  0014E0                     
  1709                           ;main2.c: 212:  delay(5);
  1710  0014E0  0E00               	movlw	0
  1711  0014E2  6E13               	movwf	(delay@ms+1)^0,c
  1712  0014E4  0E05               	movlw	5
  1713  0014E6  6E12               	movwf	delay@ms^0,c
  1714  0014E8  EC09  F00B         	call	_delay	;wreg free
  1715                           
  1716                           ;main2.c: 213:  lcd_cmd(0x38);
  1717  0014EC  0E38               	movlw	56
  1718  0014EE  EC77  F00B         	call	_lcd_cmd
  1719  0014F2                     
  1720                           ;main2.c: 214:         delay(1);
  1721  0014F2  0E00               	movlw	0
  1722  0014F4  6E13               	movwf	(delay@ms+1)^0,c
  1723  0014F6  0E01               	movlw	1
  1724  0014F8  6E12               	movwf	delay@ms^0,c
  1725  0014FA  EC09  F00B         	call	_delay	;wreg free
  1726  0014FE                     
  1727                           ;main2.c: 215:  lcd_cmd(0x38);
  1728  0014FE  0E38               	movlw	56
  1729  001500  EC77  F00B         	call	_lcd_cmd
  1730  001504                     
  1731                           ;main2.c: 216:  lcd_cmd(0x08);
  1732  001504  0E08               	movlw	8
  1733  001506  EC77  F00B         	call	_lcd_cmd
  1734  00150A                     
  1735                           ;main2.c: 217:  lcd_cmd(0x0F);
  1736  00150A  0E0F               	movlw	15
  1737  00150C  EC77  F00B         	call	_lcd_cmd
  1738  001510                     
  1739                           ;main2.c: 218:  lcd_cmd(0x01);
  1740  001510  0E01               	movlw	1
  1741  001512  EC77  F00B         	call	_lcd_cmd
  1742  001516                     
  1743                           ;main2.c: 219:  lcd_cmd(0x38);
  1744  001516  0E38               	movlw	56
  1745  001518  EC77  F00B         	call	_lcd_cmd
  1746  00151C                     
  1747                           ;main2.c: 220:         lcd_cmd(0x80);
  1748  00151C  0E80               	movlw	128
  1749  00151E  EC77  F00B         	call	_lcd_cmd
  1750  001522  0012               	return		;funcret
  1751  001524                     __end_of_lcd_init:
  1752                           	opt callstack 0
  1753                           
  1754 ;; *************** function _lcd_cmd *****************
  1755 ;; Defined at:
  1756 ;;		line 182 in file "main2.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  val             1    wreg     unsigned char 
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;  val             1    1[COMRAM] unsigned char 
  1761 ;; Return value:  Size  Location     Type
  1762 ;;                  1    wreg      void 
  1763 ;; Registers used:
  1764 ;;		wreg, status,2, cstack
  1765 ;; Tracked objects:
  1766 ;;		On entry : 0/0
  1767 ;;		On exit  : 0/0
  1768 ;;		Unchanged: 0/0
  1769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1771 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1773 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1774 ;;Total ram usage:        1 bytes
  1775 ;; Hardware stack levels used:    1
  1776 ;; Hardware stack levels required when called:    1
  1777 ;; This function calls:
  1778 ;;		_lcd_wr
  1779 ;; This function is called by:
  1780 ;;		_lcd_init
  1781 ;;		_subProgram1
  1782 ;;		_subProgram2
  1783 ;;		_main
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           	psect	text14
  1788  0016EE                     __ptext14:
  1789                           	opt callstack 0
  1790  0016EE                     _lcd_cmd:
  1791                           	opt callstack 27
  1792                           
  1793                           ;incstack = 0
  1794                           ;lcd_cmd@val stored from wreg
  1795  0016EE  6E02               	movwf	lcd_cmd@val^0,c
  1796  0016F0                     
  1797                           ;main2.c: 182: void lcd_cmd(unsigned char val);main2.c: 183: {;main2.c: 184:  PORTEbits.
      +                          RE1=1;
  1798  0016F0  8284               	bsf	132,1,c	;volatile
  1799  0016F2                     
  1800                           ;main2.c: 185:         lcd_wr(val);
  1801  0016F2  5002               	movf	lcd_cmd@val^0,w,c
  1802  0016F4  EC85  F00B         	call	_lcd_wr
  1803  0016F8                     
  1804                           ;main2.c: 186:         PORTEbits.RE2=0;
  1805  0016F8  9484               	bcf	132,2,c	;volatile
  1806  0016FA                     
  1807                           ;main2.c: 188:         PORTEbits.RE1=0;
  1808  0016FA  9284               	bcf	132,1,c	;volatile
  1809  0016FC                     
  1810                           ;main2.c: 190:  PORTEbits.RE1=1;
  1811  0016FC  8284               	bsf	132,1,c	;volatile
  1812  0016FE  0012               	return		;funcret
  1813  001700                     __end_of_lcd_cmd:
  1814                           	opt callstack 0
  1815                           
  1816 ;; *************** function _lcd_wr *****************
  1817 ;; Defined at:
  1818 ;;		line 177 in file "main2.c"
  1819 ;; Parameters:    Size  Location     Type
  1820 ;;  val             1    wreg     unsigned char 
  1821 ;; Auto vars:     Size  Location     Type
  1822 ;;  val             1    0[COMRAM] unsigned char 
  1823 ;; Return value:  Size  Location     Type
  1824 ;;                  1    wreg      void 
  1825 ;; Registers used:
  1826 ;;		wreg
  1827 ;; Tracked objects:
  1828 ;;		On entry : 0/0
  1829 ;;		On exit  : 0/0
  1830 ;;		Unchanged: 0/0
  1831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1833 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1835 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1836 ;;Total ram usage:        1 bytes
  1837 ;; Hardware stack levels used:    1
  1838 ;; This function calls:
  1839 ;;		Nothing
  1840 ;; This function is called by:
  1841 ;;		_lcd_cmd
  1842 ;;		_lcd_dat
  1843 ;; This function uses a non-reentrant model
  1844 ;;
  1845                           
  1846                           	psect	text15
  1847  00170A                     __ptext15:
  1848                           	opt callstack 0
  1849  00170A                     _lcd_wr:
  1850                           	opt callstack 26
  1851                           
  1852                           ;incstack = 0
  1853                           ;lcd_wr@val stored from wreg
  1854  00170A  6E01               	movwf	lcd_wr@val^0,c
  1855  00170C                     
  1856                           ;main2.c: 177: void lcd_wr(unsigned char val);main2.c: 178: {;main2.c: 179:   PORTD=val;
  1857  00170C  C001  FF83         	movff	lcd_wr@val,3971	;volatile
  1858  001710  0012               	return		;funcret
  1859  001712                     __end_of_lcd_wr:
  1860                           	opt callstack 0
  1861                           
  1862 ;; *************** function _delay *****************
  1863 ;; Defined at:
  1864 ;;		line 143 in file "main2.c"
  1865 ;; Parameters:    Size  Location     Type
  1866 ;;  ms              2   17[COMRAM] unsigned int 
  1867 ;; Auto vars:     Size  Location     Type
  1868 ;;  i               2   19[COMRAM] unsigned int 
  1869 ;;  j               1   21[COMRAM] unsigned char 
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  1    wreg      void 
  1872 ;; Registers used:
  1873 ;;		wreg, status,2, status,0
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1879 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1880 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1882 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1883 ;;Total ram usage:        5 bytes
  1884 ;; Hardware stack levels used:    1
  1885 ;; This function calls:
  1886 ;;		Nothing
  1887 ;; This function is called by:
  1888 ;;		_lcd_init
  1889 ;;		_subProgram1
  1890 ;;		_subProgram2
  1891 ;; This function uses a non-reentrant model
  1892 ;;
  1893                           
  1894                           	psect	text16
  1895  001612                     __ptext16:
  1896                           	opt callstack 0
  1897  001612                     _delay:
  1898                           	opt callstack 28
  1899  001612                     
  1900                           ;main2.c: 143: void delay(unsigned int ms);main2.c: 144: {;main2.c: 145:     unsigned in
      +                          t i;;main2.c: 146:     unsigned char j;;main2.c: 148:  for (i =0; i< ms; i++)
  1901  001612  0E00               	movlw	0
  1902  001614  6E15               	movwf	(delay@i+1)^0,c
  1903  001616  0E00               	movlw	0
  1904  001618  6E14               	movwf	delay@i^0,c
  1905  00161A  EF21  F00B         	goto	l1257
  1906  00161E                     l1245:
  1907                           
  1908                           ;main2.c: 149:  {;main2.c: 151:   for (j =0 ; j < 200; j++)
  1909  00161E  0E00               	movlw	0
  1910  001620  6E16               	movwf	delay@j^0,c
  1911  001622                     l65:
  1912                           
  1913                           ;main2.c: 152:    {;main2.c: 153:       __nop();
  1914  001622  F000               	nop	
  1915                           
  1916                           ;main2.c: 154:       __nop();
  1917  001624  F000               	nop	
  1918                           
  1919                           ;main2.c: 155:       __nop();
  1920  001626  F000               	nop	
  1921                           
  1922                           ;main2.c: 156:       __nop();
  1923  001628  F000               	nop	
  1924                           
  1925                           ;main2.c: 157:       __nop();
  1926  00162A  F000               	nop	
  1927  00162C                     
  1928                           ;main2.c: 158:    }
  1929  00162C  2A16               	incf	delay@j^0,f,c
  1930  00162E  0EC7               	movlw	199
  1931  001630  6416               	cpfsgt	delay@j^0,c
  1932  001632  EF1D  F00B         	goto	u411
  1933  001636  EF1F  F00B         	goto	u410
  1934  00163A                     u411:
  1935  00163A  EF11  F00B         	goto	l65
  1936  00163E                     u410:
  1937  00163E                     
  1938                           ;main2.c: 159:  }
  1939  00163E  4A14               	infsnz	delay@i^0,f,c
  1940  001640  2A15               	incf	(delay@i+1)^0,f,c
  1941  001642                     l1257:
  1942  001642  5012               	movf	delay@ms^0,w,c
  1943  001644  5C14               	subwf	delay@i^0,w,c
  1944  001646  5013               	movf	(delay@ms+1)^0,w,c
  1945  001648  5815               	subwfb	(delay@i+1)^0,w,c
  1946  00164A  A0D8               	btfss	status,0,c
  1947  00164C  EF2A  F00B         	goto	u421
  1948  001650  EF2C  F00B         	goto	u420
  1949  001654                     u421:
  1950  001654  EF0F  F00B         	goto	l1245
  1951  001658                     u420:
  1952  001658  0012               	return		;funcret
  1953  00165A                     __end_of_delay:
  1954                           	opt callstack 0
  1955                           
  1956 ;; *************** function _changeProgram *****************
  1957 ;; Defined at:
  1958 ;;		line 340 in file "main2.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;  program         2    0[COMRAM] PTR unsigned int 
  1961 ;;		 -> main@program(2), 
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;  i               2    4[COMRAM] unsigned int 
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  1    wreg      void 
  1966 ;; Registers used:
  1967 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1973 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1974 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1975 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1976 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1977 ;;Total ram usage:        6 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; This function calls:
  1980 ;;		Nothing
  1981 ;; This function is called by:
  1982 ;;		_main
  1983 ;; This function uses a non-reentrant model
  1984 ;;
  1985                           
  1986                           	psect	text17
  1987  001050                     __ptext17:
  1988                           	opt callstack 0
  1989  001050                     _changeProgram:
  1990                           	opt callstack 30
  1991  001050                     
  1992                           ;main2.c: 340: void changeProgram(unsigned int * program);main2.c: 341: {;main2.c: 342: 
      +                              unsigned int i = 6000;
  1993  001050  0E17               	movlw	23
  1994  001052  6E06               	movwf	(changeProgram@i+1)^0,c
  1995  001054  0E70               	movlw	112
  1996  001056  6E05               	movwf	changeProgram@i^0,c
  1997                           
  1998                           ;main2.c: 344:     while(PORTBbits.RB4 && PORTBbits.RB3 && i > 0)
  1999  001058  EF31  F008         	goto	l1397
  2000  00105C                     l1395:
  2001                           
  2002                           ;main2.c: 345:     {;main2.c: 346:         i--;
  2003  00105C  0605               	decf	changeProgram@i^0,f,c
  2004  00105E  A0D8               	btfss	status,0,c
  2005  001060  0606               	decf	(changeProgram@i+1)^0,f,c
  2006  001062                     l1397:
  2007                           
  2008                           ;main2.c: 344:     while(PORTBbits.RB4 && PORTBbits.RB3 && i > 0)
  2009  001062  A881               	btfss	129,4,c	;volatile
  2010  001064  EF36  F008         	goto	u551
  2011  001068  EF38  F008         	goto	u550
  2012  00106C                     u551:
  2013  00106C  EF48  F008         	goto	l142
  2014  001070                     u550:
  2015  001070  A681               	btfss	129,3,c	;volatile
  2016  001072  EF3D  F008         	goto	u561
  2017  001076  EF3F  F008         	goto	u560
  2018  00107A                     u561:
  2019  00107A  EF48  F008         	goto	l142
  2020  00107E                     u560:
  2021  00107E  5005               	movf	changeProgram@i^0,w,c
  2022  001080  1006               	iorwf	(changeProgram@i+1)^0,w,c
  2023  001082  A4D8               	btfss	status,2,c
  2024  001084  EF46  F008         	goto	u571
  2025  001088  EF48  F008         	goto	u570
  2026  00108C                     u571:
  2027  00108C  EF2E  F008         	goto	l1395
  2028  001090                     u570:
  2029  001090                     l142:
  2030                           
  2031                           ;main2.c: 349:     if(PORTBbits.RB3 == 0)
  2032  001090  B681               	btfsc	129,3,c	;volatile
  2033  001092  EF4D  F008         	goto	u581
  2034  001096  EF4F  F008         	goto	u580
  2035  00109A                     u581:
  2036  00109A  EF72  F008         	goto	l143
  2037  00109E                     u580:
  2038  00109E                     
  2039                           ;main2.c: 350:     {;main2.c: 351:         if (*program < 2) {
  2040  00109E  C001  FFD9         	movff	changeProgram@program,fsr2l
  2041  0010A2  C002  FFDA         	movff	changeProgram@program+1,fsr2h
  2042  0010A6  0E01               	movlw	1
  2043  0010A8  50DB               	movf	plusw2,w,c
  2044  0010AA  E107               	bnz	u591
  2045  0010AC  0E02               	movlw	2
  2046  0010AE  5CDE               	subwf	postinc2,w,c
  2047  0010B0  B0D8               	btfsc	status,0,c
  2048  0010B2  EF5D  F008         	goto	u591
  2049  0010B6  EF5F  F008         	goto	u590
  2050  0010BA                     u591:
  2051  0010BA  EF68  F008         	goto	l1407
  2052  0010BE                     u590:
  2053  0010BE                     
  2054                           ;main2.c: 352:             (*program)++;
  2055  0010BE  C001  FFD9         	movff	changeProgram@program,fsr2l
  2056  0010C2  C002  FFDA         	movff	changeProgram@program+1,fsr2h
  2057  0010C6  2ADE               	incf	postinc2,f,c
  2058  0010C8  0E00               	movlw	0
  2059  0010CA  22DD               	addwfc	postdec2,f,c
  2060                           
  2061                           ;main2.c: 353:         } else {
  2062  0010CC  EF9A  F008         	goto	l150
  2063  0010D0                     l1407:
  2064                           
  2065                           ;main2.c: 354:             *program = 1;
  2066  0010D0  C001  FFD9         	movff	changeProgram@program,fsr2l
  2067  0010D4  C002  FFDA         	movff	changeProgram@program+1,fsr2h
  2068  0010D8  0E01               	movlw	1
  2069  0010DA  6EDE               	movwf	postinc2,c
  2070  0010DC  0E00               	movlw	0
  2071  0010DE  6EDD               	movwf	postdec2,c
  2072  0010E0  EF9A  F008         	goto	l150
  2073  0010E4                     l143:
  2074  0010E4  B881               	btfsc	129,4,c	;volatile
  2075  0010E6  EF77  F008         	goto	u601
  2076  0010EA  EF79  F008         	goto	u600
  2077  0010EE                     u601:
  2078  0010EE  EF9A  F008         	goto	l150
  2079  0010F2                     u600:
  2080  0010F2                     
  2081                           ;main2.c: 358:     {;main2.c: 359:         if (*program > 1) {
  2082  0010F2  C001  FFD9         	movff	changeProgram@program,fsr2l
  2083  0010F6  C002  FFDA         	movff	changeProgram@program+1,fsr2h
  2084  0010FA  0E01               	movlw	1
  2085  0010FC  50DB               	movf	plusw2,w,c
  2086  0010FE  E109               	bnz	u610
  2087  001100  0E02               	movlw	2
  2088  001102  5CDE               	subwf	postinc2,w,c
  2089  001104  A0D8               	btfss	status,0,c
  2090  001106  EF87  F008         	goto	u611
  2091  00110A  EF89  F008         	goto	u610
  2092  00110E                     u611:
  2093  00110E  EF92  F008         	goto	l1413
  2094  001112                     u610:
  2095  001112                     
  2096                           ;main2.c: 360:             (*program)--;
  2097  001112  C001  FFD9         	movff	changeProgram@program,fsr2l
  2098  001116  C002  FFDA         	movff	changeProgram@program+1,fsr2h
  2099  00111A  06DE               	decf	postinc2,f,c
  2100  00111C  0E00               	movlw	0
  2101  00111E  5ADD               	subwfb	postdec2,f,c
  2102                           
  2103                           ;main2.c: 361:         } else {
  2104  001120  EF9A  F008         	goto	l150
  2105  001124                     l1413:
  2106                           
  2107                           ;main2.c: 362:             *program = 2;
  2108  001124  C001  FFD9         	movff	changeProgram@program,fsr2l
  2109  001128  C002  FFDA         	movff	changeProgram@program+1,fsr2h
  2110  00112C  0E02               	movlw	2
  2111  00112E  6EDE               	movwf	postinc2,c
  2112  001130  0E00               	movlw	0
  2113  001132  6EDD               	movwf	postdec2,c
  2114  001134                     l150:
  2115  001134  0012               	return		;funcret
  2116  001136                     __end_of_changeProgram:
  2117                           	opt callstack 0
  2118                           
  2119                           	psect	rparam
  2120  0000                     tosu	equ	0xFFF
  2121                           tosh	equ	0xFFE
  2122                           tosl	equ	0xFFD
  2123                           stkptr	equ	0xFFC
  2124                           pclatu	equ	0xFFB
  2125                           pclath	equ	0xFFA
  2126                           pcl	equ	0xFF9
  2127                           tblptru	equ	0xFF8
  2128                           tblptrh	equ	0xFF7
  2129                           tblptrl	equ	0xFF6
  2130                           tablat	equ	0xFF5
  2131                           prodh	equ	0xFF4
  2132                           prodl	equ	0xFF3
  2133                           indf0	equ	0xFEF
  2134                           postinc0	equ	0xFEE
  2135                           postdec0	equ	0xFED
  2136                           preinc0	equ	0xFEC
  2137                           plusw0	equ	0xFEB
  2138                           fsr0h	equ	0xFEA
  2139                           fsr0l	equ	0xFE9
  2140                           wreg	equ	0xFE8
  2141                           indf1	equ	0xFE7
  2142                           postinc1	equ	0xFE6
  2143                           postdec1	equ	0xFE5
  2144                           preinc1	equ	0xFE4
  2145                           plusw1	equ	0xFE3
  2146                           fsr1h	equ	0xFE2
  2147                           fsr1l	equ	0xFE1
  2148                           bsr	equ	0xFE0
  2149                           indf2	equ	0xFDF
  2150                           postinc2	equ	0xFDE
  2151                           postdec2	equ	0xFDD
  2152                           preinc2	equ	0xFDC
  2153                           plusw2	equ	0xFDB
  2154                           fsr2h	equ	0xFDA
  2155                           fsr2l	equ	0xFD9
  2156                           status	equ	0xFD8


Data Sizes:
    Strings     77
    Constant    0
    Data        0
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     38      53
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    changeProgram@program	PTR unsigned int  size(2) Largest target is 2
		 -> main@program(COMRAM[2]), 

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_5(CODE[14]), STR_4(CODE[16]), STR_3(CODE[14]), STR_2(CODE[16]), 

    sp__cprog_itos	PTR unsigned char  size(2) Largest target is 0

    sp__cprog_strrev	PTR unsigned char  size(2) Largest target is 0

    printMask@mask	PTR unsigned char  size(2) Largest target is 8
		 -> subProgram2@binBuffer(COMRAM[8]), subProgram1@binBuffer(COMRAM[8]), 

    intToBinary@buffor	PTR unsigned char  size(2) Largest target is 8
		 -> subProgram2@binBuffer(COMRAM[8]), subProgram1@binBuffer(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_runSubProgram
    _runSubProgram->_subProgram2
    _subProgram2->_delay
    _subProgram1->_delay
    _lcd_str->_lcd_dat
    _lcd_dat->_lcd_wr
    _getDelay->___lwdiv
    ___lwdiv->_adc
    _lcd_init->_delay
    _lcd_cmd->_lcd_wr
    _delay->_getDelay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    5567
                                             36 COMRAM     2     2      0
                      _changeProgram
                            _lcd_cmd
                           _lcd_init
                      _runSubProgram
 ---------------------------------------------------------------------------------
 (1) _runSubProgram                                        4     2      2    4672
                                             32 COMRAM     4     2      2
                        _subProgram1
                        _subProgram2
 ---------------------------------------------------------------------------------
 (2) _subProgram2                                         18    18      0    2314
                                             22 COMRAM    10    10      0
             _convertValueToGrayCode
                              _delay
                           _getDelay
                        _intToBinary
                _isProgramInterupted
                            _lcd_cmd
                            _lcd_str
                          _printMask
 ---------------------------------------------------------------------------------
 (3) _convertValueToGrayCode                               1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _subProgram1                                          9     9      0    2260
                                             22 COMRAM     9     9      0
                              _delay
                           _getDelay
                        _intToBinary
                _isProgramInterupted
                            _lcd_cmd
                            _lcd_str
                          _printMask
 ---------------------------------------------------------------------------------
 (3) _printMask                                            3     1      2     359
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _lcd_str                                              5     3      2     424
                                              2 COMRAM     5     3      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (4) _lcd_dat                                              1     1      0      30
                                              1 COMRAM     1     1      0
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _isProgramInterupted                                  4     2      2      24
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _intToBinary                                          7     4      3     416
                                              0 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (3) _getDelay                                             3     1      2     359
                                             14 COMRAM     3     1      2
                            ___lwdiv
                                _adc
 ---------------------------------------------------------------------------------
 (4) _adc                                                  7     5      2      22
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              7 COMRAM     7     3      4
                                _adc (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0     578
                              _delay
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              1     1      0      30
                                              1 COMRAM     1     1      0
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (5) _lcd_wr                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _delay                                                5     3      2     548
                                             17 COMRAM     5     3      2
                           _getDelay (ARG)
 ---------------------------------------------------------------------------------
 (1) _changeProgram                                        6     4      2     232
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _changeProgram
   _lcd_cmd
     _lcd_wr
   _lcd_init
     _delay
       _getDelay (ARG)
         ___lwdiv
           _adc (ARG)
         _adc
     _lcd_cmd
       _lcd_wr
   _runSubProgram
     _subProgram1
       _delay
         _getDelay (ARG)
           ___lwdiv
             _adc (ARG)
           _adc
       _getDelay
         ___lwdiv
           _adc (ARG)
         _adc
       _intToBinary
       _isProgramInterupted
       _lcd_cmd
         _lcd_wr
       _lcd_str
         _lcd_dat
           _lcd_wr
       _printMask
     _subProgram2
       _convertValueToGrayCode
       _delay
         _getDelay (ARG)
           ___lwdiv
             _adc (ARG)
           _adc
       _getDelay
         ___lwdiv
           _adc (ARG)
         _adc
       _intToBinary
       _isProgramInterupted
       _lcd_cmd
         _lcd_wr
       _lcd_str
         _lcd_dat
           _lcd_wr
       _printMask

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     26      35       1       41.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      35      34        0.0%
DATA                 0      0      35       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Jun  6 03:44:41 2020

                             l42 1610                               l45 12A0  
                             l65 1622                               l73 13A2  
                             l82 1710                               l91 1522  
                             l68 1658                               l76 13A4  
                             l85 16FE                               l79 13E0  
                             l88 16EC                               l97 15C4  
                  _runSubProgram 165A                      __CFG_BORV$3 000000  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
                   __CFG_CP2$OFF 000000                     __CFG_CP3$OFF 000000  
                            l100 16C4                              l110 1708  
                            l105 11EC                              l131 1496  
                            l115 1350                              l124 169A  
                            l150 1134                              l142 1090  
                            l143 10E4                              l135 14C6  
                            l665 1454                              l658 144C  
                            l847 170C                              l951 16FA  
                            l871 16E0                              l953 16FC  
                            l945 16F0                              l873 16E6  
                            l947 16F2                              l875 16E8  
                            l949 16F8                              l877 16EA  
                            l869 16DE                              l989 1702  
                   __CFG_CPB$OFF 000000                              u400 1610  
                            u401 160C                              u410 163E  
                            u411 163A                              u420 1658  
                            u340 13B2                              u500 11AE  
                            u421 1654                              u341 13AE  
                            u501 11AA                              u430 15C4  
                            u510 11C4                              u431 15C0  
                            u511 11C0                              u600 10F2  
                            u360 13FC                              u440 1476  
                            u520 12F8                              u601 10EE  
                            u361 13F8                              u441 1472  
                            u521 12F4                              u610 1112  
                            u370 141A                              u450 1484  
                            u530 1322                     __CFG_CPD$OFF 000000  
                            u611 110E                              u371 1416  
                            u355 13BA                              u451 1480  
                            u531 131E                              u380 1436  
                            u460 1496                              u540 1338  
                            u381 1432                              u461 1492  
                            u541 1334                              u550 1070  
                            u470 14A4                              u551 106C  
                            u471 14A0                              u560 107E  
                            u480 14B2                              u561 107A  
                            u481 14AE                              u570 1090  
                            u394 15F0                              u490 1184  
                            u571 108C                              u395 15EC  
                            u491 1180                              u580 109E  
                            u581 109A                              u590 10BE  
                            u591 10BA                              _adc 1352  
                            wreg 000FE8                     __CFG_LVP$OFF 000000  
                  printMask@mask 0001                     __CFG_WDT$OFF 000000  
                           ?_adc 0001                             l1201 140C  
                           l1211 1440                             l1203 141A  
                           l1213 1446                             l1205 1420  
                           l1221 1602                             l1301 1162  
                           l1207 1436                             l1215 15C6  
                           l1231 1240                             l1223 11EE  
                           l1303 116E                             l1401 107E  
                           l1209 143E                             l1217 15D2  
                           l1241 129C                             l1233 1254  
                           l1225 11F2                             l1321 11DC  
                           l1313 11B2                             l1411 1112  
                           l1403 109E                             l1251 162C  
                           l1243 1612                             l1219 15FC  
                           l1235 1268                             l1227 1218  
                           l1315 11B4                             l1307 1188  
                           l1331 12BE                             l1323 12A2  
                           l1413 1124                             l1405 10BE  
                           l1253 162E                             l1245 161E  
                           l1173 1354                             l1261 157E  
                           l1237 127C                             l1229 122C  
                           l1317 11C4                             l1309 1198  
                           l1341 12FC                             l1333 12C6  
                           l1325 12A6                             l1421 154E  
                           l1407 10D0                             l1255 163E  
                           l1175 1358                             l1183 1370  
                           l1263 159A                             l1239 1290  
                           l1319 11D0                             l1351 1338  
                           l1343 130C                             l1335 12D6  
                           l1327 12AC                             l1423 1556  
                           l1415 1524                             l1409 10F2  
                           l1257 1642                             l1361 14DA  
                           l1193 13E2                             l1185 13B2  
                           l1177 1360                             l1281 1484  
                           l1273 1456                             l1265 159C  
                           l1353 1344                             l1337 12E2  
                           l1329 12B2                             l1425 1562  
                           l1417 1544                             l1371 150A  
                           l1363 14E0                             l1355 14C8  
                           l1195 13EA                             l1179 1368  
                           l1267 169C                             l1283 14A4  
                           l1275 1462                             l1259 1576  
                           l1347 1326                             l1435 1684  
                           l1419 1548                             l1373 1510  
                           l1365 14F2                             l1357 14CC  
                           l1197 13FC                             l1437 1384  
                           l1269 16BE                             l1285 14B2  
                           l1277 1468                             l1293 1136  
                           l1349 1328                             l1381 165E  
                           l1375 1516                             l1367 14FE  
                           l1359 14D8                             l1199 1404  
                           l1279 1476                             l1295 1142  
                           l1383 1666                             l1393 1050  
                           l1377 151C                             l1369 1504  
                           l1289 14BE                             l1297 114E  
                           l1395 105C                             l1299 1152  
                           l1387 166E                             l1379 165A  
                           l1397 1062                             l1399 1070  
          __end_of_changeProgram 1136                             STR_1 1001  
                           STR_2 1012                             STR_3 1032  
                           STR_4 1022                             STR_5 1040  
                   __CFG_PWRT$ON 000000                             _main 1524  
                           fsr2h 000FDA                             indf2 000FDF  
                           fsr2l 000FD9                      main@program 0025  
                           prodl 000FF3                             start 0000  
                  __CFG_IESO$OFF 000000                    __CFG_MCLRE$ON 000000  
                   ?_intToBinary 0001                     ___param_bank 000000  
                          ??_adc 0003                   ?_runSubProgram 0021  
                 printMask@value 0003             changeProgram@program 0001  
                          ?_main 0001                  __end_of___lwdiv 1456  
                          _PORTD 000F83                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _TRISE 000F96  
           isProgramInterupted@i 0003                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
                  __CFG_WRT3$OFF 000000                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                   __CFG_EBTR3$OFF 000000  
                __end_of_lcd_dat 16EE                  __end_of_lcd_cmd 1700  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                __end_of_lcd_str 15C6                    __CFG_WRTD$OFF 000000  
                 __CFG_EBTRB$OFF 000000                            _delay 1612  
                 __CFG_BOREN$OFF 000000                            tablat 000FF5  
                          plusw2 000FDB                            status 000FD8  
        ?_convertValueToGrayCode 0001                  __initialization 16C6  
           runSubProgram@program 0021                     __end_of_main 1576  
                 __CFG_OSC$HSPLL 000000     __size_of_isProgramInterupted 0072  
                         ??_main 0025                    __activetblptr 000002  
                         ?_delay 0012                           _ADCON0 000FC2  
                         _ADCON1 000FC1                           _ADCON2 000FC0  
                         _ADRESH 000FC4                           _ADRESL 000FC3  
 __end_of_convertValueToGrayCode 170A                 __end_of_getDelay 16C6  
                 __CFG_XINST$OFF 000000                 __end_of_lcd_init 1524  
                ??_runSubProgram 0023                        ??___lwdiv 000C  
                         _lcd_wr 170A                           delay@i 0014  
                         delay@j 0016                           clear_0 16CC  
                      ??_lcd_dat 0002                        ??_lcd_cmd 0002  
                      ??_lcd_str 0005                     __mediumconst 0000  
             subProgram1@counter 001F                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
             subProgram2@counter 0020                     ?_subProgram1 0001  
                   ?_subProgram2 0001                       __accesstop 0080  
        __end_of__initialization 16D2                  __CFG_PBADEN$OFF 000000  
                  ___rparam_used 000001                   __pcstackCOMRAM 0001  
                  __end_of_delay 165A             __size_of_intToBinary 004C  
                        ??_delay 0014                     intToBinary@i 0006  
                        ?_lcd_wr 0001               __size_of_printMask 00B4  
                      ?_getDelay 000F                _potentiomer1value 002D  
              _potentiomer2value 0027                        ?_lcd_init 0001  
            _isProgramInterupted 1456                          __Hparam 0000  
                        __Lparam 0000                          ___lwdiv 13E2  
                   __psmallconst 1000                  __size_of_lcd_wr 0008  
           ?_isProgramInterupted 0001                  __CFG_STVREN$OFF 000000  
                        __pcinit 16C6           __size_of_changeProgram 00E6  
                        __ramtop 1000                          __ptext0 1524  
                        __ptext1 165A                          __ptext2 12A2  
                        __ptext3 1700                          __ptext4 1136  
                        __ptext5 11EE                          __ptext6 1576  
                        __ptext7 16DC                          __ptext8 1456  
                        __ptext9 15C6                          _lcd_dat 16DC  
                        _lcd_cmd 16EE      convertValueToGrayCode@value 0001  
                        _lcd_str 1576                     __size_of_adc 0090  
                        delay@ms 0012                       ??_getDelay 0011  
                     ??_lcd_init 0017             end_of_initialization 16D2  
           __size_of_subProgram1 00B8             __size_of_subProgram2 00B0  
                  __Lmediumconst 0000                 intToBinary@value 0003  
              __end_of_printMask 12A2                          postdec2 000FDD  
                        postinc0 000FEE                          postinc2 000FDE  
          ??_isProgramInterupted 0003                        _PORTBbits 000F81  
                      _PORTEbits 000F84                       lcd_dat@val 0002  
                     lcd_cmd@val 0002                    _changeProgram 1050  
                     lcd_str@str 0003            __end_of_runSubProgram 169C  
                 __end_of_lcd_wr 1712              start_initialization 16C6  
                    __end_of_adc 13E2                   ?_changeProgram 0001  
                 changeProgram@i 0005                    getDelay@delay 0011  
                  ??_intToBinary 0004                         ??_lcd_wr 0001  
               __CFG_LPT1OSC$OFF 000000                      __pbssCOMRAM 0027  
       ??_convertValueToGrayCode 0001                __size_of_getDelay 002A  
              __size_of_lcd_init 005C                 ___lwdiv@dividend 0008  
              __CFG_CCP2MX$PORTC 000000                         ?___lwdiv 0008  
                      _direction 0035              __end_of_intToBinary 1612  
                       ?_lcd_dat 0001                         ?_lcd_cmd 0001  
                       ?_lcd_str 0003                      __smallconst 1000  
                ??_changeProgram 0003                 ___lwdiv@quotient 000C  
                 __size_of_delay 0048                 __CFG_WDTPS$32768 000000  
                      _printMask 11EE                       _ADCON0bits 000FC2  
                      lcd_wr@val 0001                    ??_subProgram1 0017  
                  ??_subProgram2 0017        subProgram2@counterDisplay 001F  
__size_of_convertValueToGrayCode 000A      __end_of_isProgramInterupted 14C8  
                       __Hrparam 0000                         __Lrparam 0000  
                    _intToBinary 15C6                       ?_printMask 0001  
               __size_of___lwdiv 0074                         adc@kanal 0007  
               __size_of_lcd_dat 0012                 __size_of_lcd_cmd 0012  
               __size_of_lcd_str 0050                         _getDelay 169C  
                ___lwdiv@divisor 000A                  ___lwdiv@counter 000E  
                       __ptext10 169C                         __ptext11 1352  
                       __ptext12 13E2                         __ptext13 14C8  
                       __ptext14 16EE                         __ptext15 170A  
                       __ptext16 1612                         __ptext17 1050  
                       _lcd_init 14C8                    __size_of_main 0052  
            __end_of_subProgram1 11EE              __end_of_subProgram2 1352  
         _convertValueToGrayCode 1700             subProgram1@binBuffer 0017  
                       lcd_str@i 0007             subProgram2@binBuffer 0017  
         __size_of_runSubProgram 0042                intToBinary@buffor 0001  
                    ??_printMask 0003                      _subProgram1 1136  
                    _subProgram2 12A2                     _potentiometr 0033  
